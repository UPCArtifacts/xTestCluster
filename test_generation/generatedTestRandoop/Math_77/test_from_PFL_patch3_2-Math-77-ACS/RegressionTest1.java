import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(realVector22, arrayRealVector23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        double double21 = arrayRealVector20.getNorm();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector32.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector32);
        int int37 = openMapRealVector36.getDimension();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        openMapRealVector40.set(10.0d);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        openMapRealVector45.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector52.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector49.add(openMapRealVector52);
        int int55 = openMapRealVector52.getDimension();
        double double56 = openMapRealVector52.getSparcity();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector52.mapUlpToSelf();
        double double58 = openMapRealVector40.getDistance(openMapRealVector52);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector61.mapCbrt();
        double double65 = openMapRealVector52.getDistance(realVector64);
        double[] doubleArray68 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68, true);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector52.add(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector52.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector36.append(openMapRealVector52);
        org.apache.commons.math.linear.RealVector realVector74 = openMapRealVector36.mapCbrt();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector20.setSubVector(10, realVector74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.355979641962135d + "'", double21 == 14.355979641962135d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 10.0d + "'", double58 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 1.6329299089739802d + "'", double65 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(openMapRealVector73);
        org.junit.Assert.assertNotNull(realVector74);
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 0, (double) 100.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector5.mapUlpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix32 = arrayRealVector5.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector35.mapCos();
        boolean boolean40 = arrayRealVector29.equals((java.lang.Object) arrayRealVector35);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector2.add(arrayRealVector35);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        double[] doubleArray6 = arrayRealVector2.getDataRef();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector19.mapDivideToSelf((double) (byte) 0);
        int int24 = arrayRealVector19.getDimension();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.mapSin();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.projection(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (int) '#', (double) ' ');
        double[] doubleArray32 = new double[] {};
        double[] doubleArray34 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector31.append(doubleArray32);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector2.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector31);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[100.0]");
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        arrayRealVector17.unitize();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector17.outerProduct(realVector27);
        double double30 = arrayRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector17.map(univariateRealFunction31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13.35414242816297d + "'", double30 == 13.35414242816297d);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapTanhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector39.unitize();
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        arrayRealVector2.unitize();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = arrayRealVector2.outerProduct(realVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosh();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector18.mapPow((double) 0);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.append((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector30.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector30.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector25.append(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector2.ebeDivide(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(arrayRealVector43);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector34.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapCeil();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector13.mapSin();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        int int33 = openMapRealVector30.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.copy();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapRintToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector47.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector34.subtract(openMapRealVector47);
        double double50 = openMapRealVector20.getL1Distance(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector20.append(Double.NaN);
        double double53 = openMapRealVector52.getSparcity();
        double double54 = openMapRealVector13.getL1Distance(openMapRealVector52);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 9.0d + "'", double50 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.0d + "'", double53 == 1.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double54));
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        boolean boolean18 = openMapRealVector17.isInfinite();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector17.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1, (int) ' ');
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector5);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor10 = arrayRealVector9.sparseIterator();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 0, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapLog10();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector6.mapPow((double) 0);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.append((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector13.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapAcosToSelf();
        double[] doubleArray25 = arrayRealVector21.getDataRef();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector13.ebeDivide(doubleArray25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.add(doubleArray25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN]");
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector9.add(realVector22);
        double[] doubleArray24 = arrayRealVector9.getData();
        openMapRealVector4.setSubVector((int) (short) 0, doubleArray24);
        openMapRealVector4.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector18.ebeDivide(arrayRealVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = arrayRealVector31.outerProduct(arrayRealVector62);
        double double68 = arrayRealVector12.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector69 = arrayRealVector62.copy();
        org.apache.commons.math.linear.RealVector realVector70 = abstractRealVector69.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(abstractRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = arrayRealVector12.getDistance(realVector15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf((double) (-1.0f));
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapDivide(9.99999999999319E9d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(realVector16);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        boolean boolean5 = arrayRealVector2.isInfinite();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapLog10();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapLogToSelf();
        double double14 = arrayRealVector10.getL1Norm();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double19 = arrayRealVector10.getL1Distance(arrayRealVector18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector22.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector22.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(realVector32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        double double40 = arrayRealVector33.getL1Distance(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector10.add(arrayRealVector36);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        double double46 = arrayRealVector36.dotProduct(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector36.mapUlpToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) 'a', realVector47);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.4711276743037347d + "'", double14 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 8.528872325696266d + "'", double19 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 42.0d + "'", double39 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-61.787362320756856d) + "'", double46 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector57.subtract(realVector62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector57.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector57.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector57.mapPowToSelf((double) 10.0f);
        double double69 = openMapRealVector54.dotProduct(realVector68);
        openMapRealVector54.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 9.99999999999319E9d + "'", double69 == 9.99999999999319E9d);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector10.copy();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector10.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapCeilToSelf();
        double[] doubleArray30 = new double[] {};
        double[] doubleArray32 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtract(10.0d);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        double double40 = arrayRealVector38.getNorm();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapAtan();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        double double46 = arrayRealVector44.getNorm();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapAtan();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector50.mapAsinToSelf();
        double double60 = arrayRealVector44.getLInfDistance(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38, (org.apache.commons.math.linear.RealVector) arrayRealVector50);
        double[] doubleArray62 = arrayRealVector50.toArray();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector33.add(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector22.subtract(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector17.ebeDivide(doubleArray62);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN]");
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapDivideToSelf((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (double) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor8 = openMapRealVector7.sparseIterator();
        double[] doubleArray9 = openMapRealVector7.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector2.subtract(doubleArray9);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(entryItor8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAddToSelf((double) (short) 100);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapFloorToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.append(4.122307273313197E-9d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapLogToSelf();
        double double27 = arrayRealVector23.getL1Norm();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double32 = arrayRealVector23.getL1Distance(arrayRealVector31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        double double44 = arrayRealVector35.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector23.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        double double46 = arrayRealVector17.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector42.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.4711276743037347d + "'", double27 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 8.528872325696266d + "'", double32 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-6.853169696133174d) + "'", double46 == (-6.853169696133174d));
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector26.mapAdd((double) (-1));
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapSubtractToSelf((double) '4');
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector34.setSubVector((int) '4', (org.apache.commons.math.linear.RealVector) arrayRealVector38);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 0, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapLog10();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = arrayRealVector5.getDistance(arrayRealVector10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector23 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double24 = arrayRealVector2.getLInfDistance(realVector23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector10.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector10.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(realVector20);
        double[] doubleArray22 = arrayRealVector21.toArray();
        double double23 = arrayRealVector5.getLInfDistance(doubleArray22);
        java.lang.Class<?> wildcardClass24 = arrayRealVector5.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(wildcardClass24);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        double double17 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor42 = openMapRealVector13.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(entryItor42);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector21);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        double[] doubleArray33 = arrayRealVector32.getDataRef();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapDivide((double) (short) -1);
        double[] doubleArray38 = arrayRealVector32.getDataRef();
        double double39 = openMapRealVector18.getL1Distance(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapExpToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        double double51 = arrayRealVector47.dotProduct(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector42.add(arrayRealVector50);
        java.lang.String str53 = arrayRealVector52.toString();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray55, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector52.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapExpToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        double double71 = arrayRealVector67.dotProduct(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector62.add(arrayRealVector70);
        double[] doubleArray73 = arrayRealVector72.getDataRef();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector72.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector72.mapDivide((double) (short) -1);
        double[] doubleArray78 = arrayRealVector72.getDataRef();
        double double79 = openMapRealVector58.getL1Distance(doubleArray78);
        double double80 = openMapRealVector58.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector18.subtract(openMapRealVector58);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{14.35}" + "'", str13, "{14.35}");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN]");
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{14.35}" + "'", str53, "{14.35}");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN]");
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double79));
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 10.0d + "'", double80 == 10.0d);
        org.junit.Assert.assertNotNull(openMapRealVector81);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        double double8 = openMapRealVector7.getL1Norm();
        double double9 = openMapRealVector2.dotProduct(openMapRealVector7);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector7.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector(100);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        double[] doubleArray18 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, (int) (short) 1, 0);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector5.mapMultiply(43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapCosh();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapDivideToSelf((double) 100L);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapFloor();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector22.mapSubtractToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        boolean boolean31 = arrayRealVector16.isNaN();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector16.mapUlp();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(0, 434.7112767430374d);
        // The following exception was thrown during execution in test generation
        try {
            double double36 = arrayRealVector16.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector35);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        double double7 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.0d + "'", double7 == 6.0d);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapExp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapSinhToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        double[] doubleArray17 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, true);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAddToSelf((double) 100L);
        double[] doubleArray35 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = openMapRealVector33.outerProduct(doubleArray35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector14.append(doubleArray35);
        double double41 = openMapRealVector40.getSparcity();
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector40.mapPowToSelf(5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.5574077246525695]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        double[] doubleArray49 = arrayRealVector48.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = arrayRealVector25.outerProduct(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector25.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector25.mapSin();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector25.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapFloor();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = arrayRealVector6.add(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapTanhToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapCbrt();
        boolean boolean24 = arrayRealVector14.equals((java.lang.Object) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector20.mapLog1p();
        int int26 = arrayRealVector20.getDimension();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCoshToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapSqrt();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        double double42 = arrayRealVector40.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector30.add(arrayRealVector40);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        double double49 = arrayRealVector46.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.subtract(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector20.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        double double63 = arrayRealVector59.dotProduct(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector54.add(arrayRealVector62);
        double[] doubleArray65 = arrayRealVector64.getDataRef();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector64.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector64.mapDivide((double) (short) -1);
        double[] doubleArray70 = arrayRealVector64.getDataRef();
        double double71 = arrayRealVector50.getLInfDistance(doubleArray70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray70, (double) '#');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix74 = openMapRealVector2.outerProduct(doubleArray70);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 10.0d + "'", double42 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 42.0d + "'", double49 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN]");
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, 0);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        arrayRealVector15.set(100.0d);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector3.mapSubtractToSelf((double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapInvToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapSqrt();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        double double34 = arrayRealVector32.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector22.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapLogToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapLogToSelf();
        double double43 = arrayRealVector39.getL1Norm();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double48 = arrayRealVector39.getL1Distance(arrayRealVector47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector51.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector51.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(realVector61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapSubtractToSelf((double) '4');
        double double68 = arrayRealVector65.getNorm();
        double double69 = arrayRealVector62.getL1Distance(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector39.add(arrayRealVector65);
        double double71 = arrayRealVector65.getL1Norm();
        double[] doubleArray72 = arrayRealVector65.toArray();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector32.projection(doubleArray72);
        double double74 = arrayRealVector12.dotProduct(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.4711276743037347d + "'", double43 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.528872325696266d + "'", double48 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 42.0d + "'", double68 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 42.0d + "'", double71 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + (-50.05532728089162d) + "'", double74 == (-50.05532728089162d));
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        double double6 = arrayRealVector2.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.35414242816297d + "'", double6 == 4.35414242816297d);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector24.mapAdd((double) ' ');
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.mapAsinToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector12.outerProduct(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector12.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapSubtractToSelf(14.354142428153194d);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector15, arrayRealVector32);
        boolean boolean40 = arrayRealVector39.isInfinite();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapUlp();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector55.subtract(realVector60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector55.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector55);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector55.ebeDivide(arrayRealVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector44.subtract(arrayRealVector67);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector72.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector67.ebeDivide(arrayRealVector72);
        double[] doubleArray77 = arrayRealVector72.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = arrayRealVector39.dotProduct(doubleArray77);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(arrayRealVector68);
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[-42.0]");
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', (double) '#');
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapLog10ToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        double double50 = arrayRealVector41.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector32.add(arrayRealVector48);
        double double54 = arrayRealVector48.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.528872325696266d + "'", double50 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector2.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector49);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapAcos();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector13.append(realVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (int) '#', (double) ' ');
        double[] doubleArray31 = new double[] {};
        double[] doubleArray33 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31, doubleArray33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector30.append(doubleArray31);
        // The following exception was thrown during execution in test generation
        try {
            double double37 = openMapRealVector13.dotProduct(openMapRealVector30);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertNotNull(openMapRealVector36);
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapCbrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector10.setEntry(1, (double) (-1));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector2.ebeDivide(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) 'a');
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector55.mapTanhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector52.add(openMapRealVector55);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCoshToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        int int38 = arrayRealVector32.getDimension();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCoshToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapSqrt();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        double double54 = arrayRealVector52.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector42.add(arrayRealVector52);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.subtract(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector32.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        double double64 = arrayRealVector12.getLInfDistance(realVector63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector12.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setEntry(1, 85.64585757183703d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (short) -1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector9.append(arrayRealVector14);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector14.mapToSelf(univariateRealFunction27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapLogToSelf();
        double double58 = arrayRealVector54.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double63 = arrayRealVector54.getL1Distance(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector37, arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector54.mapSqrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54, true);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.4711276743037347d + "'", double58 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8.528872325696266d + "'", double63 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector68);
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        double double7 = arrayRealVector2.getLInfNorm();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.copy();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        double double23 = arrayRealVector14.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        double double32 = arrayRealVector28.getL1Norm();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double37 = arrayRealVector28.getL1Distance(arrayRealVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapSubtractToSelf((double) '4');
        double double57 = arrayRealVector54.getNorm();
        double double58 = arrayRealVector51.getL1Distance(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector28.add(arrayRealVector54);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        double double64 = arrayRealVector54.dotProduct(realVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector21.add(arrayRealVector54);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        double double77 = arrayRealVector73.dotProduct(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector68.add(arrayRealVector76);
        double[] doubleArray79 = arrayRealVector78.getDataRef();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector54.subtract(doubleArray79);
        double double81 = openMapRealVector10.getLInfDistance(doubleArray79);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector10.mapAddToSelf((double) '#');
        double double84 = openMapRealVector83.getLInfNorm();
        double double85 = arrayRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector83);
        arrayRealVector2.set(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.0d + "'", double7 == 6.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 8.528872325696266d + "'", double23 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.4711276743037347d + "'", double32 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 8.528872325696266d + "'", double37 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 42.0d + "'", double57 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-61.787362320756856d) + "'", double64 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 13.35414242816297d + "'", double81 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 6.0d + "'", double84 == 6.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 26.0d + "'", double85 == 26.0d);
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector46.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector46.mapDivideToSelf(1.749534445339284d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction71 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector46.map(univariateRealFunction71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector70);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        double double17 = arrayRealVector16.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue(Double.isNaN(double17));
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanhToSelf();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray19 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, doubleArray17);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.unitVector();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector13.setEntry((int) (byte) 1, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector7.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector7.mapSinh();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector7.mapCeil();
        boolean boolean22 = openMapRealVector4.equals((java.lang.Object) arrayRealVector7);
        int int23 = openMapRealVector4.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector37 = arrayRealVector29.copy();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector29.mapUlp();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector29.mapSubtract(1.0E-12d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(abstractRealVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        double[] doubleArray27 = arrayRealVector15.toArray();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.mapCosToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        double[] doubleArray39 = new double[] {};
        double[] doubleArray41 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39, doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtract(10.0d);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAtan();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        double double55 = arrayRealVector53.getNorm();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapAtan();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector59.subtract(realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector59.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector59.mapAsinToSelf();
        double double69 = arrayRealVector53.getLInfDistance(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47, (org.apache.commons.math.linear.RealVector) arrayRealVector59);
        double[] doubleArray71 = arrayRealVector59.toArray();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector42.add(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector31.subtract(doubleArray71);
        double double74 = arrayRealVector15.dotProduct(doubleArray71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(realVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector15.mapFloorToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector79.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector79.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector79.mapPow((double) 0);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector86.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector79.append((org.apache.commons.math.linear.RealVector) arrayRealVector86);
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector86.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector86.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector86.mapPow((double) 10.0f);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector86.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector95 = arrayRealVector15.add(arrayRealVector86);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(arrayRealVector95);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.unitVector();
        org.apache.commons.math.linear.RealVector realVector21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.append(realVector21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapPow((double) 10.0f);
        double[] doubleArray17 = arrayRealVector9.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, 13.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[5.259548471626528E-84]");
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        boolean boolean8 = openMapRealVector2.isNaN();
        double double9 = openMapRealVector2.getLInfNorm();
        double double10 = openMapRealVector2.getSparcity();
        double[] doubleArray15 = new double[] { (short) -1, 10.00000000000001d, 2 };
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) 'a', doubleArray15);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 6.0d + "'", double9 == 6.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 10.00000000000001, 2.0]");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        double double5 = openMapRealVector2.getSparcity();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector18.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapTanhToSelf();
        double double25 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector23.add(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapPowToSelf(4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.6853169696133175d + "'", double25 == 1.6853169696133175d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapTan();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.map(univariateRealFunction18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = arrayRealVector12.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapPow((double) 10.0f);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector30.ebeDivide(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector19.subtract(arrayRealVector42);
        double double45 = arrayRealVector9.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapPow((double) 0);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector49.append((org.apache.commons.math.linear.RealVector) arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector56.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapPow((double) 10.0f);
        double[] doubleArray64 = arrayRealVector56.getData();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector9.setSubVector((-1), doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[5.259548471626528E-84]");
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector18.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector38.add(openMapRealVector41);
        int int44 = openMapRealVector41.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.copy();
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapCos();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector49.mapExpm1();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56);
        openMapRealVector57.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector57.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector64.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector61.add(openMapRealVector64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector64.mapAddToSelf((double) 100L);
        double[] doubleArray70 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix71 = openMapRealVector68.outerProduct(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector49.add(doubleArray70);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = openMapRealVector45.outerProduct(doubleArray70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray70);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector27.setSubVector((int) '4', doubleArray70);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector69.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60, (org.apache.commons.math.linear.RealVector) arrayRealVector69);
        boolean boolean82 = arrayRealVector69.isInfinite();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector69.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(realVector83);
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAddToSelf(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        openMapRealVector10.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.mapAdd((double) (byte) -1);
        double double15 = openMapRealVector14.getSparcity();
        boolean boolean16 = openMapRealVector14.isInfinite();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector14.mapSinh();
        double double18 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.602104727201629d + "'", double18 == 6.602104727201629d);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapLog1pToSelf();
        boolean boolean42 = arrayRealVector39.isInfinite();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector45.add(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector39.ebeDivide(realVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector3, realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        int int21 = openMapRealVector19.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (-1));
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector33.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapSinhToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector2.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLog10();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapSignumToSelf();
        int int30 = openMapRealVector28.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapLogToSelf();
        double double58 = arrayRealVector54.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double63 = arrayRealVector54.getL1Distance(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector37, arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector37.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.4711276743037347d + "'", double58 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8.528872325696266d + "'", double63 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapTanhToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector19.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapSqrtToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector35.add(arrayRealVector43);
        double[] doubleArray46 = arrayRealVector45.getDataRef();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapDivide((double) (short) -1);
        double[] doubleArray51 = arrayRealVector45.getDataRef();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector19.add(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector55.mapPow((double) 0);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector55.append((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector62.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector70.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector70.mapAcosToSelf();
        double[] doubleArray74 = arrayRealVector70.getDataRef();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector62.ebeDivide(doubleArray74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, doubleArray74);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector(100, doubleArray74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN]");
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN]");
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[NaN]");
        org.junit.Assert.assertNotNull(realVector75);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector2.mapAdd((double) 'a');
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector20.mapSinh();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector20.mapLog();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapAbsToSelf();
        double double65 = arrayRealVector50.getL1Distance(arrayRealVector54);
        double double66 = arrayRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapSqrt();
        double[] doubleArray77 = arrayRealVector69.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray77);
        double double79 = openMapRealVector2.getDistance(doubleArray77);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAbsToSelf();
        java.lang.Double[] doubleArray86 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector87.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector83.subtract(realVector88);
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector83.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector83);
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector91.mapLog1pToSelf();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) (short) 1, (org.apache.commons.math.linear.RealVector) arrayRealVector91);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 8.881784197001252E-16d + "'", double66 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.839071529076453d + "'", double79 == 10.839071529076453d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector92);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapSubtractToSelf((double) '4');
        double double23 = arrayRealVector20.getNorm();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector20.append(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapDivide(1.0E-12d);
        double double50 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapLog10();
        // The following exception was thrown during execution in test generation
        try {
            double double52 = arrayRealVector12.getDistance(arrayRealVector47);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 42.0d + "'", double23 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 59.39696961966999d + "'", double50 == 59.39696961966999d);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        arrayRealVector17.unitize();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector17.outerProduct(realVector27);
        double double30 = arrayRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.subtract(realVector38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41, true);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapCeilToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix45 = arrayRealVector14.outerProduct(realVector44);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13.35414242816297d + "'", double30 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realMatrix45);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1, (int) (byte) 1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        int int15 = openMapRealVector12.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector12.unitVector();
        double[] doubleArray20 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, true);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector17.append(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector2.ebeDivide(doubleArray38);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(openMapRealVector43);
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapLog();
        boolean boolean54 = arrayRealVector12.equals((java.lang.Object) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapCosh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        boolean boolean36 = arrayRealVector25.isInfinite();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector25.map(univariateRealFunction37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapInvToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector29.mapAdd((double) 1);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector29.add(openMapRealVector34);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSqrtToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double64 = arrayRealVector60.dotProduct(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector55.add(arrayRealVector63);
        double[] doubleArray66 = arrayRealVector65.getDataRef();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector65.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector65.mapDivide((double) (short) -1);
        double[] doubleArray71 = arrayRealVector65.getDataRef();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector39.add(doubleArray71);
        org.apache.commons.math.linear.RealMatrix realMatrix73 = openMapRealVector29.outerProduct(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            double double74 = arrayRealVector25.getL1Distance(doubleArray71);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        java.lang.String str35 = arrayRealVector30.toString();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.mapLog1pToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapCeil();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector39.mapSin();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector39.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector39.mapMultiplyToSelf(1.6853169696133175d);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector39.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector30.ebeMultiply(realVector58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector30.mapRintToSelf();
        boolean boolean61 = arrayRealVector30.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-42}" + "'", str35, "{-42}");
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector15, arrayRealVector32);
        double[] doubleArray40 = arrayRealVector32.getDataRef();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector32.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, 0, 8.881784197001252E-16d);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapSinToSelf();
        boolean boolean17 = arrayRealVector12.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapAddToSelf(2.3978952727983707d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapInvToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        openMapRealVector27.set(10.0d);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        int int42 = openMapRealVector39.getDimension();
        double double43 = openMapRealVector39.getSparcity();
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector39.mapUlpToSelf();
        double double45 = openMapRealVector27.getDistance(openMapRealVector39);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapCbrt();
        double double52 = openMapRealVector39.getDistance(realVector51);
        double[] doubleArray55 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, true);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray55);
        double[] doubleArray59 = new double[] {};
        double[] doubleArray61 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, doubleArray61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, arrayRealVector63);
        // The following exception was thrown during execution in test generation
        try {
            double double66 = arrayRealVector16.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector63);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.6329299089739802d + "'", double52 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
        org.junit.Assert.assertNotNull(realVector64);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector33.mapAdd(1.6329299089739802d);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector33.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanhToSelf();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray19 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, doubleArray17);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapDivideToSelf((double) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, (int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        arrayRealVector12.set((double) (-1));
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapCos();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapExpm1();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        double[] doubleArray36 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = openMapRealVector34.outerProduct(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector15.add(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector6.ebeDivide(realVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector39.append(59.39696961966999d);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapExpToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        double double53 = arrayRealVector49.dotProduct(arrayRealVector52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector44.add(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapCbrt();
        double double57 = arrayRealVector54.getNorm();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector54.mapLog10ToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAbsToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector61.subtract(realVector66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector61.mapCeilToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector71.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector71.mapPow((double) 0);
        double double76 = arrayRealVector61.getLInfDistance(arrayRealVector71);
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector79.mapAbsToSelf();
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector79.subtract(realVector84);
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector79.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector79);
        java.lang.Double[] doubleArray89 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray89);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray89);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = arrayRealVector79.ebeDivide(arrayRealVector91);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector92.mapTanh();
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector61.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector92);
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector54.ebeDivide(realVector94);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector96 = openMapRealVector41.projection(realVector94);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 14.35414242816297d + "'", double57 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 5.64585757183703d + "'", double76 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(arrayRealVector92);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(realVector95);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCos();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.subtract(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector8.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (double) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector10.mapSinh();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector10.mapCeil();
        boolean boolean25 = openMapRealVector7.equals((java.lang.Object) arrayRealVector10);
        double double26 = openMapRealVector2.getL1Distance(openMapRealVector7);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        double double38 = arrayRealVector29.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector36.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 8.528872325696266d + "'", double38 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 4.122307273313197E-9d, (-0.058447528486587526d), 21983.465794806718d, 0.3141504231237282d, 2.000000000001193d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector2.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector2.mapMultiplyToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector2.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector5.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        double[] doubleArray12 = arrayRealVector8.getDataRef();
        double double13 = openMapRealVector5.getDistance(doubleArray12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12, (-6.853169696133174d));
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double13));
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapTan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector6);
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapMultiply((double) 100L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapLog10ToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        double double50 = arrayRealVector41.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector32.add(arrayRealVector48);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector56.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector56.mapRintToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector64.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector56.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53, arrayRealVector56);
        double double68 = arrayRealVector67.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.528872325696266d + "'", double50 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector6.mapToSelf(univariateRealFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector6);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapLog10ToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        double double50 = arrayRealVector41.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector32.add(arrayRealVector48);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector57.mapPow((double) 0);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector57.append((org.apache.commons.math.linear.RealVector) arrayRealVector64);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector48.set((int) 'a', arrayRealVector57);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.528872325696266d + "'", double50 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        double double69 = arrayRealVector29.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector29.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 84.0d + "'", double69 == 84.0d);
        org.junit.Assert.assertNotNull(realVector70);
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, (int) (short) -1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapRintToSelf();
        openMapRealVector5.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector8.unitVector();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        openMapRealVector12.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector16.add(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAddToSelf((double) 100L);
        double[] doubleArray25 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix26 = openMapRealVector23.outerProduct(doubleArray25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector9.append(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            double double30 = openMapRealVector2.getDistance(doubleArray25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix26);
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCosh();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector2.mapUlpToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor11 = arrayRealVector2.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(entryItor11);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector10.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector2.mapExp();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector30.ebeDivide(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector19.subtract(arrayRealVector42);
        double[] doubleArray45 = arrayRealVector44.getData();
        boolean boolean46 = arrayRealVector44.isInfinite();
        boolean boolean47 = arrayRealVector14.equals((java.lang.Object) boolean46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector14.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector17.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAddToSelf(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double26 = openMapRealVector25.getSparcity();
        boolean boolean27 = openMapRealVector25.isInfinite();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector22.add(openMapRealVector25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertTrue(Double.isNaN(double26));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, 99.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector69.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(openMapRealVector70);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapFloorToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector27.ebeDivide(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector16.subtract(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapPowToSelf(10.839071529076453d);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector9.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector9.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        double[] doubleArray17 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, true);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAddToSelf((double) 100L);
        double[] doubleArray35 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = openMapRealVector33.outerProduct(doubleArray35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector14.append(doubleArray35);
        double double41 = openMapRealVector40.getSparcity();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector44.projection((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector40.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector57);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 1.0d + "'", double41 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapCoshToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = arrayRealVector21.sparseIterator();
        double double24 = arrayRealVector21.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapPowToSelf((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector13.mapInv();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        double double38 = arrayRealVector28.dotProduct(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector28.mapRintToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector43.mapPow((double) 0);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector43.append((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapUlpToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        double double60 = arrayRealVector56.getL1Norm();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double65 = arrayRealVector56.getL1Distance(arrayRealVector64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAbsToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector68.subtract(realVector73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector68.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector68.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector68.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(realVector78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapSubtractToSelf((double) '4');
        double double85 = arrayRealVector82.getNorm();
        double double86 = arrayRealVector79.getL1Distance(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = arrayRealVector56.add(arrayRealVector82);
        java.lang.Double[] doubleArray89 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector90.mapAtanToSelf();
        double double92 = arrayRealVector82.dotProduct(realVector91);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector82.mapUlpToSelf();
        double[] doubleArray94 = arrayRealVector82.toArray();
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector50.append(doubleArray94);
        double double96 = arrayRealVector28.getLInfDistance(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-61.787362320756856d) + "'", double38 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.4711276743037347d + "'", double60 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8.528872325696266d + "'", double65 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 42.0d + "'", double85 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(arrayRealVector87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + (-61.787362320756856d) + "'", double92 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[7.105427357601002E-15]");
        org.junit.Assert.assertNotNull(realVector95);
        org.junit.Assert.assertTrue("'" + double96 + "' != '" + 7.105427357601002E-15d + "'", double96 == 7.105427357601002E-15d);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector10.copy();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector17.append(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector17.mapTanhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector13.setSubVector((int) (byte) -1, realVector33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(0, (double) 0.0f);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector52.subtract(realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector52.mapSqrt();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAbsToSelf();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector62.subtract(realVector67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector62.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector62.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector62.mapPowToSelf((double) 10.0f);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector52.append(realVector73);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.set((int) 'a', arrayRealVector52);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapCosToSelf();
        double[] doubleArray7 = arrayRealVector2.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[NaN]");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ', (int) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor6 = openMapRealVector5.sparseIterator();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor7 = openMapRealVector5.iterator();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = openMapRealVector2.dotProduct(openMapRealVector5);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(entryItor6);
        org.junit.Assert.assertNotNull(entryItor7);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector25.mapInv();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector25.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector25.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapMultiplyToSelf((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector13.append(43.47112767430374d);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapPowToSelf(1.0E-12d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapCos();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapExpm1();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        double[] doubleArray36 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = openMapRealVector34.outerProduct(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector15.add(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector6.ebeDivide(realVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector39.append(59.39696961966999d);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector39.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAcosToSelf();
        double[] doubleArray27 = arrayRealVector23.getDataRef();
        double double28 = openMapRealVector9.dotProduct(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        double double22 = arrayRealVector2.getEntry((int) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector2.append((double) 100L);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector2.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector9.append(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector14.append(0.2296663502626633d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapSubtractToSelf(14.354142428153194d);
        arrayRealVector2.set(1713659.1765230843d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapLog1pToSelf();
        boolean boolean42 = arrayRealVector39.isInfinite();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector45.add(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector39.ebeDivide(realVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector3, realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector3.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector28.mapSinh();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector28.mapCeil();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector28.mapSin();
        arrayRealVector28.unitize();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector28.mapSqrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double46 = arrayRealVector25.getLInfDistance(arrayRealVector28);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        double double16 = openMapRealVector13.getSparcity();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector9.getSubVector((int) '4', (int) (short) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        boolean boolean14 = openMapRealVector13.isInfinite();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector13.mapPowToSelf(4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        double double22 = openMapRealVector2.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector2.mapPowToSelf(13.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAddToSelf((double) 100L);
        double[] doubleArray20 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = openMapRealVector18.outerProduct(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        openMapRealVector24.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector31.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.add(openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAddToSelf((double) 100L);
        double[] doubleArray37 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = openMapRealVector35.outerProduct(doubleArray37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector18.append(doubleArray37);
        double[] doubleArray42 = openMapRealVector18.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector18.append(59.39696961966999d);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) (byte) -1, (org.apache.commons.math.linear.RealVector) openMapRealVector18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[101.0]");
        org.junit.Assert.assertNotNull(openMapRealVector44);
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        double double5 = openMapRealVector2.getSparcity();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector18.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapTanhToSelf();
        double double25 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector23.add(arrayRealVector38);
        arrayRealVector41.set((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.6853169696133175d + "'", double25 == 1.6853169696133175d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(arrayRealVector41);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapRint();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapSubtractToSelf((double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector12.mapSqrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        double double15 = openMapRealVector14.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 6.0d + "'", double15 == 6.0d);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapCos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) -1, 14.355979641962135d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.append(openMapRealVector23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector19.mapLog();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (byte) 10, 2.3978952727983707d);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector3.mapAtan();
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector13.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(entryItor15);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.lang.Double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, (int) (short) -1, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector2.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector2.mapMultiplyToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector70);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector72 = arrayRealVector70.copy();
        double[] doubleArray73 = arrayRealVector70.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix74 = arrayRealVector2.outerProduct(doubleArray73);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(abstractRealVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[]");
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector7.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector7.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector7.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(realVector17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtractToSelf((double) '4');
        double double24 = arrayRealVector21.getNorm();
        double double25 = arrayRealVector18.getL1Distance(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        double double27 = openMapRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        // The following exception was thrown during execution in test generation
        try {
            double double33 = openMapRealVector2.getL1Distance(doubleArray30);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 42.0d + "'", double24 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector14.mapAdd((double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertNotNull(openMapRealVector37);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double double34 = arrayRealVector28.getL1Norm();
        double[] doubleArray35 = arrayRealVector28.toArray();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector28.mapRint();
        double double37 = arrayRealVector28.getNorm();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector40.mapPow((double) 0);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.append((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector47.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapAcosToSelf();
        double[] doubleArray59 = arrayRealVector55.getDataRef();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector47.ebeDivide(doubleArray59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapInv();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN]");
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector62);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector36.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector2.subtract(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector36.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 42.0d + "'", double39 == 42.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        double double22 = arrayRealVector2.getEntry((int) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector2.append((double) 100L);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector2.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 10.0d + "'", double22 == 10.0d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector57.mapPow(14.35414242816297d);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector57.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        double double15 = openMapRealVector13.getSparcity();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.0d + "'", double15 == 1.0d);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector57.mapPow(14.35414242816297d);
        int int71 = arrayRealVector57.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector15, arrayRealVector32);
        double[] doubleArray40 = arrayRealVector32.getDataRef();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapLog1pToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector61.mapPow((double) 0);
        double double66 = arrayRealVector51.getLInfDistance(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector69);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector69.ebeDivide(arrayRealVector81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector82.mapTanh();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector51.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        double double85 = arrayRealVector46.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector51);
        boolean boolean86 = arrayRealVector32.equals((java.lang.Object) arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 5.64585757183703d + "'", double66 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 7.602104727201629d + "'", double85 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapDivideToSelf(14.355979641962135d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapTan();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector28.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapTanhToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector34 = arrayRealVector28.copy();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector2.add((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        double double50 = openMapRealVector38.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector38.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector38.mapDivideToSelf(14.355979641962135d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(1, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapSignumToSelf();
        double double58 = openMapRealVector38.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector56);
        boolean boolean59 = openMapRealVector2.equals((java.lang.Object) double58);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(abstractRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 0.0d + "'", double50 == 0.0d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + (-0.058447528486587526d) + "'", double58 == (-0.058447528486587526d));
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(entryItor35);
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        int int38 = openMapRealVector36.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(1, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapSignumToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapSqrt();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        double double18 = arrayRealVector16.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector6.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapLogToSelf();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector33.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.mapFloor();
        double double40 = arrayRealVector16.getLInfDistance(arrayRealVector33);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector41 = arrayRealVector33.copy();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector33.mapUlp();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 4.122307273313197E-9d + "'", double40 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(abstractRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapAcos();
        // The following exception was thrown during execution in test generation
        try {
            double double20 = openMapRealVector11.getLInfDistance(realVector19);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapAddToSelf((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapTanToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(realVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        double double38 = arrayRealVector31.getL1Distance(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapSignumToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12, arrayRealVector34);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.1102230246251565E-16]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLog10ToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapPow((double) 0);
        double double34 = arrayRealVector19.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector19.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector12.ebeDivide(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.64585757183703d + "'", double34 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        double double54 = arrayRealVector2.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(2, 1.6853169696133175d);
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31, true);
        double[] doubleArray34 = arrayRealVector31.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector13.mapMultiply((-1.0d));
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        int int61 = openMapRealVector58.getDimension();
        double double62 = openMapRealVector58.getSparcity();
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector58.mapUlpToSelf();
        double double64 = openMapRealVector46.getDistance(openMapRealVector58);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector67.mapCbrt();
        double double71 = openMapRealVector58.getDistance(realVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector13.append(openMapRealVector58);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 1.0d + "'", double62 == 1.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 1.6329299089739802d + "'", double71 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(openMapRealVector72);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double double34 = arrayRealVector28.getL1Norm();
        double[] doubleArray35 = arrayRealVector28.toArray();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector28.mapRint();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector39.mapAdd((double) 1);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector44.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector39.add(openMapRealVector44);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector49.add(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector49.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector49.mapSqrtToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        double double74 = arrayRealVector70.dotProduct(arrayRealVector73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector65.add(arrayRealVector73);
        double[] doubleArray76 = arrayRealVector75.getDataRef();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector75.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector75.mapDivide((double) (short) -1);
        double[] doubleArray81 = arrayRealVector75.getDataRef();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector49.add(doubleArray81);
        org.apache.commons.math.linear.RealMatrix realMatrix83 = openMapRealVector39.outerProduct(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector28.add(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[NaN]");
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[NaN]");
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realMatrix83);
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        double double15 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapMultiply((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.881784197001252E-16d + "'", double15 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        double double15 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.881784197001252E-16d + "'", double15 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, 1.6853169696133175d);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapTanhToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapCbrt();
        boolean boolean23 = arrayRealVector13.equals((java.lang.Object) arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector13.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realMatrix25);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapLog1pToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        double[] doubleArray52 = arrayRealVector51.toArray();
        double double53 = arrayRealVector35.getLInfDistance(doubleArray52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector24.append(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapAdd(84.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor57 = arrayRealVector54.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(entryItor57);
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf((double) (-1.0f));
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (-1), (double) 1);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (short) 100, (int) (byte) -1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double double6 = openMapRealVector5.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        double double15 = arrayRealVector13.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAtan();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        double double21 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapAtan();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector25.subtract(realVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector25.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector25.mapAsinToSelf();
        double double35 = arrayRealVector19.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13, (org.apache.commons.math.linear.RealVector) arrayRealVector25);
        double[] doubleArray37 = arrayRealVector25.toArray();
        double double38 = arrayRealVector9.getDistance(doubleArray37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector5.append(doubleArray37);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector42.mapLogToSelf();
        double double46 = arrayRealVector42.getL1Norm();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double51 = arrayRealVector42.getL1Distance(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapTan();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapExpToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) arrayRealVector50);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.4711276743037347d + "'", double46 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 8.528872325696266d + "'", double51 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.add(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.projection((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector69.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60, (org.apache.commons.math.linear.RealVector) arrayRealVector69);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector60.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector60.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector60.mapAddToSelf((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector85);
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector1.mapAtanToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        double double9 = arrayRealVector7.getNorm();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapAtan();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapAsinToSelf();
        double double23 = arrayRealVector7.getLInfDistance(arrayRealVector13);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector26.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector13.ebeMultiply(arrayRealVector26);
        boolean boolean37 = arrayRealVector1.equals((java.lang.Object) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapCosh();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector13.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.add(arrayRealVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector41.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector49.add(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapTanhToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector63.mapCbrt();
        boolean boolean67 = arrayRealVector57.equals((java.lang.Object) arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(realVector46, arrayRealVector63);
        double[] doubleArray71 = arrayRealVector63.getDataRef();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector30.append(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector72);
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        double[] doubleArray41 = new double[] { (short) 1, (-61.787362320756856d), (byte) 0, 1.4711276743037347d };
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector18.setSubVector(100, doubleArray41);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[1.0, -61.787362320756856, 0.0, 1.4711276743037347]");
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.String str34 = arrayRealVector28.toString();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector28.mapAddToSelf(52.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-42}" + "'", str34, "{-42}");
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector33.mapSubtract((double) 1L);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapMultiplyToSelf(Double.NaN);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector25.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector25.mapSubtractToSelf((double) 0L);
        double[] doubleArray39 = null;
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector25.setSubVector((int) (byte) 10, doubleArray39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapSqrt();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        double double26 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector14.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector24.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapTanhToSelf();
        double double31 = arrayRealVector2.dotProduct(arrayRealVector29);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapLogToSelf();
        double double38 = arrayRealVector34.getL1Norm();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double43 = arrayRealVector34.getL1Distance(arrayRealVector42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector46.subtract(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector46.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector46.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(realVector56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapSubtractToSelf((double) '4');
        double double63 = arrayRealVector60.getNorm();
        double double64 = arrayRealVector57.getL1Distance(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector34.add(arrayRealVector60);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapSubtractToSelf((double) '4');
        double double71 = arrayRealVector68.getNorm();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector68.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector68.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector34.subtract(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector68.mapCbrtToSelf();
        boolean boolean76 = arrayRealVector29.equals((java.lang.Object) realVector75);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.6433183218042784d) + "'", double31 == (-1.6433183218042784d));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.4711276743037347d + "'", double38 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 8.528872325696266d + "'", double43 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 42.0d + "'", double63 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 42.0d + "'", double71 == 42.0d);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector38.mapPow((double) 0);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.append((org.apache.commons.math.linear.RealVector) arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapAcosToSelf();
        double[] doubleArray57 = arrayRealVector53.getDataRef();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector45.ebeDivide(doubleArray57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, doubleArray57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, 2, (int) ' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[NaN]");
        org.junit.Assert.assertNotNull(realVector58);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        double[] doubleArray13 = arrayRealVector2.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector9.getSubVector((int) (byte) 0, (int) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 51 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        double[] doubleArray37 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector13.append(59.39696961966999d);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[101.0]");
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapLog1pToSelf();
        boolean boolean5 = arrayRealVector2.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapCeil();
        java.lang.Class<?> wildcardClass18 = openMapRealVector13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(wildcardClass18);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (-32.0d));
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        double double9 = arrayRealVector5.dotProduct(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapLog1pToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector13.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(realVector23);
        double[] doubleArray25 = arrayRealVector24.toArray();
        double double26 = arrayRealVector8.getLInfDistance(doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector2.subtract(doubleArray25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double26));
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        double[] doubleArray12 = arrayRealVector2.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapSubtractToSelf((double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-10.54402111088937]");
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        double double16 = arrayRealVector12.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[0.999999999999319]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 6.0d + "'", double16 == 6.0d);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector15, arrayRealVector32);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double50 = arrayRealVector46.dotProduct(arrayRealVector49);
        double double51 = arrayRealVector42.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector49);
        double double54 = arrayRealVector32.getLInfDistance(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapPow((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 8.528872325696266d + "'", double51 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 5.64585757183703d + "'", double54 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 99.0d, 1.4711276743037338d, 0.3141504231237282d, (-1.6433183218042784d), 59.39696961966999d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, doubleArray9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapSubtract(10.0d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        double double17 = arrayRealVector15.getNorm();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAtan();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        double double23 = arrayRealVector21.getNorm();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapAtan();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector27.mapAsinToSelf();
        double double37 = arrayRealVector21.getLInfDistance(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15, (org.apache.commons.math.linear.RealVector) arrayRealVector27);
        double[] doubleArray39 = arrayRealVector27.toArray();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.add(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapLog1pToSelf();
        boolean boolean49 = arrayRealVector46.isInfinite();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector46.ebeDivide(realVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapCeilToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double67 = arrayRealVector6.getL1Distance(realVector66);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector66);
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.add(arrayRealVector29);
        double double31 = arrayRealVector30.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapCos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 11.0d + "'", double31 == 11.0d);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapFloorToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double54 = arrayRealVector51.getLInfDistance(arrayRealVector53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        double[] doubleArray7 = openMapRealVector6.toArray();
        openMapRealVector6.set((double) (short) 0);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.mapAcos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[1.4711276743037347]");
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        boolean boolean36 = arrayRealVector25.isInfinite();
        double[] doubleArray37 = arrayRealVector25.getData();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, true);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[1.4711276743037347]");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.add(openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAddToSelf((double) 100L);
        double[] doubleArray22 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = openMapRealVector20.outerProduct(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector6.append(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapAcos();
        double[] doubleArray28 = new double[] {};
        double[] doubleArray30 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28, doubleArray30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30, (double) 10);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        double double41 = arrayRealVector36.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector33.add((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapLog1pToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector53.subtract(realVector58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector53.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector53.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector53.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(realVector63);
        double[] doubleArray65 = arrayRealVector64.toArray();
        double double66 = arrayRealVector48.getLInfDistance(doubleArray65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector33.ebeDivide(doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix68 = openMapRealVector26.outerProduct(doubleArray65);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 6.0d + "'", double41 == 6.0d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(openMapRealVector67);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector22.mapUlpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapExpToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.add(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = arrayRealVector22.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector52.mapCos();
        boolean boolean57 = arrayRealVector46.equals((java.lang.Object) arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector52.mapLog10ToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        double double69 = arrayRealVector65.dotProduct(arrayRealVector68);
        double double70 = arrayRealVector61.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = arrayRealVector52.add(arrayRealVector68);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector76.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector76.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector76.mapRintToSelf();
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector84.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector76.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector73, arrayRealVector76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector18.append((org.apache.commons.math.linear.RealVector) arrayRealVector87);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{14.35}" + "'", str13, "{14.35}");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 8.528872325696266d + "'", double70 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(arrayRealVector73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(openMapRealVector88);
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSqrt();
        double[] doubleArray24 = arrayRealVector16.toArray();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector2.subtract(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        int int26 = openMapRealVector23.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.unitVector();
        double double29 = openMapRealVector2.getL1Distance(openMapRealVector23);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setEntry((int) (short) -1, (double) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapSignumToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapPow((double) 0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = arrayRealVector29.iterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector2.ebeDivide(arrayRealVector29);
        arrayRealVector29.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(arrayRealVector35);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        openMapRealVector8.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector8.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector12.add(openMapRealVector15);
        int int18 = openMapRealVector15.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.copy();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapCos();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector23.mapExpm1();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAddToSelf((double) 100L);
        double[] doubleArray44 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = openMapRealVector42.outerProduct(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector23.add(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = openMapRealVector19.outerProduct(doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector5.ebeMultiply(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(openMapRealVector48);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector18.mapTanhToSelf();
        double double21 = openMapRealVector18.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector10.mapAdd(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 6.0d + "'", double21 == 6.0d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        openMapRealVector19.unitize();
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector19.mapTan();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector12.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector19.getSubVector(2, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 2 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapSubtract(6.0d);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector17.append(realVector31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector35.mapAtanToSelf();
        double[] doubleArray46 = arrayRealVector35.getDataRef();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector17.add(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector9.append(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN]");
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 99.0d, 1.4711276743037338d, 0.3141504231237282d, (-1.6433183218042784d), 59.39696961966999d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapSignum();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor5 = openMapRealVector4.sparseIterator();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapLogToSelf();
        double double12 = arrayRealVector8.getL1Norm();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double17 = arrayRealVector8.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapTan();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAsin();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector4.ebeMultiply(realVector21);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(entryItor5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.4711276743037347d + "'", double12 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 8.528872325696266d + "'", double17 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector22);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(0, 434.7112767430374d);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtan();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        double double60 = arrayRealVector56.getL1Norm();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double65 = arrayRealVector56.getL1Distance(arrayRealVector64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAbsToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector68.subtract(realVector73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector68.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector68.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector68.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(realVector78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapSubtractToSelf((double) '4');
        double double85 = arrayRealVector82.getNorm();
        double double86 = arrayRealVector79.getL1Distance(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = arrayRealVector56.add(arrayRealVector82);
        double double88 = arrayRealVector82.getL1Norm();
        double[] doubleArray89 = arrayRealVector82.toArray();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector82.mapRint();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector41.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        arrayRealVector41.set(11.0d);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector41.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.4711276743037347d + "'", double60 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8.528872325696266d + "'", double65 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 42.0d + "'", double85 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(arrayRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 42.0d + "'", double88 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapLog();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapInv();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        int int26 = openMapRealVector23.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.copy();
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector40.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector27.subtract(openMapRealVector40);
        boolean boolean43 = openMapRealVector40.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector40.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector40.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector40.mapAdd((double) (-1));
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector13.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector40);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(openMapRealVector48);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector19.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100, (int) (short) -1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapLog();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        // The following exception was thrown during execution in test generation
        try {
            double double8 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector7);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        double double6 = arrayRealVector2.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.0d + "'", double6 == 6.0d);
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        double double45 = arrayRealVector5.getL1Norm();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        double double56 = arrayRealVector52.dotProduct(arrayRealVector55);
        double double57 = arrayRealVector48.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapCbrt();
        double double61 = arrayRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        arrayRealVector5.set((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector5.mapAdd((double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.3978952727983707d + "'", double45 == 2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 8.528872325696266d + "'", double57 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 23.978952727983707d + "'", double61 == 23.978952727983707d);
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        double[] doubleArray17 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, true);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAddToSelf((double) 100L);
        double[] doubleArray35 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = openMapRealVector33.outerProduct(doubleArray35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector14.append(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector14.mapRint();
        openMapRealVector14.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        double[] doubleArray2 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, true);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector4.unitVector();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapLogToSelf();
        double double12 = arrayRealVector8.getL1Norm();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double17 = arrayRealVector8.getL1Distance(arrayRealVector16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(realVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        double double38 = arrayRealVector31.getL1Distance(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector8.add(arrayRealVector34);
        double double40 = arrayRealVector34.getL1Norm();
        double[] doubleArray41 = arrayRealVector34.toArray();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapAcosToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector34);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.4711276743037347d + "'", double12 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 8.528872325696266d + "'", double17 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 42.0d + "'", double40 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (byte) 10, 2.3978952727983707d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix58 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector57);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapSubtractToSelf((double) 0L);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        double double20 = arrayRealVector17.getL1Norm();
        double double21 = arrayRealVector10.getLInfDistance(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapTan();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.mapAsinToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector27.add(arrayRealVector35);
        double[] doubleArray38 = arrayRealVector37.getDataRef();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector37.mapDivide((double) (short) -1);
        double[] doubleArray43 = arrayRealVector37.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector17.setSubVector(100, doubleArray43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 42.0d + "'", double20 == 42.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', (double) 10.0f);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        double double10 = openMapRealVector9.getSparcity();
        boolean boolean11 = openMapRealVector9.isInfinite();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAddToSelf((double) 100L);
        double[] doubleArray27 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = openMapRealVector25.outerProduct(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAddToSelf((double) 100L);
        double[] doubleArray44 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = openMapRealVector42.outerProduct(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector25.append(doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector9.append(doubleArray44);
        double[] doubleArray50 = openMapRealVector49.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector2.subtract(doubleArray50);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[9.0, NaN]");
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector14.mapLog10ToSelf();
        double[] doubleArray36 = openMapRealVector14.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-Infinity]");
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, false);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapPow((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCoshToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.mapAdd(2.302585092994046d);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapLog1pToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        double[] doubleArray52 = arrayRealVector51.toArray();
        double double53 = arrayRealVector35.getLInfDistance(doubleArray52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector24.append(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector35.append(10912.39457234693d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 9.0d);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapInv();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapTanhToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapCbrt();
        boolean boolean28 = arrayRealVector18.equals((java.lang.Object) arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector24.mapLog1p();
        int int30 = arrayRealVector24.getDimension();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapAtanToSelf();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector5.setSubVector((int) (short) 100, realVector31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        org.apache.commons.math.linear.RealVector realVector2 = openMapRealVector1.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(realVector2);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapAbs();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapCbrt();
        double[] doubleArray5 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, true);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = arrayRealVector1.append(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapTanToSelf();
        org.junit.Assert.assertNotNull(realVector2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(arrayRealVector9);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.mapSubtractToSelf(14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector5.ebeDivide(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector5.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector5.mapSubtract(0.3141504231237282d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        java.lang.Class<?> wildcardClass14 = realVector13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(Double.NaN);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector36.sparseIterator();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapSubtractToSelf((double) '4');
        double double44 = arrayRealVector41.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector36.append((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector36.mapAdd((double) (short) -1);
        int int48 = openMapRealVector36.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector1.projection((org.apache.commons.math.linear.RealVector) openMapRealVector36);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 42.0d + "'", double44 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector7 = arrayRealVector5.copy();
        double[] doubleArray8 = arrayRealVector5.toArray();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAbsToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector11.subtract(realVector16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector11.mapCeilToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector11.projection(realVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector11.mapSubtractToSelf((double) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector11);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(abstractRealVector7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector0 = null;
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector3.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapExpToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = arrayRealVector3.add(arrayRealVector11);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13, arrayRealVector16);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector0, (org.apache.commons.math.linear.RealVector) arrayRealVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.mapAdd((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        double[] doubleArray28 = arrayRealVector27.getData();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(entryItor4);
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = arrayRealVector6.add(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector6.mapUlpToSelf();
        double[] doubleArray18 = arrayRealVector6.toArray();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector6.mapCosToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapCeilToSelf();
        double[] doubleArray30 = new double[] {};
        double[] doubleArray32 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtract(10.0d);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        double double40 = arrayRealVector38.getNorm();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapAtan();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        double double46 = arrayRealVector44.getNorm();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapAtan();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector50.mapAsinToSelf();
        double double60 = arrayRealVector44.getLInfDistance(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38, (org.apache.commons.math.linear.RealVector) arrayRealVector50);
        double[] doubleArray62 = arrayRealVector50.toArray();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector33.add(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector22.subtract(doubleArray62);
        double double65 = arrayRealVector6.dotProduct(doubleArray62);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector2.ebeDivide(doubleArray62);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[100.0]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN]");
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTan();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapSin();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapPow((double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapExp();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector29.append((double) (byte) 0);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray54);
        openMapRealVector55.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector55.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector62.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector59.add(openMapRealVector62);
        int int65 = openMapRealVector62.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector62.copy();
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector66.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector66.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector66.mapAdd((-32.0d));
        // The following exception was thrown during execution in test generation
        try {
            double double71 = openMapRealVector52.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector66);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.6329299089739802d + "'", double42 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(openMapRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(openMapRealVector64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1 + "'", int65 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(openMapRealVector70);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double double13 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSinToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapPow((double) 0);
        double double36 = arrayRealVector21.getLInfDistance(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector21.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(realVector18, arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector2.add(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector2.mapCosToSelf();
        double[] doubleArray41 = arrayRealVector2.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6.0d + "'", double13 == 6.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5.64585757183703d + "'", double36 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[-0.35063264636247227]");
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double[] doubleArray6 = openMapRealVector5.getData();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        double[] doubleArray2 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, true);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector7.mapCos();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector7.mapExpm1();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAddToSelf((double) 100L);
        double[] doubleArray28 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = openMapRealVector26.outerProduct(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector7.add(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector4, doubleArray28);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector4.mapCeil();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector4.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector17.append((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double[] doubleArray28 = arrayRealVector23.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-0.5063656411097588]");
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 14.355979641962135d, 1.4711276743037347d, 14.35414242816297d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector4.mapExp();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        double double11 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector8.mapDivide((double) (byte) -1);
        double[] doubleArray14 = arrayRealVector8.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector4.add(doubleArray14);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 42.0d + "'", double11 == 42.0d);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-42.0]");
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        double double15 = arrayRealVector9.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 5.259548471626528E-84d + "'", double15 == 5.259548471626528E-84d);
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector2.unitVector();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        double double15 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.881784197001252E-16d + "'", double15 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector4.mapAbsToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector4.subtract(realVector9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector4.mapSqrt();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector4.add(arrayRealVector14);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapSubtractToSelf((double) '4');
        double double23 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.subtract(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapDivideToSelf((double) 100L);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapFloor();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector24.mapSubtractToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.mapTanhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double31 = openMapRealVector1.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector24);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 42.0d + "'", double23 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector17.append((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapCeil();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = arrayRealVector53.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector57);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapAddToSelf(1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapUlpToSelf();
        double double33 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector19.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        double double69 = arrayRealVector29.getL1Norm();
        double double70 = arrayRealVector29.getL1Norm();
        double double71 = arrayRealVector29.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 84.0d + "'", double69 == 84.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 84.0d + "'", double70 == 84.0d);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 59.39696961966999d + "'", double71 == 59.39696961966999d);
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapExp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double3 = openMapRealVector1.getEntry(0);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector6.mapTanh();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector6.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector6.mapTanhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector1.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector6);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapCoshToSelf();
        double[] doubleArray13 = openMapRealVector11.getData();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector11.mapLog10();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector11.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector11.mapExpm1ToSelf();
        double double17 = openMapRealVector11.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[11013.232920103324]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.718281828459045d + "'", double17 == 1.718281828459045d);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapLogToSelf();
        double double58 = arrayRealVector54.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double63 = arrayRealVector54.getL1Distance(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector37, arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector64.mapSubtract((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.4711276743037347d + "'", double58 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8.528872325696266d + "'", double63 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector66);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapAsin();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53, true);
        double[] doubleArray56 = arrayRealVector53.getDataRef();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector34.subtract(doubleArray56);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector61.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = openMapRealVector61.sparseIterator();
        double double64 = openMapRealVector61.getLInfNorm();
        double[] doubleArray65 = openMapRealVector61.getData();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector34.setSubVector((int) (short) -1, doubleArray65);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0]");
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(entryItor63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 6.0d + "'", double64 == 6.0d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[1.0]");
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.append(4.122307273313197E-9d);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapTanh();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.mapAdd(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        double double15 = arrayRealVector6.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector32.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector32.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(realVector42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        double double49 = arrayRealVector46.getNorm();
        double double50 = arrayRealVector43.getL1Distance(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector20.add(arrayRealVector46);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        double double56 = arrayRealVector46.dotProduct(realVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector13.add(arrayRealVector46);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapExpToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        double double69 = arrayRealVector65.dotProduct(arrayRealVector68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector60.add(arrayRealVector68);
        double[] doubleArray71 = arrayRealVector70.getDataRef();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector46.subtract(doubleArray71);
        double double73 = openMapRealVector2.getLInfDistance(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector75 = openMapRealVector2.mapPow(10912.39457234693d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.528872325696266d + "'", double15 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 42.0d + "'", double49 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-61.787362320756856d) + "'", double56 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 13.35414242816297d + "'", double73 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(realVector75);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        double[] doubleArray27 = arrayRealVector15.toArray();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.mapCosToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        double[] doubleArray39 = new double[] {};
        double[] doubleArray41 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39, doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtract(10.0d);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAtan();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        double double55 = arrayRealVector53.getNorm();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapAtan();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector59.subtract(realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector59.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector59.mapAsinToSelf();
        double double69 = arrayRealVector53.getLInfDistance(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47, (org.apache.commons.math.linear.RealVector) arrayRealVector59);
        double[] doubleArray71 = arrayRealVector59.toArray();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector42.add(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector31.subtract(doubleArray71);
        double double74 = arrayRealVector15.dotProduct(doubleArray71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(realVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector15.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector15.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector29.mapCoshToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector29.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector29.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 0, (double) 10);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 9.0d);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapMultiplyToSelf((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        openMapRealVector19.unitize();
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector19.mapTan();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = openMapRealVector19.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector12.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector19.projection((org.apache.commons.math.linear.RealVector) arrayRealVector30);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector2.mapTanToSelf();
        double double34 = arrayRealVector2.getL1Norm();
        double[] doubleArray35 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapSqrt();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector46.subtract(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapCeilToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector46.add(realVector59);
        double[] doubleArray61 = arrayRealVector46.getData();
        openMapRealVector41.setSubVector((int) (short) 0, doubleArray61);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector(1, doubleArray61);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.00000000000001d + "'", double34 == 10.00000000000001d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.00000000000001]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0]");
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, (int) (short) -1);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector2.mapRintToSelf();
        java.lang.Class<?> wildcardClass23 = arrayRealVector2.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(wildcardClass23);
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        int int54 = arrayRealVector42.getDimension();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector42.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector19.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        double[] doubleArray6 = arrayRealVector2.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, 10, 10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[NaN]");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) (byte) 1, 13.35414242816297d);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector6);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        double double16 = openMapRealVector13.getSparcity();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector13.mapPow((double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double3 = openMapRealVector1.getEntry(0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector1.append(1.749534445339284d);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector1.mapPow((double) (byte) -1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector1.copy();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(openMapRealVector8);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector61);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        boolean boolean2 = openMapRealVector1.isInfinite();
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAbsToSelf();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.subtract(realVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector5.mapSinToSelf();
        double[] doubleArray15 = arrayRealVector5.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector1.projection(doubleArray15);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-0.5440211108893698]");
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray14 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector2.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector2.mapMultiplyToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector2.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        double[] doubleArray8 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, true);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector13.mapCos();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector13.mapExpm1();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAddToSelf((double) 100L);
        double[] doubleArray34 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = openMapRealVector32.outerProduct(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector13.add(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector5.subtract(doubleArray34);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector41.mapAdd((double) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector38.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(openMapRealVector44);
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor5 = openMapRealVector4.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector4.mapSignum();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(entryItor5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector2.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapLog1pToSelf();
        boolean boolean42 = arrayRealVector39.isInfinite();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector45.add(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector39.ebeDivide(realVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector3, realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapCeilToSelf();
        java.lang.Class<?> wildcardClass60 = arrayRealVector58.getClass();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(wildcardClass60);
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTan();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapAsin();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector58.subtract(doubleArray83);
        double double85 = arrayRealVector10.dotProduct(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 23.92357071360495d + "'", double85 == 23.92357071360495d);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        openMapRealVector11.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector15.add(openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAddToSelf((double) 100L);
        double[] doubleArray24 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector22.outerProduct(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector22.append(doubleArray41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector6.append(doubleArray41);
        double[] doubleArray47 = openMapRealVector46.getData();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector46.mapLog1p();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[9.0, NaN]");
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapSqrt();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        double double27 = arrayRealVector25.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector15.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector25.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector25.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector25.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector25);
        boolean boolean35 = arrayRealVector11.equals((java.lang.Object) arrayRealVector34);
        arrayRealVector2.set((int) (byte) 0, arrayRealVector11);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector2.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double double14 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapInvToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector18.sparseIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector18);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 8.881784197001252E-16d + "'", double14 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(entryItor19);
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        double double33 = arrayRealVector24.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.ebeDivide(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector35.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector16.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.528872325696266d + "'", double33 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapFloorToSelf();
        java.lang.Class<?> wildcardClass14 = realVector13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapMultiplyToSelf(14.35414242816297d);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapMultiplyToSelf(2.000000000001193d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (double) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector10.mapSinh();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector10.mapCeil();
        boolean boolean25 = openMapRealVector7.equals((java.lang.Object) arrayRealVector10);
        double double26 = openMapRealVector2.getL1Distance(openMapRealVector7);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector7.setEntry((-1), 10.00000000000001d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapMultiplyToSelf((double) 10);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector22.mapAddToSelf(1.0d);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapDivideToSelf(1.0d);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapRintToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 59.39696961966999d + "'", double31 == 59.39696961966999d);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector38.mapUlpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = arrayRealVector38.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        java.lang.String str66 = arrayRealVector38.toString();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        double[] doubleArray80 = arrayRealVector79.getDataRef();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector38.subtract(doubleArray80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80, false);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector25.ebeDivide(doubleArray80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{0}" + "'", str66, "{0}");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        org.apache.commons.math.linear.RealVector realVector0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector(realVector0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) -1, 14.355979641962135d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.mapAddToSelf(6.602104727201629d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        arrayRealVector17.unitize();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector17.outerProduct(realVector27);
        double double30 = arrayRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector14.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector33);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13.35414242816297d + "'", double30 == 13.35414242816297d);
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapLog();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector24.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector12.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (-6.853169696133174d));
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector8.mapPow((double) 0);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.append((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector15.append(arrayRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector5.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector2.mapMultiplyToSelf(1.6329299089739802d);
        double[] doubleArray10 = openMapRealVector2.getData();
        double[] doubleArray11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix12 = openMapRealVector2.outerProduct(doubleArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[16.329299089739802]");
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapCeil();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapLogToSelf();
        double[] doubleArray11 = arrayRealVector5.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[0.874591382923689]");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double3 = openMapRealVector2.getSparcity();
        double double4 = openMapRealVector2.getSparcity();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector7.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector7.mapCeilToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector7);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue(Double.isNaN(double4));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.getSubVector((int) (short) 1, 0);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector2.mapAdd((double) 'a');
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector20.mapSinh();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector20.mapLog();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapAbsToSelf();
        double double65 = arrayRealVector50.getL1Distance(arrayRealVector54);
        double double66 = arrayRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapSqrt();
        double[] doubleArray77 = arrayRealVector69.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray77);
        double double79 = openMapRealVector2.getDistance(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector80 = openMapRealVector2.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 8.881784197001252E-16d + "'", double66 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 10.839071529076453d + "'", double79 == 10.839071529076453d);
        org.junit.Assert.assertNotNull(realVector80);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.mapInvToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapDivideToSelf((double) (byte) 0);
        int int54 = arrayRealVector49.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector32.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector9.add(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        arrayRealVector2.setEntry(0, 14.354142428153194d);
        double double21 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector2.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.354142428153194d + "'", double21 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector33.mapUlpToSelf();
        boolean boolean35 = openMapRealVector33.isNaN();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        double double60 = arrayRealVector56.getL1Norm();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double65 = arrayRealVector56.getL1Distance(arrayRealVector64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAbsToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector68.subtract(realVector73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector68.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector68.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector68.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(realVector78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapSubtractToSelf((double) '4');
        double double85 = arrayRealVector82.getNorm();
        double double86 = arrayRealVector79.getL1Distance(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = arrayRealVector56.add(arrayRealVector82);
        double double88 = arrayRealVector82.getL1Norm();
        double[] doubleArray89 = arrayRealVector82.toArray();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector82.mapRint();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector41.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector82.mapDivideToSelf(26.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.4711276743037347d + "'", double60 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8.528872325696266d + "'", double65 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 42.0d + "'", double85 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(arrayRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 42.0d + "'", double88 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector93);
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector7.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector7.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector7.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(realVector17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtractToSelf((double) '4');
        double double24 = arrayRealVector21.getNorm();
        double double25 = arrayRealVector18.getL1Distance(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        double double27 = openMapRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.mapAddToSelf(4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 42.0d + "'", double24 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertTrue(Double.isNaN(double27));
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapCosToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapSqrt();
        double[] doubleArray47 = arrayRealVector39.toArray();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector33.add(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector17.ebeMultiply(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        double[] doubleArray37 = openMapRealVector13.getData();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, (int) (byte) -1, 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[101.0]");
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCoshToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = arrayRealVector12.iterator();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector19.mapPow((double) 0);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.append((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector31.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector26.append(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector31.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector31.mapCeilToSelf();
        double double46 = arrayRealVector12.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        double double5 = openMapRealVector2.getSparcity();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector18.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapTanhToSelf();
        double double25 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector23.add(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector38.mapExpm1();
        double[] doubleArray43 = new double[] {};
        double[] doubleArray45 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43, doubleArray45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45, (double) 10);
        double double49 = arrayRealVector38.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector48);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector48.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.6853169696133175d + "'", double25 == 1.6853169696133175d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[100.0]");
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 85.64585757183703d + "'", double49 == 85.64585757183703d);
        org.junit.Assert.assertNotNull(realVector50);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector17.dotProduct(realVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(realVector24);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapSinhToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector30.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector30.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(realVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapSubtractToSelf((double) '4');
        double double47 = arrayRealVector44.getNorm();
        double double48 = arrayRealVector41.getL1Distance(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.mapPowToSelf(0.0d);
        double[] doubleArray51 = arrayRealVector44.getDataRef();
        double double52 = openMapRealVector26.getLInfDistance(doubleArray51);
        arrayRealVector10.setSubVector((int) (short) 0, doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue(Double.isNaN(double25));
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 42.0d + "'", double47 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[1.0]");
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 11012.232874703393d + "'", double52 == 11012.232874703393d);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector6.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 1, 10);
        arrayRealVector12.setSubVector((int) (short) 0, (org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector24.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector12.mapSqrtToSelf();
        boolean boolean37 = arrayRealVector12.isNaN();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector12.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        arrayRealVector2.unitize();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector39.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector39.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(realVector49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtractToSelf((double) '4');
        double double56 = arrayRealVector53.getNorm();
        double double57 = arrayRealVector50.getL1Distance(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector53.mapPowToSelf(0.0d);
        double double60 = arrayRealVector2.dotProduct(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 42.0d + "'", double56 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.0d + "'", double60 == 1.0d);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 14.355979641962135d, 1.4711276743037347d, 14.35414242816297d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray3);
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector16.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector16.mapAtanToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector31.mapUlpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector45.add(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix58 = arrayRealVector31.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        arrayRealVector55.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix60 = arrayRealVector16.outerProduct(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector16.mapLog10ToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.subtract(realVector69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector64.mapSqrt();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAbsToSelf();
        double double76 = arrayRealVector74.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector64.add(arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector74.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector74.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector16.subtract(arrayRealVector74);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapExpToSelf();
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        java.lang.Double[] doubleArray90 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray90);
        double double92 = arrayRealVector88.dotProduct(arrayRealVector91);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = arrayRealVector83.add(arrayRealVector91);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector83.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector95 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector74, (org.apache.commons.math.linear.RealVector) arrayRealVector83);
        org.apache.commons.math.linear.RealVector realVector96 = arrayRealVector74.mapCbrt();
        double double97 = arrayRealVector10.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector98 = arrayRealVector74.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 10.0d + "'", double76 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(arrayRealVector80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector93);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(realVector96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 11.82679529269723d + "'", double97 == 11.82679529269723d);
        org.junit.Assert.assertNotNull(realVector98);
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapAdd((double) 1L);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector14.subtract(arrayRealVector18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapTanhToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector13.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector13.mapMultiplyToSelf(10.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = arrayRealVector13.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector13.mapPow(6.0d);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = arrayRealVector5.getDistance(realVector42);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector56.mapLog1pToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        double double77 = arrayRealVector73.dotProduct(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector68.add(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector56.add(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector76.mapPow((-32.0d));
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector76.mapPowToSelf(23.978952727983707d);
        double double85 = arrayRealVector9.getDistance(realVector84);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(arrayRealVector80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 10.0d + "'", double85 == 10.0d);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapLog1p();
        double[] doubleArray19 = arrayRealVector12.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.82679529269723]");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector69.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60, (org.apache.commons.math.linear.RealVector) arrayRealVector69);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector60.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector60.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector60.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector11.mapPow((double) 0);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector11.append((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector18.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapPow((double) 10.0f);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector39.ebeDivide(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector28.subtract(arrayRealVector51);
        double double54 = arrayRealVector18.getLInfDistance(arrayRealVector28);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = arrayRealVector2.outerProduct(arrayRealVector18);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAbsToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector58.subtract(realVector63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector58.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector58.mapSinToSelf();
        double[] doubleArray68 = arrayRealVector58.getDataRef();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector18.ebeDivide(doubleArray68);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-0.5440211108893698]");
        org.junit.Assert.assertNotNull(realVector69);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(abstractRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        double double71 = arrayRealVector69.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector69.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector69.mapExpm1();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector10.ebeDivide(arrayRealVector69);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction75 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapToSelf(univariateRealFunction75);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(abstractRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-32.0d) + "'", double71 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapInvToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getL1Norm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = arrayRealVector2.ebeMultiply(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapCbrt();
        double[] doubleArray5 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, true);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = arrayRealVector1.append(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector1.mapLog();
        org.junit.Assert.assertNotNull(realVector2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(arrayRealVector9);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector8.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.mapCoshToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, false);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        openMapRealVector24.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector31.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.add(openMapRealVector31);
        int int34 = openMapRealVector31.getDimension();
        double double35 = openMapRealVector31.getSparcity();
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector31.mapUlpToSelf();
        double double37 = openMapRealVector19.getDistance(openMapRealVector31);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapCbrt();
        double double44 = openMapRealVector31.getDistance(realVector43);
        double[] doubleArray47 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, true);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector31.add(doubleArray47);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray53 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, doubleArray53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, arrayRealVector55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector8.ebeMultiply(doubleArray47);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.6329299089739802d + "'", double44 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) 1);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.add(openMapRealVector7);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1, (int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapCoshToSelf();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapSubtract(1.0d);
        arrayRealVector16.set((double) 0);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector6.mapMultiply((double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        double double71 = arrayRealVector69.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector69.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector69.mapExpm1();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector10.ebeDivide(arrayRealVector69);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector10.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(abstractRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-32.0d) + "'", double71 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(realVector75);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.subtract(realVector38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector33.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector33.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector30.ebeDivide(arrayRealVector33);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        boolean boolean61 = arrayRealVector58.isInfinite();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector30.set((int) (short) 100, arrayRealVector58);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        double double8 = openMapRealVector7.getL1Norm();
        double double9 = openMapRealVector2.dotProduct(openMapRealVector7);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(realVector30);
        double[] doubleArray32 = arrayRealVector31.toArray();
        double double33 = arrayRealVector15.getLInfDistance(doubleArray32);
        double double34 = openMapRealVector7.getDistance(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector7.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        double[] doubleArray18 = arrayRealVector12.getDataRef();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapSqrtToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = arrayRealVector12.outerProduct(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapLog10ToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAddToSelf((double) 100L);
        double[] doubleArray29 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = openMapRealVector27.outerProduct(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.mapCeil();
        boolean boolean32 = openMapRealVector11.equals((java.lang.Object) openMapRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector27.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double3 = openMapRealVector2.getL1Norm();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapRintToSelf();
        openMapRealVector6.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector9.unitVector();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector17.add(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAddToSelf((double) 100L);
        double[] doubleArray26 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = openMapRealVector24.outerProduct(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector10.append(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector10.mapAcosToSelf();
        double double32 = openMapRealVector2.getDistance(openMapRealVector10);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(openMapRealVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.0d + "'", double32 == 0.0d);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        arrayRealVector12.set((double) (-1));
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector25.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector25.mapSinh();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector25.mapCeil();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector25.mapSin();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector25.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector25.mapMultiplyToSelf(1.6853169696133175d);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        double double49 = arrayRealVector46.getNorm();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector46.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector25.add(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector12.append(realVector51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 42.0d + "'", double49 == 42.0d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector30.mapRintToSelf();
        double double36 = arrayRealVector30.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 42.0d + "'", double36 == 42.0d);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        double double33 = arrayRealVector24.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.ebeDivide(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector35.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector16.mapFloor();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapSubtractToSelf((double) '4');
        double double62 = arrayRealVector59.getNorm();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAbsToSelf();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector65.subtract(realVector70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector65.mapSqrt();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAbsToSelf();
        double double77 = arrayRealVector75.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector65.add(arrayRealVector75);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector81.mapSubtractToSelf((double) '4');
        double double84 = arrayRealVector81.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = arrayRealVector75.subtract(arrayRealVector81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = arrayRealVector59.append(arrayRealVector81);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector16.set((int) (short) 100, arrayRealVector59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.528872325696266d + "'", double33 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 42.0d + "'", double62 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 10.0d + "'", double77 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 42.0d + "'", double84 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector85);
        org.junit.Assert.assertNotNull(arrayRealVector86);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector19.mapAddToSelf((double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector21);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapFloor();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAtan();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        double double45 = arrayRealVector29.getLInfDistance(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, (org.apache.commons.math.linear.RealVector) arrayRealVector35);
        double[] doubleArray47 = arrayRealVector35.toArray();
        double double48 = arrayRealVector19.getDistance(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector6.subtract(doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47, 13.35414242816297d);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector51.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector42.mapDivide((double) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapSin();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        double double72 = arrayRealVector19.dotProduct(arrayRealVector61);
        arrayRealVector61.setEntry((int) (byte) 0, 1.6329299089739802d);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector61.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.4711276743037347d + "'", double39 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 42.0d + "'", double64 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-61.787362320756856d) + "'", double71 == (-61.787362320756856d));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAtanToSelf();
        org.junit.Assert.assertNotNull(realVector2);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        double double21 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapPowToSelf(1.0E-12d);
        double double24 = arrayRealVector20.getL1Norm();
        double double25 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.355979641962135d + "'", double21 == 14.355979641962135d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 2.000000000001193d + "'", double24 == 2.000000000001193d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.4142135623739385d + "'", double25 == 1.4142135623739385d);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector23.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(realVector33);
        double[] doubleArray35 = arrayRealVector34.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector17.ebeMultiply(doubleArray35);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN]");
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapCeilToSelf();
        double[] doubleArray8 = arrayRealVector5.toArray();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapLogToSelf();
        double double19 = arrayRealVector15.getL1Norm();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double24 = arrayRealVector15.getL1Distance(arrayRealVector23);
        double double25 = arrayRealVector12.getLInfDistance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapFloorToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapSqrt();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        double double41 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector29.add(arrayRealVector39);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.subtract(arrayRealVector45);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double60 = arrayRealVector56.dotProduct(arrayRealVector59);
        double double61 = arrayRealVector52.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        double double62 = arrayRealVector45.getLInfDistance(arrayRealVector52);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        double double74 = arrayRealVector70.dotProduct(arrayRealVector73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector65.add(arrayRealVector73);
        double[] doubleArray76 = arrayRealVector75.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix77 = arrayRealVector52.outerProduct(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector15.ebeDivide(doubleArray76);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4711276743037347d + "'", double19 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 8.528872325696266d + "'", double24 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8.528872325696266d + "'", double61 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 43.47112767430374d + "'", double62 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realMatrix77);
        org.junit.Assert.assertNotNull(realVector78);
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector2.mapDivideToSelf((double) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.unitVector();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        int int24 = openMapRealVector21.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.unitVector();
        double double27 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertTrue(Double.isNaN(double27));
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector11.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector11.append((double) 100);
        double[] doubleArray22 = openMapRealVector11.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[22026.465794806718]");
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(2, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector6.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(realVector16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapSubtractToSelf((double) '4');
        double double23 = arrayRealVector20.getNorm();
        double double24 = arrayRealVector17.getL1Distance(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector20.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapAddToSelf(2.3978952727983707d);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector20.mapInvToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double29 = openMapRealVector2.getDistance(realVector28);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 42.0d + "'", double23 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector69.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60, (org.apache.commons.math.linear.RealVector) arrayRealVector69);
        boolean boolean82 = arrayRealVector81.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.append(4.122307273313197E-9d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapLogToSelf();
        double double27 = arrayRealVector23.getL1Norm();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double32 = arrayRealVector23.getL1Distance(arrayRealVector31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        double double44 = arrayRealVector35.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector23.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        double double46 = arrayRealVector17.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector42.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.4711276743037347d + "'", double27 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 8.528872325696266d + "'", double32 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-6.853169696133174d) + "'", double46 == (-6.853169696133174d));
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapSqrt();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        double double27 = arrayRealVector25.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector15.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector25.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector25.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector25.append((double) '4');
        org.apache.commons.math.linear.RealMatrix realMatrix33 = arrayRealVector10.outerProduct(arrayRealVector25);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realMatrix33);
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector1.mapSinToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector7.mapCeilToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapPow((double) 0);
        double double22 = arrayRealVector7.getLInfDistance(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector7.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(realVector4, arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector7.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.64585757183703d + "'", double22 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        int int6 = arrayRealVector5.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        double[] doubleArray23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.add(doubleArray23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        double double6 = openMapRealVector2.getEntry((int) (byte) 0);
        openMapRealVector2.set(1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (short) 100);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapCos();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapSinh();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector27.add(arrayRealVector35);
        double[] doubleArray38 = arrayRealVector37.getDataRef();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector37.mapDivide((double) (short) -1);
        double[] doubleArray43 = arrayRealVector37.getDataRef();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapExpToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        double double55 = arrayRealVector51.dotProduct(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector46.add(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapSqrtToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = arrayRealVector37.outerProduct(realVector57);
        double double59 = arrayRealVector16.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realMatrix58);
        org.junit.Assert.assertTrue(Double.isNaN(double59));
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapTanhToSelf();
        double double5 = openMapRealVector2.getLInfNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector2.getSubVector(100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 6.0d + "'", double5 == 6.0d);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector2.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.mapAdd((double) (short) -1);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector2.mapUlp();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        int int27 = openMapRealVector24.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.copy();
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapExpm1();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        openMapRealVector40.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector40.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector47.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector44.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector47.mapAddToSelf((double) 100L);
        double[] doubleArray53 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix54 = openMapRealVector51.outerProduct(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector32.add(doubleArray53);
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector28.outerProduct(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector28.mapMultiply((-1.0d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector2.subtract(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(openMapRealVector59);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        boolean boolean16 = arrayRealVector15.isInfinite();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector19.mapUlpToSelf();
        double double31 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapInvToSelf();
        boolean boolean33 = arrayRealVector15.equals((java.lang.Object) arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector19.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 8.881784197001252E-16d + "'", double31 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        double[] doubleArray49 = arrayRealVector48.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = arrayRealVector25.outerProduct(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector25.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector25.append(6.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 5.64585757183703d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        arrayRealVector15.set(100.0d);
        int int18 = arrayRealVector15.getDimension();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapDivide((double) 2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapLogToSelf();
        double double26 = arrayRealVector22.getL1Norm();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double31 = arrayRealVector22.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapTan();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapSin();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector5.append(openMapRealVector19);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector5.mapMultiplyToSelf(99.0d);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector5.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6.0d + "'", double13 == 6.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.4711276743037347d + "'", double26 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 8.528872325696266d + "'", double31 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapRint();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapSubtractToSelf((double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector12.mapSubtractToSelf(434.7112767430374d);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector12.mapSin();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAbsToSelf();
        double double64 = arrayRealVector62.getNorm();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapAtan();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAbsToSelf();
        double double70 = arrayRealVector68.getNorm();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapAtan();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAbsToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector78.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector74.subtract(realVector79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector74.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector74.mapAsinToSelf();
        double double84 = arrayRealVector68.getLInfDistance(arrayRealVector74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector62, (org.apache.commons.math.linear.RealVector) arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector85.mapInvToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double87 = arrayRealVector12.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector85);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 10.0d + "'", double64 == 10.0d);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 10.0d + "'", double70 == 10.0d);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertTrue(Double.isNaN(double84));
        org.junit.Assert.assertNotNull(realVector86);
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector56.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector56.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(realVector66);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector70.mapSubtractToSelf((double) '4');
        double double73 = arrayRealVector70.getNorm();
        double double74 = arrayRealVector67.getL1Distance(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapCoshToSelf();
        double[] doubleArray77 = arrayRealVector75.getData();
        double double78 = arrayRealVector9.getL1Distance(arrayRealVector75);
        boolean boolean79 = arrayRealVector75.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 42.0d + "'", double73 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double78));
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.append(23.92357071360495d);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapMultiplyToSelf(10.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = arrayRealVector2.sparseIterator();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector32.mapRintToSelf();
        openMapRealVector32.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        openMapRealVector43.set(10.0d);
        openMapRealVector43.unitize();
        double double47 = openMapRealVector32.getL1Distance(openMapRealVector43);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector58.mapTanhToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector64.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapCbrt();
        boolean boolean68 = arrayRealVector58.equals((java.lang.Object) arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.mapSubtract(1.0d);
        double double71 = openMapRealVector43.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector64.mapAsin();
        double double73 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector2.subtract(arrayRealVector64);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 99.0d + "'", double47 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 3.3541424281629704d + "'", double71 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 4.35414242816297d + "'", double73 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(arrayRealVector74);
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) -1, 14.355979641962135d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.append(openMapRealVector23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector19.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        double[] doubleArray20 = new double[] {};
        double[] doubleArray22 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtract(10.0d);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        double double30 = arrayRealVector28.getNorm();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapAtan();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        double double36 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapAtan();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        double double50 = arrayRealVector34.getLInfDistance(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28, (org.apache.commons.math.linear.RealVector) arrayRealVector40);
        double[] doubleArray52 = arrayRealVector40.toArray();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector23.add(doubleArray52);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52, arrayRealVector56);
        arrayRealVector12.setSubVector((int) (byte) 0, doubleArray52);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        double double77 = arrayRealVector73.dotProduct(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector68.add(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector68.mapUlpToSelf();
        double double80 = arrayRealVector68.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = arrayRealVector12.append(arrayRealVector68);
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector84.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector84.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector84.mapPow((double) 0);
        java.lang.Double[] doubleArray90 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray90);
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector91.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector84.append((org.apache.commons.math.linear.RealVector) arrayRealVector91);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector91.mapUlpToSelf();
        double[] doubleArray95 = arrayRealVector91.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double96 = arrayRealVector81.getLInfDistance(doubleArray95);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[100.0]");
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[NaN]");
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 8.881784197001252E-16d + "'", double80 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[1.7763568394002505E-15]");
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapExpToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        double double51 = arrayRealVector47.dotProduct(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector42.add(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapTanhToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        double double66 = arrayRealVector62.dotProduct(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector57.add(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector57.mapUlpToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector71.mapExpToSelf();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        double double80 = arrayRealVector76.dotProduct(arrayRealVector79);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = arrayRealVector71.add(arrayRealVector79);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector81.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = arrayRealVector57.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector81);
        java.lang.Double[] doubleArray86 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector87.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector87.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector87.mapCos();
        boolean boolean92 = arrayRealVector81.equals((java.lang.Object) arrayRealVector87);
        double double93 = arrayRealVector52.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector81);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector52.mapRint();
        double double95 = arrayRealVector33.getDistance(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector96 = arrayRealVector33.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 100.0d + "'", double51 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 100.0d + "'", double80 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realMatrix84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 14.354142428153194d + "'", double93 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + Double.POSITIVE_INFINITY + "'", double95 == Double.POSITIVE_INFINITY);
        org.junit.Assert.assertNotNull(realVector96);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        double[] doubleArray26 = arrayRealVector14.toArray();
        boolean boolean27 = arrayRealVector14.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapAcos();
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector6.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector6.mapFloorToSelf();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector6.setEntry(10, (-32.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector18.mapTanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapLogToSelf();
        double double43 = arrayRealVector39.getL1Norm();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double48 = arrayRealVector39.getL1Distance(arrayRealVector47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector51.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector51.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(realVector61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapSubtractToSelf((double) '4');
        double double68 = arrayRealVector65.getNorm();
        double double69 = arrayRealVector62.getL1Distance(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector39.add(arrayRealVector65);
        double double71 = arrayRealVector65.getL1Norm();
        double[] doubleArray72 = arrayRealVector65.toArray();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector65.mapRint();
        double double74 = arrayRealVector65.getNorm();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector77.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector77.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector77.mapPow((double) 0);
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector84.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector77.append((org.apache.commons.math.linear.RealVector) arrayRealVector84);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector84.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector84.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray91 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray91);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector92.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector92.mapAcosToSelf();
        double[] doubleArray96 = arrayRealVector92.getDataRef();
        org.apache.commons.math.linear.RealVector realVector97 = arrayRealVector84.ebeDivide(doubleArray96);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector98 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector65, doubleArray96);
        double double99 = arrayRealVector18.getLInfDistance(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.4711276743037347d + "'", double43 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.528872325696266d + "'", double48 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 42.0d + "'", double68 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 42.0d + "'", double71 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 42.0d + "'", double74 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(realVector95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[NaN]");
        org.junit.Assert.assertNotNull(realVector97);
        org.junit.Assert.assertTrue(Double.isNaN(double99));
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        boolean boolean6 = arrayRealVector2.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSqrt();
        double[] doubleArray24 = arrayRealVector16.toArray();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector2.subtract(doubleArray24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.mapMultiplyToSelf(42.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector0 = new org.apache.commons.math.linear.OpenMapRealVector();
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector3.copy();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        double double16 = arrayRealVector7.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector14);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapLogToSelf();
        double double25 = arrayRealVector21.getL1Norm();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double30 = arrayRealVector21.getL1Distance(arrayRealVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.subtract(realVector38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector33.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(realVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        double double50 = arrayRealVector47.getNorm();
        double double51 = arrayRealVector44.getL1Distance(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector21.add(arrayRealVector47);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        double double57 = arrayRealVector47.dotProduct(realVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector14.add(arrayRealVector47);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapExpToSelf();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        double double70 = arrayRealVector66.dotProduct(arrayRealVector69);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = arrayRealVector61.add(arrayRealVector69);
        double[] doubleArray72 = arrayRealVector71.getDataRef();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector47.subtract(doubleArray72);
        double double74 = openMapRealVector3.getLInfDistance(doubleArray72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector3.mapAddToSelf((double) '#');
        double[] doubleArray77 = openMapRealVector76.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = openMapRealVector0.getDistance(doubleArray77);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.528872325696266d + "'", double16 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.4711276743037347d + "'", double25 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 8.528872325696266d + "'", double30 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 42.0d + "'", double50 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double51));
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + (-61.787362320756856d) + "'", double57 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 100.0d + "'", double70 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector71);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 13.35414242816297d + "'", double74 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[36.0]");
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSinh();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector17.mapLog();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector34.ebeDivide(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapTanh();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector51.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector51.mapAbsToSelf();
        double double62 = arrayRealVector47.getL1Distance(arrayRealVector51);
        double double63 = arrayRealVector17.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAbsToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector66.subtract(realVector71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector66.mapSqrt();
        double[] doubleArray74 = arrayRealVector66.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector17, doubleArray74);
        boolean boolean76 = arrayRealVector10.equals((java.lang.Object) arrayRealVector17);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8.881784197001252E-16d + "'", double63 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray74), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        arrayRealVector26.unitize();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapSqrt();
        double[] doubleArray42 = arrayRealVector34.getData();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector31.ebeDivide(doubleArray42);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector44 = arrayRealVector31.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0]");
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(abstractRealVector44);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) '#');
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        double double9 = openMapRealVector8.getSparcity();
        boolean boolean10 = openMapRealVector8.isInfinite();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector17.add(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAddToSelf((double) 100L);
        double[] doubleArray26 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = openMapRealVector24.outerProduct(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        openMapRealVector30.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.add(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAddToSelf((double) 100L);
        double[] doubleArray43 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = openMapRealVector41.outerProduct(doubleArray43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector24.append(doubleArray43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector8.append(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector1.add(doubleArray43);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(openMapRealVector48);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector8.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        double double16 = openMapRealVector15.getSparcity();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector19.mapAdd((double) ' ');
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAcosToSelf();
        double[] doubleArray29 = arrayRealVector25.getDataRef();
        double double30 = openMapRealVector22.getDistance(doubleArray29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29, (-6.853169696133174d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector15.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(openMapRealVector33);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapCbrt();
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, doubleArray9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapSubtract(10.0d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        double double17 = arrayRealVector15.getNorm();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAtan();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        double double23 = arrayRealVector21.getNorm();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapAtan();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector27.mapAsinToSelf();
        double double37 = arrayRealVector21.getLInfDistance(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15, (org.apache.commons.math.linear.RealVector) arrayRealVector27);
        double[] doubleArray39 = arrayRealVector27.toArray();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.add(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapExpToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        double double52 = arrayRealVector48.dotProduct(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector43.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapDivideToSelf((double) (byte) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector10.ebeMultiply(arrayRealVector53);
        double double59 = arrayRealVector10.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector63.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector77.mapAbsToSelf();
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector81.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector77.subtract(realVector82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector77.mapSqrt();
        double[] doubleArray85 = arrayRealVector77.toArray();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector63.subtract(doubleArray85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector5.subtract(doubleArray85);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[10.0]");
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(openMapRealVector87);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector10.copy();
        double double13 = openMapRealVector10.getSparcity();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.String str45 = arrayRealVector17.toString();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapExpToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        double double57 = arrayRealVector53.dotProduct(arrayRealVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector48.add(arrayRealVector56);
        double[] doubleArray59 = arrayRealVector58.getDataRef();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector17.subtract(doubleArray59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, false);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector10.setSubVector(2, doubleArray59);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 2 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{0}" + "'", str45, "{0}");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector60);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf((double) (-1.0f));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(realVector14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector25.mapDivide((double) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        openMapRealVector11.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector15.add(openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAddToSelf((double) 100L);
        double[] doubleArray24 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector22.outerProduct(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector22.append(doubleArray41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector6.append(doubleArray41);
        double[] doubleArray47 = openMapRealVector46.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector46.mapAddToSelf((double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector49.projection((org.apache.commons.math.linear.RealVector) openMapRealVector51);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[9.0, NaN]");
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        double double21 = openMapRealVector17.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector17.mapAdd(3.6249728132842707d);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector23.mapMultiply(23.978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (-1), 14.355979641962135d);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector3.mapTan();
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapDivideToSelf(1.6329299089739802d);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector46.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector53.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector50.add(openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector55.unitVector();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector59.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector55.append(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector61.mapAdd(42.0d);
        double[] doubleArray64 = openMapRealVector61.toArray();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector39.setSubVector((int) (byte) 100, doubleArray64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[10.0, 1.0]");
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27, true);
        double[] doubleArray30 = arrayRealVector27.getDataRef();
        double double31 = arrayRealVector10.getL1Distance(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.900332005375045d + "'", double31 == 9.900332005375045d);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapCoshToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.unitVector();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        double double22 = arrayRealVector9.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector19);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 11010.835024830527d + "'", double22 == 11010.835024830527d);
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector8.mapSubtractToSelf(14.354142428153194d);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.projection(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        openMapRealVector18.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector22.add(openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAddToSelf((double) 100L);
        double[] doubleArray31 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix32 = openMapRealVector29.outerProduct(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        openMapRealVector35.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector42.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector39.add(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAddToSelf((double) 100L);
        double[] doubleArray48 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = openMapRealVector46.outerProduct(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector29.append(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48, false);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapSqrt();
        double double56 = arrayRealVector2.getL1Distance(realVector55);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapLog1p();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector4 = arrayRealVector2.copy();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(abstractRealVector4);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExpm1ToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        double[] doubleArray22 = arrayRealVector19.getDataRef();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.ebeDivide(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector26.projection(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector26.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapFloor();
        double[] doubleArray5 = new double[] { 9.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector2.subtract(doubleArray5);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[9.0]");
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCoshToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        int int38 = arrayRealVector32.getDimension();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCoshToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapSqrt();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        double double54 = arrayRealVector52.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector42.add(arrayRealVector52);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.subtract(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector32.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        double double64 = arrayRealVector12.getLInfDistance(realVector63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector12.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.append(realVector16);
        java.lang.String str18 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapSqrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, realVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapSqrt();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        double double52 = arrayRealVector50.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector40.add(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapLogToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector57.subtract(realVector62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector57.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector57.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(realVector67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector71.mapSubtractToSelf((double) '4');
        double double74 = arrayRealVector71.getNorm();
        double double75 = arrayRealVector68.getL1Distance(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector50.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        double double77 = arrayRealVector2.getDistance(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector2.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{10}" + "'", str18, "{10}");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 42.0d + "'", double74 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 7.697414907005954d + "'", double77 == 7.697414907005954d);
        org.junit.Assert.assertNotNull(realVector78);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double double6 = openMapRealVector5.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        double double15 = arrayRealVector13.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAtan();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        double double21 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapAtan();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector25.subtract(realVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector25.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector25.mapAsinToSelf();
        double double35 = arrayRealVector19.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13, (org.apache.commons.math.linear.RealVector) arrayRealVector25);
        double[] doubleArray37 = arrayRealVector25.toArray();
        double double38 = arrayRealVector9.getDistance(doubleArray37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector5.append(doubleArray37);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector47 = arrayRealVector45.copy();
        double[] doubleArray48 = arrayRealVector45.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector5.projection(doubleArray48);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 10.0d + "'", double15 == 10.0d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(abstractRealVector47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[]");
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapPowToSelf((double) (byte) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        double[] doubleArray1 = new double[] { 9.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapLog();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[9.0]");
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector12.mapSqrtToSelf();
        java.lang.Class<?> wildcardClass37 = realVector36.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(wildcardClass37);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAsin();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector20.setEntry(100, (double) 100L);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (short) 100, (int) (byte) 0);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double[] doubleArray6 = openMapRealVector5.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector5.copy();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertNotNull(openMapRealVector7);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector12.mapAdd((double) 1);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector12.add(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector2.subtract(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.lang.Double[] doubleArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 2);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = arrayRealVector2.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(entryItor16);
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector1.mapTanToSelf();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector13.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector2.mapInvToSelf();
        openMapRealVector2.unitize();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        openMapRealVector12.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAdd((double) (byte) -1);
        double double17 = openMapRealVector16.getSparcity();
        boolean boolean18 = openMapRealVector16.isInfinite();
        double double19 = openMapRealVector2.dotProduct(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 9.0d + "'", double19 == 9.0d);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        boolean boolean46 = openMapRealVector45.isNaN();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        double double21 = openMapRealVector17.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector17.copy();
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector22.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (int) '#', (double) ' ');
        double[] doubleArray4 = new double[] {};
        double[] doubleArray6 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4, doubleArray6);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector3.append(doubleArray4);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector3.setEntry((int) (short) 1, 1.6853169696133175d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, -2]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertNotNull(openMapRealVector9);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        double double71 = arrayRealVector69.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector69.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector69.mapExpm1();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector10.ebeDivide(arrayRealVector69);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector10.mapSubtractToSelf(14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(abstractRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-32.0d) + "'", double71 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector2.mapMultiplyToSelf(1.6329299089739802d);
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.projection(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector9);
    }
}


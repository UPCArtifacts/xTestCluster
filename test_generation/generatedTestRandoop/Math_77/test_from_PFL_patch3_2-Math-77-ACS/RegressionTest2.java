import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test1001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1001");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4');
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector4.mapAdd((double) ' ');
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapAcosToSelf();
        double[] doubleArray14 = arrayRealVector10.getDataRef();
        double double15 = openMapRealVector7.getDistance(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14, (-6.853169696133174d));
        // The following exception was thrown during execution in test generation
        try {
            double double18 = openMapRealVector1.getDistance(doubleArray14);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double15));
    }

    @Test
    public void test1002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1002");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector34.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector34.mapAddToSelf((double) 100);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapExpToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        double double53 = arrayRealVector49.dotProduct(arrayRealVector52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector44.add(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapTanhToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapExpToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        double double68 = arrayRealVector64.dotProduct(arrayRealVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector59.add(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector59.mapUlpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapExpToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        double double82 = arrayRealVector78.dotProduct(arrayRealVector81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector73.add(arrayRealVector81);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix86 = arrayRealVector59.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector83);
        java.lang.Double[] doubleArray88 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray88);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector89.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector89.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector89.mapCos();
        boolean boolean94 = arrayRealVector83.equals((java.lang.Object) arrayRealVector89);
        double double95 = arrayRealVector54.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector83);
        org.apache.commons.math.linear.RealVector realVector96 = openMapRealVector34.add((org.apache.commons.math.linear.RealVector) arrayRealVector54);
        double double97 = arrayRealVector2.dotProduct(realVector96);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realMatrix86);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + double95 + "' != '" + 14.354142428153194d + "'", double95 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector96);
        org.junit.Assert.assertTrue("'" + double97 + "' != '" + 163.29517184771356d + "'", double97 == 163.29517184771356d);
    }

    @Test
    public void test1003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1003");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        double[] doubleArray17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.append(doubleArray17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
    }

    @Test
    public void test1004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1004");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double3 = openMapRealVector2.getSparcity();
        boolean boolean4 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) -1, 1.6853169696133175d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.add(openMapRealVector8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector2.mapPowToSelf((double) '#');
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test1005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1005");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapLog10ToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAddToSelf((double) 100L);
        double[] doubleArray29 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = openMapRealVector27.outerProduct(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.mapCeil();
        boolean boolean32 = openMapRealVector11.equals((java.lang.Object) openMapRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector27.mapSinh();
        // The following exception was thrown during execution in test generation
        try {
            double double35 = openMapRealVector27.getEntry((int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1006");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) '4');
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector4.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector4.mapExpToSelf();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = arrayRealVector4.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector4.mapUlpToSelf();
        double[] doubleArray16 = arrayRealVector4.toArray();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector4.mapCosToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        double[] doubleArray28 = new double[] {};
        double[] doubleArray30 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28, doubleArray30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapSubtract(10.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector36.mapAtan();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        double double44 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector42.mapAtan();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.subtract(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector48.mapAsinToSelf();
        double double58 = arrayRealVector42.getLInfDistance(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36, (org.apache.commons.math.linear.RealVector) arrayRealVector48);
        double[] doubleArray60 = arrayRealVector48.toArray();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector31.add(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector20.subtract(doubleArray60);
        double double63 = arrayRealVector4.dotProduct(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector1.projection(doubleArray60);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 10.0d + "'", double44 == 10.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[NaN]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test1007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1007");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapCeil();
        int int18 = arrayRealVector16.getDimension();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test1008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1008");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        boolean boolean7 = arrayRealVector5.isInfinite();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1009");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        int int26 = arrayRealVector14.getDimension();
        java.lang.String str27 = arrayRealVector14.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "{(NaN)}" + "'", str27, "{(NaN)}");
    }

    @Test
    public void test1010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1010");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        double double18 = arrayRealVector2.getLInfNorm();
        double double19 = arrayRealVector2.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.0d + "'", double18 == 6.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test1011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1011");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapMultiplyToSelf((double) 10);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector25.mapSqrtToSelf();
        boolean boolean30 = arrayRealVector25.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test1012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1012");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        double double72 = arrayRealVector19.dotProduct(arrayRealVector61);
        arrayRealVector61.setEntry((int) (byte) 0, 1.6329299089739802d);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector61.mapAddToSelf(9.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.4711276743037347d + "'", double39 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 42.0d + "'", double64 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-61.787362320756856d) + "'", double71 == (-61.787362320756856d));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1013");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapAcos();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector13.append(realVector25);
        boolean boolean27 = openMapRealVector26.isNaN();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        openMapRealVector30.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.add(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector39.unitVector();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector43.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector39.append(openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector45.mapAdd(42.0d);
        double[] doubleArray48 = openMapRealVector45.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector26.ebeMultiply(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector49);
    }

    @Test
    public void test1014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1014");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapAddToSelf(2.3978952727983707d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector16.mapPowToSelf(3.3541424281629704d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test1015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1015");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test1016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1016");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAddToSelf((double) (short) 100);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapFloorToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapPow(5.259548471626528E-84d);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapDivideToSelf((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.set(2, arrayRealVector23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 2 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test1017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1017");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) 'a');
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapTanhToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5, (double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector2.add(openMapRealVector9);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test1018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1018");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAbs();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.unitVector();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector10.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapSqrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1019");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapLog10ToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor14 = openMapRealVector11.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(entryItor14);
    }

    @Test
    public void test1020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1020");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector46.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
    }

    @Test
    public void test1021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1021");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        double double7 = arrayRealVector2.getLInfNorm();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.copy();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        double double23 = arrayRealVector14.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        double double32 = arrayRealVector28.getL1Norm();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double37 = arrayRealVector28.getL1Distance(arrayRealVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapSubtractToSelf((double) '4');
        double double57 = arrayRealVector54.getNorm();
        double double58 = arrayRealVector51.getL1Distance(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector28.add(arrayRealVector54);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        double double64 = arrayRealVector54.dotProduct(realVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector21.add(arrayRealVector54);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        double double77 = arrayRealVector73.dotProduct(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector68.add(arrayRealVector76);
        double[] doubleArray79 = arrayRealVector78.getDataRef();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector54.subtract(doubleArray79);
        double double81 = openMapRealVector10.getLInfDistance(doubleArray79);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector10.mapAddToSelf((double) '#');
        double double84 = openMapRealVector83.getLInfNorm();
        double double85 = arrayRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector83);
        org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector83.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.0d + "'", double7 == 6.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 8.528872325696266d + "'", double23 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.4711276743037347d + "'", double32 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 8.528872325696266d + "'", double37 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 42.0d + "'", double57 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + (-61.787362320756856d) + "'", double64 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 13.35414242816297d + "'", double81 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 6.0d + "'", double84 == 6.0d);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 26.0d + "'", double85 == 26.0d);
        org.junit.Assert.assertNotNull(realVector86);
    }

    @Test
    public void test1022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1022");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapMultiplyToSelf(1.1258999068426236E15d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test1023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1023");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapSignumToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapPow((double) 0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = arrayRealVector29.iterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector2.ebeDivide(arrayRealVector29);
        arrayRealVector2.set(1713659.1765230843d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(arrayRealVector35);
    }

    @Test
    public void test1024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1024");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) 1);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.add(openMapRealVector7);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.add(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector12.mapSqrtToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        double[] doubleArray39 = arrayRealVector38.getDataRef();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector38.mapDivide((double) (short) -1);
        double[] doubleArray44 = arrayRealVector38.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector12.add(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = openMapRealVector2.outerProduct(doubleArray44);
        double[] doubleArray47 = new double[] {};
        double[] doubleArray49 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, doubleArray49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapSubtract(10.0d);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        double double57 = arrayRealVector55.getNorm();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapAtan();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAbsToSelf();
        double double63 = arrayRealVector61.getNorm();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector61.mapAtan();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAbsToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector67.subtract(realVector72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector67.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector67.mapAsinToSelf();
        double double77 = arrayRealVector61.getLInfDistance(arrayRealVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector55, (org.apache.commons.math.linear.RealVector) arrayRealVector67);
        double[] doubleArray79 = arrayRealVector67.toArray();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector50.add(doubleArray79);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAbsToSelf();
        java.lang.Double[] doubleArray86 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector87.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector83.subtract(realVector88);
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector83.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79, arrayRealVector83);
        double double92 = openMapRealVector2.getLInfDistance(doubleArray79);
        boolean boolean93 = openMapRealVector2.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[100.0]");
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 10.0d + "'", double63 == 10.0d);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN]");
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 0.0d + "'", double92 == 0.0d);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
    }

    @Test
    public void test1025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1025");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapLog1pToSelf();
        boolean boolean40 = arrayRealVector37.isInfinite();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapExpToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        double double52 = arrayRealVector48.dotProduct(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector43.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector37.ebeDivide(realVector54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector37.mapExpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector2.projection(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapDivideToSelf(99.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 100.0d + "'", double52 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
    }

    @Test
    public void test1026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1026");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        double double8 = arrayRealVector5.getLInfNorm();
        double[] doubleArray9 = new double[] {};
        double[] doubleArray11 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9, doubleArray11);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapCbrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.0d + "'", double8 == 6.0d);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0]");
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1027");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        openMapRealVector39.set(10.0d);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        openMapRealVector44.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector44.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector51.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector48.add(openMapRealVector51);
        int int54 = openMapRealVector51.getDimension();
        double double55 = openMapRealVector51.getSparcity();
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector51.mapUlpToSelf();
        double double57 = openMapRealVector39.getDistance(openMapRealVector51);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapCbrt();
        double double64 = openMapRealVector51.getDistance(realVector63);
        double[] doubleArray67 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67, true);
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector51.add(doubleArray67);
        double[] doubleArray71 = new double[] {};
        double[] doubleArray73 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71, doubleArray73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67, arrayRealVector75);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector36.ebeDivide(doubleArray67);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.0d + "'", double55 == 1.0d);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 1.6329299089739802d + "'", double64 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[]");
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[100.0]");
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test1028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1028");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        int int26 = openMapRealVector23.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.unitVector();
        double double29 = openMapRealVector2.getL1Distance(openMapRealVector23);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        int int42 = openMapRealVector39.getDimension();
        double double43 = openMapRealVector39.getSparcity();
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector39.mapUlp();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor45 = openMapRealVector39.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector2.projection((org.apache.commons.math.linear.RealVector) openMapRealVector39);
        // The following exception was thrown during execution in test generation
        try {
            double double48 = openMapRealVector2.getEntry((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(entryItor45);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test1029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1029");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTanhToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector34.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = arrayRealVector20.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapCos();
        boolean boolean55 = arrayRealVector44.equals((java.lang.Object) arrayRealVector50);
        double double56 = arrayRealVector15.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapLogToSelf();
        double double63 = arrayRealVector59.getL1Norm();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        double double68 = arrayRealVector59.getL1Distance(arrayRealVector67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAbsToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector71.subtract(realVector76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector71.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector71.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector71.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(realVector81);
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapSubtractToSelf((double) '4');
        double double88 = arrayRealVector85.getNorm();
        double double89 = arrayRealVector82.getL1Distance(arrayRealVector85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = arrayRealVector59.add(arrayRealVector85);
        double double91 = arrayRealVector85.getL1Norm();
        double[] doubleArray92 = arrayRealVector85.toArray();
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector85.mapRint();
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector44.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector85);
        arrayRealVector44.set(11.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector97 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector44);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 14.354142428153194d + "'", double56 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 1.4711276743037347d + "'", double63 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 8.528872325696266d + "'", double68 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 42.0d + "'", double88 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(arrayRealVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 42.0d + "'", double91 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1030");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapTan();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapMultiplyToSelf((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1031");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        double[] doubleArray8 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, true);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector13.mapCos();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector13.mapExpm1();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAddToSelf((double) 100L);
        double[] doubleArray34 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = openMapRealVector32.outerProduct(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector13.add(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector5.subtract(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test1032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1032");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        double[] doubleArray19 = arrayRealVector18.getDataRef();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector5.subtract(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(openMapRealVector20);
    }

    @Test
    public void test1033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1033");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector6.mapSinh();
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.mapSinhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector6.getSubVector(1, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test1034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1034");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 9.0d);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapInv();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapTanhToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) 1);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector9.setEntry((int) '#', (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 35 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
    }

    @Test
    public void test1035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1035");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSignumToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, false);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector20.mapSinh();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector20.mapLog();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapAbsToSelf();
        double double65 = arrayRealVector50.getL1Distance(arrayRealVector54);
        double double66 = arrayRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapSqrt();
        double[] doubleArray77 = arrayRealVector69.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector20.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector20.mapMultiplyToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector20.mapAtanToSelf();
        double double83 = arrayRealVector2.getLInfDistance(arrayRealVector20);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 8.881784197001252E-16d + "'", double66 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 1.0000000000000888d + "'", double83 == 1.0000000000000888d);
    }

    @Test
    public void test1036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1036");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAtan();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        double double45 = arrayRealVector29.getLInfDistance(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, (org.apache.commons.math.linear.RealVector) arrayRealVector35);
        double[] doubleArray47 = arrayRealVector35.toArray();
        double double48 = arrayRealVector19.getDistance(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector6.subtract(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector6.mapCosh();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
    }

    @Test
    public void test1037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1037");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        double double47 = openMapRealVector43.getSparcity();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector43.mapUlpToSelf();
        double double49 = openMapRealVector31.getDistance(openMapRealVector43);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapCbrt();
        double double56 = openMapRealVector43.getDistance(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector13.add((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector13.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.6329299089739802d + "'", double56 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
    }

    @Test
    public void test1038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1038");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector34.mapSubtractToSelf(1.1569772511800065d);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector45 = arrayRealVector34.copy();
        double double46 = arrayRealVector34.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(abstractRealVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 6.0d + "'", double46 == 6.0d);
    }

    @Test
    public void test1039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1039");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(2, 0);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        openMapRealVector6.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector6.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector10.add(openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.unitVector();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector19.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector15.append(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector21.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector23.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(openMapRealVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector24);
    }

    @Test
    public void test1040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1040");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapCosh();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapSqrt();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        double double29 = arrayRealVector27.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector17.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.unitVector();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapCosh();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapTanhToSelf();
        double[] doubleArray53 = new double[] {};
        double[] doubleArray55 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48, doubleArray53);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector48.mapExpToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAbsToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector61.subtract(realVector66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector61.mapCeilToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector71.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector71.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector61.add(realVector74);
        double[] doubleArray76 = arrayRealVector61.getData();
        double double77 = arrayRealVector48.getL1Distance(doubleArray76);
        double double78 = arrayRealVector32.getLInfDistance(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector2.ebeDivide(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0]");
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 7.281718171542806d + "'", double77 == 7.281718171542806d);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 9.314683030386682d + "'", double78 == 9.314683030386682d);
        org.junit.Assert.assertNotNull(realVector79);
    }

    @Test
    public void test1041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1041");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector2.mapSinToSelf();
        arrayRealVector2.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test1042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1042");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSignumToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, false);
        java.lang.String str18 = arrayRealVector17.toString();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.map(univariateRealFunction19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{-1}" + "'", str18, "{-1}");
    }

    @Test
    public void test1043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1043");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.append(realVector16);
        java.lang.String str18 = arrayRealVector2.toString();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{10}" + "'", str18, "{10}");
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test1044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1044");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapTanhToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) -1, 1.6853169696133175d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapLog1pToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapPow((double) 0);
        double double38 = arrayRealVector23.getLInfDistance(arrayRealVector33);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector41.subtract(realVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector41.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector41.ebeDivide(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapTanh();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector23.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector54);
        double double57 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double double58 = arrayRealVector18.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        double double69 = arrayRealVector65.dotProduct(arrayRealVector68);
        double double70 = arrayRealVector61.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapCbrt();
        double double74 = arrayRealVector18.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector72);
        arrayRealVector18.set((double) (byte) -1);
        boolean boolean77 = openMapRealVector12.equals((java.lang.Object) arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector18);
        java.lang.Object obj79 = null;
        boolean boolean80 = arrayRealVector2.equals(obj79);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5.64585757183703d + "'", double38 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 7.602104727201629d + "'", double57 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2.3978952727983707d + "'", double58 == 2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 8.528872325696266d + "'", double70 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 23.978952727983707d + "'", double74 == 23.978952727983707d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
    }

    @Test
    public void test1045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1045");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapAcosToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.getSubVector((int) ' ', (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test1046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1046");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector24.unitVector();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector24.append(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector30.mapAdd(42.0d);
        double[] doubleArray33 = openMapRealVector30.toArray();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector6.setSubVector((int) '#', doubleArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 35 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0, 1.0]");
    }

    @Test
    public void test1047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1047");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1048");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapLog10ToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        double double50 = arrayRealVector41.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector32.add(arrayRealVector48);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector56.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector56.mapRintToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector64.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector56.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53, arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector56.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector56.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.528872325696266d + "'", double50 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
    }

    @Test
    public void test1049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1049");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        double double71 = arrayRealVector69.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector69.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector69.mapExpm1();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector10.ebeDivide(arrayRealVector69);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector77.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector77.mapExpToSelf();
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        double double86 = arrayRealVector82.dotProduct(arrayRealVector85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = arrayRealVector77.add(arrayRealVector85);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector85.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector85.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector85.mapTanhToSelf();
        double double92 = arrayRealVector69.getDistance(arrayRealVector85);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector69.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(abstractRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-32.0d) + "'", double71 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 100.0d + "'", double86 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(realVector93);
    }

    @Test
    public void test1050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1050");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.mapUlp();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector23.mapMultiplyToSelf(10.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.0d + "'", double26 == 42.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test1051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1051");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.subtract(realVector38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector33.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector33.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector30.ebeDivide(arrayRealVector33);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAbsToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector49.subtract(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapExpToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        double double67 = arrayRealVector63.dotProduct(arrayRealVector66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector58.add(arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector49.add(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector49.append(100.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector46.projection(arrayRealVector49);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(arrayRealVector75);
    }

    @Test
    public void test1052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1052");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) 10L);
        double double18 = arrayRealVector12.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (int) '#', (double) ' ');
        double[] doubleArray23 = new double[] {};
        double[] doubleArray25 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, doubleArray25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector22.append(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapLog10();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix30 = arrayRealVector12.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector28);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 14.35414242816297d + "'", double18 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]");
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test1053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1053");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1054");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapSqrt();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        double double18 = arrayRealVector16.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector6.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        boolean boolean26 = arrayRealVector2.equals((java.lang.Object) arrayRealVector25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapSqrt();
        double[] doubleArray37 = arrayRealVector29.getData();
        double double38 = arrayRealVector25.getL1Distance(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0]");
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.839071529076453d + "'", double38 == 10.839071529076453d);
    }

    @Test
    public void test1055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1055");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector2.mapMultiplyToSelf(1.6329299089739802d);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector2.mapPowToSelf(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test1056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1056");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapUlpToSelf();
        double double6 = arrayRealVector2.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 6.0d + "'", double6 == 6.0d);
    }

    @Test
    public void test1057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1057");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector33.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.subtract(openMapRealVector36);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1058");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapPowToSelf(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.0d + "'", double26 == 42.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test1059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1059");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test1060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1060");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        double[] doubleArray6 = arrayRealVector2.getDataRef();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector19.mapDivideToSelf((double) (byte) 0);
        int int24 = arrayRealVector19.getDimension();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.mapSin();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.projection(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector2.mapCeilToSelf();
        boolean boolean28 = arrayRealVector2.isInfinite();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector2.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test1061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1061");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1062");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector5.ebeDivide(realVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector5.mapSubtract(23.978952727983707d);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector5.mapPowToSelf(434.7112767430374d);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector30.add(arrayRealVector38);
        double[] doubleArray41 = arrayRealVector40.getDataRef();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapSqrt();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAbsToSelf();
        double double68 = arrayRealVector66.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector56.add(arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector66.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector66.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector44.projection(realVector73);
        double double75 = arrayRealVector40.getLInfDistance(realVector74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = arrayRealVector5.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector40.mapFloorToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[14.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1063");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1064");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        double double38 = arrayRealVector28.dotProduct(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.mapUlpToSelf();
        double[] doubleArray40 = arrayRealVector28.toArray();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        openMapRealVector43.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector46.unitVector();
        double double48 = arrayRealVector28.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector47);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-61.787362320756856d) + "'", double38 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[7.105427357601002E-15]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 7.105427357601002E-15d + "'", double48 == 7.105427357601002E-15d);
    }

    @Test
    public void test1065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1065");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector2.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1066");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapPow((-32.0d));
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test1067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1067");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapAsin();
        double[] doubleArray40 = new double[] { 9.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector37.ebeMultiply(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[9.0]");
        org.junit.Assert.assertNotNull(openMapRealVector42);
    }

    @Test
    public void test1068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1068");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector36.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector2.subtract(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 42.0d + "'", double39 == 42.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test1069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1069");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.mapTanh();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapSin();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector70.mapExpToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        double double79 = arrayRealVector75.dotProduct(arrayRealVector78);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector70.add(arrayRealVector78);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector70.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector70.mapAtanToSelf();
        double double83 = arrayRealVector70.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = arrayRealVector66.ebeDivide(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = arrayRealVector2.ebeDivide(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.4711276743037347d + "'", double39 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 42.0d + "'", double64 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 100.0d + "'", double79 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 8.881784197001252E-16d + "'", double83 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector84);
        org.junit.Assert.assertNotNull(arrayRealVector85);
    }

    @Test
    public void test1070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1070");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test1071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1071");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, Double.POSITIVE_INFINITY);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector17, arrayRealVector20);
        arrayRealVector17.set((double) (-1));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector17.append((org.apache.commons.math.linear.RealVector) openMapRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector30.mapAcos();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector4.add(realVector32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test1072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1072");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapDivideToSelf((double) (byte) 0);
        int int54 = arrayRealVector49.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector32.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector49.mapSubtract((double) 1L);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector49.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector2.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector2.mapSignum();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
    }

    @Test
    public void test1073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1073");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapPow((double) 0);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.append((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapUlpToSelf();
        double[] doubleArray27 = arrayRealVector23.getData();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.subtract(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[1.7763568394002505E-15]");
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test1074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1074");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapRintToSelf();
        openMapRealVector20.setEntry(0, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector20.mapCbrt();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40, true);
        double[] doubleArray43 = arrayRealVector40.getDataRef();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector20.append(doubleArray43);
        double double45 = openMapRealVector13.getDistance(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0]");
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 9.0d + "'", double45 == 9.0d);
    }

    @Test
    public void test1075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1075");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10);
        org.apache.commons.math.linear.RealVector realVector2 = openMapRealVector1.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(realVector2);
    }

    @Test
    public void test1076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1076");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        boolean boolean13 = arrayRealVector10.isInfinite();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapTan();
        double double27 = arrayRealVector10.getDistance(arrayRealVector24);
        double[] doubleArray28 = arrayRealVector24.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.0d + "'", double27 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
    }

    @Test
    public void test1077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1077");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapCoshToSelf();
        double[] doubleArray23 = arrayRealVector21.getData();
        java.lang.String str24 = arrayRealVector21.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{(NaN)}" + "'", str24, "{(NaN)}");
    }

    @Test
    public void test1078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1078");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(1, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1079");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector13.mapAcosToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector27.ebeDivide(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapExpm1ToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor43 = arrayRealVector39.iterator();
        double[] doubleArray44 = arrayRealVector39.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector13.projection(doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector2.ebeDivide(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(entryItor43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[Infinity]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
    }

    @Test
    public void test1080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1080");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapSqrt();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        double double35 = arrayRealVector33.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector23.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapLogToSelf();
        arrayRealVector33.set(1.0d);
        double[] doubleArray41 = new double[] {};
        double[] doubleArray43 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, doubleArray43);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapSubtract(10.0d);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAbsToSelf();
        double double51 = arrayRealVector49.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.mapAtan();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        double double57 = arrayRealVector55.getNorm();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapAtan();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAbsToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector61.subtract(realVector66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector61.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector61.mapAsinToSelf();
        double double71 = arrayRealVector55.getLInfDistance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector49, (org.apache.commons.math.linear.RealVector) arrayRealVector61);
        double[] doubleArray73 = arrayRealVector61.toArray();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector44.add(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector77.mapAbsToSelf();
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector81.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector77.subtract(realVector82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector77.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73, arrayRealVector77);
        arrayRealVector33.setSubVector((int) (byte) 0, doubleArray73);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector15.append(doubleArray73);
        double double88 = arrayRealVector15.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0]");
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 10.0d + "'", double51 == 10.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN]");
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 0.2296663502626633d + "'", double88 == 0.2296663502626633d);
    }

    @Test
    public void test1081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1081");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 0, 0, (double) '#');
    }

    @Test
    public void test1082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1082");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector2.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test1083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1083");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        double[] doubleArray21 = arrayRealVector17.getDataRef();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector9.ebeDivide(doubleArray21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1084");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapDivideToSelf(1.0d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapCbrtToSelf();
        double double36 = arrayRealVector17.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector17.mapAdd((-50.05532728089162d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + (-0.4641588833612779d) + "'", double36 == (-0.4641588833612779d));
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1085");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (short) -1);
        double double3 = openMapRealVector2.getL1Norm();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1086");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 0, 0.0d);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1087");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapDivideToSelf((double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test1088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1088");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector26 = arrayRealVector24.copy();
        double[] doubleArray27 = arrayRealVector24.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, (org.apache.commons.math.linear.RealVector) arrayRealVector24);
        int int29 = arrayRealVector12.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(abstractRealVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
    }

    @Test
    public void test1089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1089");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.append(realVector16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector31.ebeDivide(arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector20.subtract(arrayRealVector43);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector43.ebeDivide(arrayRealVector48);
        java.lang.String str53 = arrayRealVector48.toString();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.mapLog1pToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        double double66 = arrayRealVector62.dotProduct(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector57.add(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector57.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector57.mapSinh();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector57.mapCeil();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector57.mapSin();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector57.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector57.mapMultiplyToSelf(1.6853169696133175d);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector57.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector48.ebeMultiply(realVector76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector48.mapExpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector2.subtract(arrayRealVector48);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(arrayRealVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "{-42}" + "'", str53, "{-42}");
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(arrayRealVector79);
    }

    @Test
    public void test1090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1090");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        boolean boolean36 = openMapRealVector14.isNaN();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        double double43 = arrayRealVector41.getNorm();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapAtan();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix52 = arrayRealVector41.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        double[] doubleArray53 = arrayRealVector47.getData();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector37.setSubVector((int) (short) 100, doubleArray53);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[NaN]");
    }

    @Test
    public void test1091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1091");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        double double31 = arrayRealVector20.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector12.mapAbs();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector12.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 6.0d + "'", double31 == 6.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1092");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        boolean boolean36 = openMapRealVector14.isNaN();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapDivideToSelf((double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test1093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1093");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) '4');
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapToSelf(univariateRealFunction2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1094");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapMultiplyToSelf(10.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = arrayRealVector2.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector2.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test1095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1095");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapTanhToSelf();
        java.lang.Class<?> wildcardClass5 = realVector4.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1096");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1097");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapTanhToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapCbrt();
        boolean boolean31 = arrayRealVector21.equals((java.lang.Object) arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.mapSubtract(1.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.add(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector40.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector40.mapAtanToSelf();
        double double53 = arrayRealVector36.getLInfDistance(arrayRealVector40);
        double double54 = arrayRealVector27.getL1Distance(arrayRealVector36);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.set(1, arrayRealVector27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 1.4711276743037338d + "'", double53 == 1.4711276743037338d);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2.8830147538592357d + "'", double54 == 2.8830147538592357d);
    }

    @Test
    public void test1098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1098");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ', 23.92357071360495d);
    }

    @Test
    public void test1099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1099");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapSignum();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1100");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapCeil();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapLogToSelf();
        double double11 = arrayRealVector5.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.874591382923689d + "'", double11 == 0.874591382923689d);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test1101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1101");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        boolean boolean36 = arrayRealVector25.isInfinite();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector25.mapAddToSelf((-0.4641588833612779d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1102");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        double double38 = arrayRealVector32.getL1Norm();
        arrayRealVector32.set(1.0d);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector32.add(arrayRealVector43);
        boolean boolean47 = arrayRealVector32.isNaN();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector32.mapUlp();
        org.apache.commons.math.linear.RealMatrix realMatrix49 = arrayRealVector2.outerProduct(realVector48);
        arrayRealVector2.set(23.978952727983707d);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector2.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.35414242816297d + "'", double38 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test1103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1103");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector5.ebeDivide(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector5.mapExpm1();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double28 = openMapRealVector26.getEntry(0);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector31.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(realVector41);
        double[] doubleArray43 = arrayRealVector42.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43, true);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector26.append(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = arrayRealVector5.outerProduct(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(realMatrix47);
    }

    @Test
    public void test1104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1104");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector24.add(openMapRealVector27);
        int int30 = openMapRealVector27.getDimension();
        double double31 = openMapRealVector27.getSparcity();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector27.mapUlp();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector27.sparseIterator();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = openMapRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector17.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(entryItor33);
        org.junit.Assert.assertNotNull(realMatrix34);
        org.junit.Assert.assertNotNull(openMapRealVector35);
    }

    @Test
    public void test1105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1105");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1106");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = arrayRealVector12.sparseIterator();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapAtan();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector24.mapAsinToSelf();
        double double34 = arrayRealVector18.getLInfDistance(arrayRealVector24);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector24.ebeMultiply(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector12.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        double double49 = arrayRealVector47.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 6.0d + "'", double49 == 6.0d);
    }

    @Test
    public void test1107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1107");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector8.mapUlpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = arrayRealVector8.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.String str36 = arrayRealVector8.toString();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        double[] doubleArray50 = arrayRealVector49.getDataRef();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector8.subtract(doubleArray50);
        double double52 = openMapRealVector4.getLInfDistance(doubleArray50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector4.append((-6.853169696133174d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realMatrix35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "{0}" + "'", str36, "{0}");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 4.3541424281629695d + "'", double52 == 4.3541424281629695d);
        org.junit.Assert.assertNotNull(openMapRealVector54);
    }

    @Test
    public void test1108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1108");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test1109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1109");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector25.mapTanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.add(realVector52);
        double[] doubleArray54 = arrayRealVector39.getData();
        arrayRealVector25.set((int) (short) 0, arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector25.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[10.0]");
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1110");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapSubtractToSelf((double) 0L);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        double double20 = arrayRealVector17.getL1Norm();
        double double21 = arrayRealVector10.getLInfDistance(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapTan();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.mapSinhToSelf();
        double[] doubleArray24 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double25 = arrayRealVector17.dotProduct(doubleArray24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 42.0d + "'", double20 == 42.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1111");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapMultiplyToSelf(4.35414242816297d);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.append(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test1112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1112");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapMultiplyToSelf((double) 1.0f);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector20.mapSinh();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector20.mapLog();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapAbsToSelf();
        double double65 = arrayRealVector50.getL1Distance(arrayRealVector54);
        double double66 = arrayRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapSqrt();
        double[] doubleArray77 = arrayRealVector69.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector20.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix80 = arrayRealVector14.outerProduct(arrayRealVector20);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 8.881784197001252E-16d + "'", double66 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realMatrix80);
    }

    @Test
    public void test1113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1113");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double3 = openMapRealVector2.getSparcity();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapAtanToSelf();
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1114");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector13.append((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.6329299089739802d + "'", double42 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector52);
    }

    @Test
    public void test1115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1115");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapCbrtToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(realVector11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector12.unitVector();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAddToSelf((double) 100L);
        double[] doubleArray29 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = openMapRealVector27.outerProduct(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        openMapRealVector33.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector40.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector37.add(openMapRealVector40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector40.mapAddToSelf((double) 100L);
        double[] doubleArray46 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix47 = openMapRealVector44.outerProduct(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector27.append(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapMultiplyToSelf(84.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector13.add((org.apache.commons.math.linear.RealVector) arrayRealVector51);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix47);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test1116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1116");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) ' ', (int) (byte) 1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1117");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExpm1ToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        double[] doubleArray22 = arrayRealVector19.getDataRef();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.ebeDivide(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapSubtractToSelf((double) '4');
        double double29 = arrayRealVector26.getNorm();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapAbsToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, false);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 42.0d + "'", double29 == 42.0d);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test1118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1118");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        boolean boolean18 = openMapRealVector17.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector17.mapAdd(1.6329299089739802d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector23.mapAdd((double) ' ');
        double[] doubleArray29 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, true);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapCos();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector34.mapExpm1();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        openMapRealVector42.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector49.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector46.add(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector49.mapAddToSelf((double) 100L);
        double[] doubleArray55 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector53.outerProduct(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector34.add(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31, doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector26.subtract(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double60 = openMapRealVector20.getDistance(doubleArray55);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(openMapRealVector59);
    }

    @Test
    public void test1119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1119");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.add(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.projection((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapSqrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double43 = arrayRealVector39.getEntry((int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test1120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1120");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test1121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1121");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, false);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapInvToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector43.setEntry(10, 43.47112767430374d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test1122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1122");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1123");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = arrayRealVector12.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.mapToSelf(univariateRealFunction21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realMatrix20);
    }

    @Test
    public void test1124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1124");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.mapAsinToSelf();
        double double18 = arrayRealVector2.getLInfDistance(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapCoshToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapSqrt();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        double double34 = arrayRealVector32.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector22.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.getSubVector((int) (short) 1, 0);
        double double39 = arrayRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10993.232920103324d + "'", double39 == 10993.232920103324d);
    }

    @Test
    public void test1125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1125");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        double double6 = arrayRealVector2.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 4.35414242816297d + "'", double6 == 4.35414242816297d);
    }

    @Test
    public void test1126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1126");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapLog();
        boolean boolean54 = arrayRealVector12.equals((java.lang.Object) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(realVector56);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1127");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.unitVector();
        double double22 = openMapRealVector17.getSparcity();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 1.0d + "'", double22 == 1.0d);
    }

    @Test
    public void test1128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1128");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1129");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, Double.POSITIVE_INFINITY);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (short) 100, (int) '#');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1130");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector10.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test1131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1131");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test1132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1132");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((-32.0d));
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector13.mapMultiply((-32.0d));
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector13.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test1133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1133");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector5.ebeDivide(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        double double29 = arrayRealVector27.getNorm();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapAtan();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        double double35 = arrayRealVector33.getNorm();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAtan();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector39.mapAsinToSelf();
        double double49 = arrayRealVector33.getLInfDistance(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27, (org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector27.mapCosToSelf();
        double double52 = arrayRealVector5.getDistance(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 11.839071529076454d + "'", double52 == 11.839071529076454d);
    }

    @Test
    public void test1134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1134");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (short) 10);
    }

    @Test
    public void test1135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1135");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, (int) (byte) 1, 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
    }

    @Test
    public void test1136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1136");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapLog1p();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1137");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, 1.6853169696133175d);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAbsToSelf();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.subtract(realVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.mapSqrt();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        double double17 = arrayRealVector15.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector5.add(arrayRealVector15);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtractToSelf((double) '4');
        double double24 = arrayRealVector21.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.subtract(arrayRealVector21);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        double double37 = arrayRealVector28.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        double double38 = arrayRealVector21.getLInfDistance(arrayRealVector28);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapExpToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double50 = arrayRealVector46.dotProduct(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector41.add(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector41.mapUlpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double64 = arrayRealVector60.dotProduct(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector55.add(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = arrayRealVector41.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector65);
        java.lang.String str69 = arrayRealVector41.toString();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector41.subtract(doubleArray83);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray83, false);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector28.ebeDivide(doubleArray83);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = openMapRealVector2.append(doubleArray83);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 10.0d + "'", double17 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 42.0d + "'", double24 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 8.528872325696266d + "'", double37 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 43.47112767430374d + "'", double38 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 100.0d + "'", double50 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realMatrix68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "{0}" + "'", str69, "{0}");
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(openMapRealVector88);
    }

    @Test
    public void test1138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1138");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        arrayRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow(14.35414242816297d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(2, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector9.mapCbrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = arrayRealVector2.getLInfDistance(realVector11);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(openMapRealVector10);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test1139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1139");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.mapAdd((double) (short) -1);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapPow(23.92357071360495d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1140");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapAsinToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapInvToSelf();
        double double22 = arrayRealVector2.getLInfDistance(arrayRealVector18);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue(Double.isNaN(double22));
    }

    @Test
    public void test1141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1141");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        int int24 = openMapRealVector21.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.copy();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCos();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapExpm1();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        openMapRealVector37.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector44.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector41.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector44.mapAddToSelf((double) 100L);
        double[] doubleArray50 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector48.outerProduct(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector29.add(doubleArray50);
        org.apache.commons.math.linear.RealMatrix realMatrix53 = openMapRealVector25.outerProduct(doubleArray50);
        double double54 = openMapRealVector10.getDistance(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realMatrix53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 0.6321205588285577d + "'", double54 == 0.6321205588285577d);
    }

    @Test
    public void test1142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1142");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector12.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1143");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        openMapRealVector10.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector14.add(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAddToSelf((double) 100L);
        double[] doubleArray23 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = openMapRealVector21.outerProduct(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector7, (org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector7.mapCbrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix27 = openMapRealVector2.outerProduct(realVector26);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix24);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test1144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1144");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        double double18 = arrayRealVector2.getLInfNorm();
        double double19 = arrayRealVector2.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector2.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.0d + "'", double18 == 6.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test1145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1145");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1146");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapPow((double) 10.0f);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector30.ebeDivide(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector19.subtract(arrayRealVector42);
        double double45 = arrayRealVector9.getLInfDistance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector9.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test1147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1147");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector46.mapExp();
        arrayRealVector46.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(realVector68);
    }

    @Test
    public void test1148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1148");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapTan();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapSubtract((double) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAdd((double) (byte) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        openMapRealVector12.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector16.add(openMapRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector19.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector19);
        int int24 = openMapRealVector23.getDimension();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        openMapRealVector27.set(10.0d);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        int int42 = openMapRealVector39.getDimension();
        double double43 = openMapRealVector39.getSparcity();
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector39.mapUlpToSelf();
        double double45 = openMapRealVector27.getDistance(openMapRealVector39);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapCbrt();
        double double52 = openMapRealVector39.getDistance(realVector51);
        double[] doubleArray55 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, true);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector39.add(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector39.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector23.append(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector23.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector9.subtract(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.0d + "'", double43 == 1.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 10.0d + "'", double45 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.6329299089739802d + "'", double52 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
    }

    @Test
    public void test1149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1149");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector14.mapAtan();
        double[] doubleArray35 = openMapRealVector14.getData();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAddToSelf((double) 100L);
        double[] doubleArray51 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = openMapRealVector49.outerProduct(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector14.add(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1150");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector10.set(1.4711276743037347d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        int int25 = openMapRealVector22.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.copy();
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector10.append(realVector27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAddToSelf((double) 100L);
        double[] doubleArray44 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = openMapRealVector42.outerProduct(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44, false);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector10.outerProduct(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(realMatrix48);
    }

    @Test
    public void test1151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1151");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector14.unitVector();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test1152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1152");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        double[] doubleArray27 = arrayRealVector15.toArray();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.mapCosToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        double[] doubleArray39 = new double[] {};
        double[] doubleArray41 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39, doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtract(10.0d);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAtan();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        double double55 = arrayRealVector53.getNorm();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapAtan();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector59.subtract(realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector59.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector59.mapAsinToSelf();
        double double69 = arrayRealVector53.getLInfDistance(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47, (org.apache.commons.math.linear.RealVector) arrayRealVector59);
        double[] doubleArray71 = arrayRealVector59.toArray();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector42.add(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector31.subtract(doubleArray71);
        double double74 = arrayRealVector15.dotProduct(doubleArray71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(realVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector15.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[100.0]");
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10.0d + "'", double55 == 10.0d);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue(Double.isNaN(double74));
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test1153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1153");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (-6.853169696133174d));
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1154");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double double13 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSinToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapPow((double) 0);
        double double36 = arrayRealVector21.getLInfDistance(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector21.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(realVector18, arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector2.add(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector2.mapMultiply(1713659.1765230843d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6.0d + "'", double13 == 6.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5.64585757183703d + "'", double36 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test1155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1155");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtan();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapDivideToSelf((double) (short) 0);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapLog1pToSelf();
        double double27 = arrayRealVector24.getLInfNorm();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector14.set((int) (short) -1, arrayRealVector24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 6.0d + "'", double27 == 6.0d);
    }

    @Test
    public void test1156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1156");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (short) -1, 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1157");
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 14.355979641962135d, 1.4711276743037347d, 14.35414242816297d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        double double6 = openMapRealVector5.getSparcity();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        openMapRealVector10.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector10.mapRintToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double16 = openMapRealVector5.getLInfDistance(realVector15);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1158");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector5.mapRintToSelf();
        openMapRealVector5.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        openMapRealVector16.unitize();
        double double20 = openMapRealVector5.getL1Distance(openMapRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapTanhToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapCbrt();
        boolean boolean41 = arrayRealVector31.equals((java.lang.Object) arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.mapSubtract(1.0d);
        double double44 = openMapRealVector16.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector37.mapAsin();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapExp();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector37.mapExpm1ToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector2.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector37);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 99.0d + "'", double20 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 3.3541424281629704d + "'", double44 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test1159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1159");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 2);
    }

    @Test
    public void test1160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1160");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1161");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 0, 0.0d);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtan();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1162");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(10, (double) 'a');
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapCbrt();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1163");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        double double39 = openMapRealVector37.getEntry(0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector37.sparseIterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapSqrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector37.projection((org.apache.commons.math.linear.RealVector) arrayRealVector42);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.0d + "'", double39 == 1.0d);
        org.junit.Assert.assertNotNull(entryItor40);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test1164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1164");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapFloorToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        openMapRealVector53.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector53.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector53.mapAddToSelf((double) 100);
        double double61 = arrayRealVector49.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector53);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector49.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1212530.0d + "'", double61 == 1212530.0d);
        org.junit.Assert.assertNotNull(realVector62);
    }

    @Test
    public void test1165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1165");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector14.unitVector();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapSqrt();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        double double41 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector29.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector39.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector39.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapAtan();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector14.append((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector39.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test1166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1166");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1167");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTan();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSin();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapLogToSelf();
        boolean boolean21 = arrayRealVector15.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.4711276743037347d + "'", double11 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.528872325696266d + "'", double16 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1168");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector14.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector58.subtract(doubleArray83);
        double double85 = openMapRealVector14.getLInfDistance(doubleArray83);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector14.mapAddToSelf((double) '#');
        double[] doubleArray88 = openMapRealVector87.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector11.ebeMultiply(doubleArray88);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 13.35414242816297d + "'", double85 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[36.0]");
        org.junit.Assert.assertNotNull(openMapRealVector89);
    }

    @Test
    public void test1169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1169");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        double double55 = arrayRealVector53.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapExpm1();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapAtan();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAbsToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector66.subtract(realVector71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector66.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector66.mapAsinToSelf();
        double double76 = arrayRealVector60.getLInfDistance(arrayRealVector66);
        double double77 = arrayRealVector53.getL1Distance(arrayRealVector66);
        double[] doubleArray78 = arrayRealVector66.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-32.0d) + "'", double55 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue(Double.isNaN(double76));
        org.junit.Assert.assertTrue(Double.isNaN(double77));
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[NaN]");
    }

    @Test
    public void test1170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1170");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector19.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1171");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        java.lang.String str35 = arrayRealVector30.toString();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector38.mapAbsToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector30.subtract(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector38.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-42}" + "'", str35, "{-42}");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
    }

    @Test
    public void test1172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1172");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 99.0d, 1.4711276743037338d, 0.3141504231237282d, (-1.6433183218042784d), 59.39696961966999d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5, 59.39696961966999d);
        org.junit.Assert.assertNotNull(doubleArray5);
    }

    @Test
    public void test1173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1173");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        double double3 = openMapRealVector2.getL1Norm();
        double[] doubleArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.append(doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test1174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1174");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        boolean boolean32 = openMapRealVector1.isNaN();
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector1.mapLog10();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        double double45 = arrayRealVector36.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapLogToSelf();
        double double54 = arrayRealVector50.getL1Norm();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double59 = arrayRealVector50.getL1Distance(arrayRealVector58);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAbsToSelf();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector62.subtract(realVector67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector62.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector62.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector62.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(realVector72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector76.mapSubtractToSelf((double) '4');
        double double79 = arrayRealVector76.getNorm();
        double double80 = arrayRealVector73.getL1Distance(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = arrayRealVector50.add(arrayRealVector76);
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector84.mapAtanToSelf();
        double double86 = arrayRealVector76.dotProduct(realVector85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = arrayRealVector43.add(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector76.mapAsinToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double89 = openMapRealVector1.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector76);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 8.528872325696266d + "'", double45 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 1.4711276743037347d + "'", double54 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 8.528872325696266d + "'", double59 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 42.0d + "'", double79 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double80));
        org.junit.Assert.assertNotNull(arrayRealVector81);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + (-61.787362320756856d) + "'", double86 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector87);
        org.junit.Assert.assertNotNull(realVector88);
    }

    @Test
    public void test1175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1175");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.String str34 = arrayRealVector28.toString();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapSinToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapSqrt();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        double double50 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.add(arrayRealVector48);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector52 = arrayRealVector48.copy();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector55.subtract(realVector60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector55.mapSqrt();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAbsToSelf();
        double double67 = arrayRealVector65.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector55.add(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector65.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector48.append((org.apache.commons.math.linear.RealVector) arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector48.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector48.mapCoshToSelf();
        double double74 = arrayRealVector28.getLInfDistance(arrayRealVector48);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-42}" + "'", str34, "{-42}");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(abstractRealVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 10.0d + "'", double67 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 10.91681452290487d + "'", double74 == 10.91681452290487d);
    }

    @Test
    public void test1176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1176");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapPow((double) 10.0f);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector9.mapFloorToSelf();
        double double18 = arrayRealVector9.getNorm();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector21.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector21.mapSinToSelf();
        double double32 = arrayRealVector9.getL1Distance(realVector31);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.0d + "'", double18 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
    }

    @Test
    public void test1177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1177");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        double double33 = arrayRealVector24.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.ebeDivide(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector35.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector35.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.528872325696266d + "'", double33 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test1178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1178");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapLog10();
        int int21 = openMapRealVector19.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test1179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1179");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        double[] doubleArray18 = arrayRealVector15.getDataRef();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapAtanToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        double double33 = arrayRealVector31.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAtan();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = arrayRealVector31.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapDivide((double) (byte) -1);
        double[] doubleArray51 = arrayRealVector45.getData();
        double double52 = arrayRealVector37.dotProduct(doubleArray51);
        double double53 = arrayRealVector21.dotProduct(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, doubleArray51);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector2.ebeMultiply(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[-42.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double52));
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + (-61.787362320756856d) + "'", double53 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1180");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.4711276743037347d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapSqrt();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        double double18 = arrayRealVector16.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector6.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapInvToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector3.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 10.0d + "'", double18 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector24);
    }

    @Test
    public void test1181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1181");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = arrayRealVector12.sparseIterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapSinToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapPow((double) 0);
        double double39 = arrayRealVector24.getLInfDistance(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector24.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(realVector21, arrayRealVector24);
        arrayRealVector12.set((int) (short) 0, arrayRealVector24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 5.64585757183703d + "'", double39 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1182");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(100, 84.0d);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.unitVector();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1183");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector2.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1184");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(realVector11, arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test1185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1185");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector33.mapAdd(1.6329299089739802d);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        int int48 = openMapRealVector45.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector35.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector49.mapSin();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test1186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1186");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1187");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1188");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector2.unitVector();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1189");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray14 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test1190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1190");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector26.add(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapTanhToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapCbrt();
        boolean boolean44 = arrayRealVector34.equals((java.lang.Object) arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector40.mapAcosToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.subtract(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector48.mapSinToSelf();
        double[] doubleArray58 = arrayRealVector48.getDataRef();
        double double59 = arrayRealVector40.getDistance(doubleArray58);
        double double60 = arrayRealVector16.getL1Distance(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-0.5440211108893698]");
        org.junit.Assert.assertTrue(Double.isNaN(double59));
        org.junit.Assert.assertTrue(Double.isNaN(double60));
    }

    @Test
    public void test1191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1191");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double3 = openMapRealVector1.getEntry(0);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector6.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(realVector16);
        double[] doubleArray18 = arrayRealVector17.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, true);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector1.append(doubleArray18);
        double[] doubleArray22 = openMapRealVector21.toArray();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, NaN]");
    }

    @Test
    public void test1192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1192");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapLog();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double9 = openMapRealVector7.getEntry(0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (byte) 10, 2.3978952727983707d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector7.append(openMapRealVector15);
        double double17 = openMapRealVector2.getDistance(openMapRealVector15);
        int int18 = openMapRealVector15.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 10 + "'", int18 == 10);
    }

    @Test
    public void test1193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1193");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector17.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector17.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapTanh();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSignumToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector17, false);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.setSubVector(100, (org.apache.commons.math.linear.RealVector) arrayRealVector17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test1194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1194");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector24.mapAdd((double) ' ');
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector24.mapAsinToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector12.outerProduct(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector12.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test1195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1195");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapSqrt();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        double double30 = arrayRealVector28.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector18.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector28.mapUlp();
        double double33 = arrayRealVector15.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 10.0d + "'", double30 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 200.0d + "'", double33 == 200.0d);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1196");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAbsToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, true);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test1197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1197");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector9.add(realVector22);
        double[] doubleArray24 = arrayRealVector9.getData();
        openMapRealVector4.setSubVector((int) (short) 0, doubleArray24);
        boolean boolean26 = openMapRealVector4.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1198");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapSubtractToSelf(14.354142428153194d);
        boolean boolean8 = arrayRealVector2.isNaN();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCosh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1199");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtan();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapDivideToSelf((double) (short) 0);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector21);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector21.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapLog();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector14.setSubVector((int) '#', (org.apache.commons.math.linear.RealVector) arrayRealVector33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 35 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test1200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1200");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector2.mapExp();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test1201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1201");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector6.subtract(openMapRealVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test1202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1202");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapSqrt();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector79.mapAbsToSelf();
        double double81 = arrayRealVector79.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector69.add(arrayRealVector79);
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapSubtractToSelf((double) '4');
        double double88 = arrayRealVector85.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = arrayRealVector79.subtract(arrayRealVector85);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector89.mapMultiplyToSelf((double) 10);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector89.mapAddToSelf(1.0d);
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector89.mapDivideToSelf(1.0d);
        org.apache.commons.math.linear.RealMatrix realMatrix96 = arrayRealVector60.outerProduct(arrayRealVector89);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 10.0d + "'", double81 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 42.0d + "'", double88 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector95);
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test1203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1203");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapExp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1204");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAddToSelf((double) 100);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapCbrt();
        boolean boolean39 = arrayRealVector29.equals((java.lang.Object) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector35);
        double[] doubleArray43 = arrayRealVector42.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[101.15697725118001, 4.35414242816297]");
    }

    @Test
    public void test1205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1205");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1206");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.String str34 = arrayRealVector28.toString();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "{-42}" + "'", str34, "{-42}");
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test1207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1207");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 1.0E-12d);
        boolean boolean5 = openMapRealVector4.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector4.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(openMapRealVector6);
    }

    @Test
    public void test1208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1208");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        arrayRealVector10.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test1209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1209");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapAsinToSelf();
        double[] doubleArray23 = new double[] {};
        double[] doubleArray25 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, doubleArray25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.subtract(doubleArray23);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[100.0]");
    }

    @Test
    public void test1210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1210");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        double double8 = arrayRealVector5.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.0d + "'", double8 == 6.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test1211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1211");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        boolean boolean16 = arrayRealVector12.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test1212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1212");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        double double23 = arrayRealVector19.getL1Norm();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double28 = arrayRealVector19.getL1Distance(arrayRealVector27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector31.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(realVector41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        double double49 = arrayRealVector42.getL1Distance(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector19.add(arrayRealVector45);
        double double51 = arrayRealVector45.getL1Norm();
        double[] doubleArray52 = arrayRealVector45.toArray();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector12.projection(doubleArray52);
        double double54 = arrayRealVector12.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.4711276743037347d + "'", double23 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 8.528872325696266d + "'", double28 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 42.0d + "'", double51 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 2.302585092994046d + "'", double54 == 2.302585092994046d);
    }

    @Test
    public void test1213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1213");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        boolean boolean2 = openMapRealVector1.isInfinite();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector1.unitize();
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test1214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1214");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapSqrt();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        double double36 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector24.add(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector34.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.append((double) '4');
        double double42 = arrayRealVector16.getLInfDistance(arrayRealVector34);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 6.1809377208602d + "'", double42 == 6.1809377208602d);
    }

    @Test
    public void test1215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1215");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1216");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1217");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test1218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1218");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapLogToSelf();
        double double56 = arrayRealVector52.getL1Norm();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double61 = arrayRealVector52.getL1Distance(arrayRealVector60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.subtract(realVector69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector64.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector64.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector64.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(realVector74);
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapSubtractToSelf((double) '4');
        double double81 = arrayRealVector78.getNorm();
        double double82 = arrayRealVector75.getL1Distance(arrayRealVector78);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector52.add(arrayRealVector78);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector86.mapSubtractToSelf((double) '4');
        double double89 = arrayRealVector86.getNorm();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector86.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector86.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = arrayRealVector52.subtract(arrayRealVector86);
        double double93 = arrayRealVector37.getLInfDistance(arrayRealVector52);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor94 = arrayRealVector37.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.4711276743037347d + "'", double56 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8.528872325696266d + "'", double61 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 42.0d + "'", double81 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(arrayRealVector83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 42.0d + "'", double89 == 42.0d);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(arrayRealVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 11011.76174702909d + "'", double93 == 11011.76174702909d);
        org.junit.Assert.assertNotNull(entryItor94);
    }

    @Test
    public void test1219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1219");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector19.mapPow(1212530.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test1220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1220");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray14 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1221");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector2.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector2.mapMultiplyToSelf(100.0d);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAbsToSelf();
        double double72 = arrayRealVector70.getNorm();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector70.mapAtan();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAbsToSelf();
        double double78 = arrayRealVector76.getNorm();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapAtan();
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector82.mapAbsToSelf();
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector86.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector82.subtract(realVector87);
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector82.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector82.mapAsinToSelf();
        double double92 = arrayRealVector76.getLInfDistance(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector70, (org.apache.commons.math.linear.RealVector) arrayRealVector82);
        double[] doubleArray94 = arrayRealVector82.toArray();
        double double95 = arrayRealVector66.getDistance(doubleArray94);
        org.apache.commons.math.linear.RealMatrix realMatrix96 = arrayRealVector2.outerProduct(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test1222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1222");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor61 = arrayRealVector2.iterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(entryItor61);
    }

    @Test
    public void test1223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1223");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapTanToSelf();
        double[] doubleArray16 = openMapRealVector2.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[0.6483608274590866]");
    }

    @Test
    public void test1224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1224");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapSubtractToSelf(8.881784197001252E-16d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapExp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1225");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector26.map(univariateRealFunction29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
    }

    @Test
    public void test1226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1226");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (-6.853169696133174d));
    }

    @Test
    public void test1227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1227");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        java.lang.String str22 = arrayRealVector16.toString();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.append(43.47112767430374d);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-42}" + "'", str22, "{-42}");
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1228");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTan();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapLog10ToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector33.mapUlpToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapExpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        double double56 = arrayRealVector52.dotProduct(arrayRealVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector47.add(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = arrayRealVector33.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector63.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector63.mapCos();
        boolean boolean68 = arrayRealVector57.equals((java.lang.Object) arrayRealVector63);
        double double69 = arrayRealVector28.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector70.mapAsinToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector74.mapExpToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        double double83 = arrayRealVector79.dotProduct(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = arrayRealVector74.add(arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector84.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector84.mapCbrt();
        double double87 = arrayRealVector84.getNorm();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector84.mapExpToSelf();
        double double89 = openMapRealVector70.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector84);
        double double90 = arrayRealVector10.getLInfDistance(arrayRealVector84);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 14.354142428153194d + "'", double69 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 14.35414242816297d + "'", double87 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 1713659.1765230843d + "'", double89 == 1713659.1765230843d);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 1713660.5254694945d + "'", double90 == 1713660.5254694945d);
    }

    @Test
    public void test1229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1229");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        arrayRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow(14.35414242816297d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.map(univariateRealFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1230");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        openMapRealVector20.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector11.add(openMapRealVector20);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector24.mapMultiply(1.749534445339284d);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector24.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test1231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1231");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        int int27 = openMapRealVector24.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.copy();
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector41.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector28.subtract(openMapRealVector41);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector28.mapInv();
        double double46 = openMapRealVector9.dotProduct(openMapRealVector28);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor47 = openMapRealVector28.iterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(entryItor47);
    }

    @Test
    public void test1232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1232");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAtan();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        double double45 = arrayRealVector29.getLInfDistance(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, (org.apache.commons.math.linear.RealVector) arrayRealVector35);
        double[] doubleArray47 = arrayRealVector35.toArray();
        double double48 = arrayRealVector19.getDistance(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector6.subtract(doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47, 13.35414242816297d);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector51.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test1233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1233");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double double6 = openMapRealVector5.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapSubtractToSelf((double) '4');
        double double12 = arrayRealVector9.getNorm();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapDivide((double) (byte) -1);
        double[] doubleArray15 = arrayRealVector9.getData();
        double double16 = openMapRealVector5.getDistance(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 42.0d + "'", double12 == 42.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-42.0]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 142.0d + "'", double16 == 142.0d);
    }

    @Test
    public void test1234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1234");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector18.ebeDivide(arrayRealVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = arrayRealVector31.outerProduct(arrayRealVector62);
        double double68 = arrayRealVector12.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector69 = arrayRealVector62.copy();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        double double76 = arrayRealVector72.dotProduct(arrayRealVector75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapCeilToSelf();
        double double78 = arrayRealVector62.getDistance(arrayRealVector75);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(abstractRealVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 52.0d + "'", double78 == 52.0d);
    }

    @Test
    public void test1235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1235");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.append(26.0d);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapDivideToSelf(10.839071529076453d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test1236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1236");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapMultiplyToSelf((double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1237");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapDivideToSelf(1.0d);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapPowToSelf(6.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test1238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1238");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector14.mapCosToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector29.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector29.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector29.mapSinh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector29.mapLog();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector14.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector45 = arrayRealVector29.copy();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector29.mapAsin();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector29.mapDivideToSelf(10.839071529076453d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(abstractRealVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test1239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1239");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = arrayRealVector12.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExp();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(realVector16);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray20 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector24.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, arrayRealVector24);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        double double43 = arrayRealVector41.getNorm();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapAtan();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAtan();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector53.subtract(realVector58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector53.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector53.mapAsinToSelf();
        double double63 = arrayRealVector47.getLInfDistance(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41, (org.apache.commons.math.linear.RealVector) arrayRealVector53);
        double[] doubleArray65 = arrayRealVector53.toArray();
        double double66 = arrayRealVector37.getDistance(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector24.subtract(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector24.mapAdd(3.6249728132842707d);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector24.mapCeilToSelf();
        double double71 = arrayRealVector17.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue(Double.isNaN(double71));
    }

    @Test
    public void test1240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1240");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        double[] doubleArray18 = arrayRealVector12.getDataRef();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapSqrtToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix33 = arrayRealVector12.outerProduct(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector12.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1241");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.mapAsinToSelf();
        double double18 = arrayRealVector2.getLInfDistance(arrayRealVector8);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector21.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector8.ebeMultiply(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector21.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test1242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1242");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        double double24 = arrayRealVector16.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 6.0d + "'", double24 == 6.0d);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1243");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapSubtract(1.0d);
        arrayRealVector16.set((double) 0);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapTanhToSelf();
        int int26 = arrayRealVector16.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test1244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1244");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1245");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        arrayRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector2.mapSignum();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1246");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, 0);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.add(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapTanhToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        boolean boolean30 = arrayRealVector20.equals((java.lang.Object) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector26.mapLog1p();
        double double32 = arrayRealVector26.getL1Norm();
        arrayRealVector26.set(1.0d);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector26.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector9, (org.apache.commons.math.linear.RealVector) arrayRealVector37);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapSqrt();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        double double57 = arrayRealVector55.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.add(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector55.mapLogToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapLogToSelf();
        double double66 = arrayRealVector62.getL1Norm();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        double double71 = arrayRealVector62.getL1Distance(arrayRealVector70);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAbsToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector78.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector74.subtract(realVector79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector74.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector74.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector74.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(realVector84);
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector88.mapSubtractToSelf((double) '4');
        double double91 = arrayRealVector88.getNorm();
        double double92 = arrayRealVector85.getL1Distance(arrayRealVector88);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = arrayRealVector62.add(arrayRealVector88);
        double double94 = arrayRealVector88.getL1Norm();
        double[] doubleArray95 = arrayRealVector88.toArray();
        org.apache.commons.math.linear.RealVector realVector96 = arrayRealVector55.projection(doubleArray95);
        org.apache.commons.math.linear.RealMatrix realMatrix97 = arrayRealVector42.outerProduct(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4.35414242816297d + "'", double32 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 10.0d + "'", double57 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 1.4711276743037347d + "'", double66 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 8.528872325696266d + "'", double71 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 42.0d + "'", double91 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double92));
        org.junit.Assert.assertNotNull(arrayRealVector93);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 42.0d + "'", double94 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector96);
        org.junit.Assert.assertNotNull(realMatrix97);
    }

    @Test
    public void test1247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1247");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapFloor();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1248");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector1.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector1.mapSignum();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector1.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector1.mapAcosToSelf();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1249");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        java.lang.String str22 = arrayRealVector16.toString();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapSubtract(0.2296663502626633d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        double[] doubleArray26 = new double[] {};
        double[] doubleArray28 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26, doubleArray28);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.ebeDivide(doubleArray26);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-42}" + "'", str22, "{-42}");
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[100.0]");
    }

    @Test
    public void test1250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1250");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapDivideToSelf((double) (byte) 0);
        int int17 = arrayRealVector12.getDimension();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(realVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        double double46 = openMapRealVector34.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector34.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector34.mapDivideToSelf(14.355979641962135d);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector31.append(realVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector12.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test1251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1251");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector12.projection(arrayRealVector33);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = arrayRealVector12.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(entryItor40);
    }

    @Test
    public void test1252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1252");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        boolean boolean36 = openMapRealVector14.isNaN();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        double double38 = arrayRealVector37.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.0d + "'", double38 == 0.0d);
    }

    @Test
    public void test1253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1253");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        double double47 = openMapRealVector43.getSparcity();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector43.mapUlpToSelf();
        double double49 = openMapRealVector31.getDistance(openMapRealVector43);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapCbrt();
        double double56 = openMapRealVector43.getDistance(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector13.add((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector43.mapCosToSelf();
        double double59 = openMapRealVector43.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.6329299089739802d + "'", double56 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 1.0d + "'", double59 == 1.0d);
    }

    @Test
    public void test1254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1254");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapAtanToSelf();
        boolean boolean49 = arrayRealVector46.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test1255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1255");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapInvToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        double double23 = arrayRealVector21.getL1Norm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector15.ebeMultiply(arrayRealVector21);
        boolean boolean25 = arrayRealVector2.equals((java.lang.Object) arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 10.0d + "'", double23 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test1256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1256");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        boolean boolean12 = openMapRealVector9.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test1257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1257");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test1258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1258");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector2.mapAdd((double) 'a');
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector20.mapRintToSelf();
        openMapRealVector20.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        double double40 = arrayRealVector31.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapLogToSelf();
        double double49 = arrayRealVector45.getL1Norm();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        double double54 = arrayRealVector45.getL1Distance(arrayRealVector53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector57.subtract(realVector62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector57.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector57.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(realVector67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector71.mapSubtractToSelf((double) '4');
        double double74 = arrayRealVector71.getNorm();
        double double75 = arrayRealVector68.getL1Distance(arrayRealVector71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector45.add(arrayRealVector71);
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector79.mapAtanToSelf();
        double double81 = arrayRealVector71.dotProduct(realVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector38.add(arrayRealVector71);
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector85.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapExpToSelf();
        java.lang.Double[] doubleArray89 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray89);
        java.lang.Double[] doubleArray92 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray92);
        double double94 = arrayRealVector90.dotProduct(arrayRealVector93);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector95 = arrayRealVector85.add(arrayRealVector93);
        double[] doubleArray96 = arrayRealVector95.getDataRef();
        org.apache.commons.math.linear.RealVector realVector97 = arrayRealVector71.subtract(doubleArray96);
        double double98 = openMapRealVector20.getDistance(doubleArray96);
        double double99 = openMapRealVector2.getDistance(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 8.528872325696266d + "'", double40 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.4711276743037347d + "'", double49 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 8.528872325696266d + "'", double54 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 42.0d + "'", double74 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + (-61.787362320756856d) + "'", double81 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertTrue("'" + double94 + "' != '" + 100.0d + "'", double94 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector97);
        org.junit.Assert.assertTrue("'" + double98 + "' != '" + 85.64585757183703d + "'", double98 == 85.64585757183703d);
        org.junit.Assert.assertTrue("'" + double99 + "' != '" + 15.193213957239422d + "'", double99 == 15.193213957239422d);
    }

    @Test
    public void test1259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1259");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector5.ebeDivide(realVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector5.mapSubtract(23.978952727983707d);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector5.mapPowToSelf(434.7112767430374d);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector30.add(arrayRealVector38);
        double[] doubleArray41 = arrayRealVector40.getDataRef();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapSqrt();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAbsToSelf();
        double double68 = arrayRealVector66.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector56.add(arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector66.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector66.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector44.projection(realVector73);
        double double75 = arrayRealVector40.getLInfDistance(realVector74);
        org.apache.commons.math.linear.RealMatrix realMatrix76 = arrayRealVector5.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector40.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[14.0]");
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 10.0d + "'", double68 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(realMatrix76);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1260");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector2.mapSinToSelf();
        double[] doubleArray28 = arrayRealVector2.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.8414709848078965]");
    }

    @Test
    public void test1261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1261");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapMultiply(11.0d);
        double double24 = arrayRealVector20.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 14.355979641962135d + "'", double24 == 14.355979641962135d);
    }

    @Test
    public void test1262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1262");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        double double60 = arrayRealVector56.getL1Norm();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double65 = arrayRealVector56.getL1Distance(arrayRealVector64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAbsToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector68.subtract(realVector73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector68.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector68.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector68.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(realVector78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapSubtractToSelf((double) '4');
        double double85 = arrayRealVector82.getNorm();
        double double86 = arrayRealVector79.getL1Distance(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = arrayRealVector56.add(arrayRealVector82);
        double double88 = arrayRealVector82.getL1Norm();
        double[] doubleArray89 = arrayRealVector82.toArray();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector82.mapRint();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector41.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector41.mapMultiplyToSelf((double) 0.0f);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector41.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 1.4711276743037347d + "'", double60 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 8.528872325696266d + "'", double65 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertTrue("'" + double85 + "' != '" + 42.0d + "'", double85 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(arrayRealVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 42.0d + "'", double88 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray89), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1263");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector23.mapCoshToSelf();
        double double27 = openMapRealVector9.dotProduct(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1112336.5249304357d + "'", double27 == 1112336.5249304357d);
    }

    @Test
    public void test1264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1264");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 1, 0);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.add(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapTanhToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        boolean boolean30 = arrayRealVector20.equals((java.lang.Object) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector26.mapLog1p();
        double double32 = arrayRealVector26.getL1Norm();
        arrayRealVector26.set(1.0d);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector26.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector9, (org.apache.commons.math.linear.RealVector) arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 4.35414242816297d + "'", double32 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test1265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1265");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector13.append(43.47112767430374d);
        double[] doubleArray17 = openMapRealVector13.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[1.0]");
    }

    @Test
    public void test1266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1266");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapTanhToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        boolean boolean27 = arrayRealVector17.equals((java.lang.Object) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector30.add(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector40.mapDivideToSelf((double) (byte) 0);
        int int45 = arrayRealVector40.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector23.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector40.mapSubtract((double) 1L);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector5.ebeMultiply(arrayRealVector40);
        double double50 = arrayRealVector5.getL1Norm();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        openMapRealVector53.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector53.mapRintToSelf();
        openMapRealVector53.setEntry(0, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector53.mapCbrt();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAbsToSelf();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector65.subtract(realVector70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector65.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector73, true);
        double[] doubleArray76 = arrayRealVector73.getDataRef();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector53.append(doubleArray76);
        double double78 = arrayRealVector5.dotProduct(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector5.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray76), "[10.0]");
        org.junit.Assert.assertNotNull(openMapRealVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(realVector79);
    }

    @Test
    public void test1267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1267");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(realVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        double double36 = arrayRealVector33.getNorm();
        double double37 = arrayRealVector30.getL1Distance(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapCoshToSelf();
        double[] doubleArray40 = arrayRealVector38.getData();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector15.append(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector15.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 42.0d + "'", double36 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN]");
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1268");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector10.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test1269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1269");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray14 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test1270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1270");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        openMapRealVector24.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector31.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.add(openMapRealVector31);
        int int34 = openMapRealVector31.getDimension();
        double double35 = openMapRealVector31.getSparcity();
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector31.mapUlpToSelf();
        double double37 = openMapRealVector19.getDistance(openMapRealVector31);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapCbrt();
        double double44 = openMapRealVector31.getDistance(realVector43);
        double[] doubleArray47 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, true);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector31.add(doubleArray47);
        double[] doubleArray51 = new double[] {};
        double[] doubleArray53 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, doubleArray53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, arrayRealVector55);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector12.ebeDivide(doubleArray47);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 10.0d + "'", double37 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.6329299089739802d + "'", double44 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[100.0]");
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1271");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        double double18 = arrayRealVector2.getLInfNorm();
        double double19 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector22.mapPow((double) 0);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector22.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapUlpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector61.mapUlpToSelf();
        double[] doubleArray73 = arrayRealVector61.toArray();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector29.append(doubleArray73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73, true);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector2.add(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.0d + "'", double18 == 6.0d);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.4711276743037347d + "'", double39 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 42.0d + "'", double64 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-61.787362320756856d) + "'", double71 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[7.105427357601002E-15]");
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector77);
    }

    @Test
    public void test1272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1272");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector8.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1273");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1274");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector18.mapTanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        double double52 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector39.mapTanh();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector39.mapSqrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(realVector36, arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 8.881784197001252E-16d + "'", double52 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1275");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapSqrtToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor17 = arrayRealVector2.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(entryItor17);
    }

    @Test
    public void test1276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1276");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.String str30 = arrayRealVector2.toString();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector2.mapAtan();
        // The following exception was thrown during execution in test generation
        try {
            double double33 = arrayRealVector2.getEntry((int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 52");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{0}" + "'", str30, "{0}");
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test1277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1277");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapMultiplyToSelf(10.0d);
        double[] doubleArray19 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19, true);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector10.add(arrayRealVector21);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test1278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1278");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((-1), 142.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1279");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        double[] doubleArray18 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, (int) (short) 1, 0);
        double[] doubleArray22 = arrayRealVector21.getData();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1280");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        double double38 = arrayRealVector28.dotProduct(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.mapUlpToSelf();
        double[] doubleArray40 = arrayRealVector28.toArray();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapSubtractToSelf(14.354142428153194d);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector28.append(realVector48);
        arrayRealVector28.set(11010.835024830527d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + (-61.787362320756856d) + "'", double38 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[7.105427357601002E-15]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
    }

    @Test
    public void test1281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1281");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector(0);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapAtanToSelf();
        org.junit.Assert.assertNotNull(realVector2);
    }

    @Test
    public void test1282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1282");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        double[] doubleArray28 = arrayRealVector27.getData();
        boolean boolean29 = arrayRealVector27.isInfinite();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapAcosToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapTanhToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapExpToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        double double57 = arrayRealVector53.dotProduct(arrayRealVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector48.add(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector48.mapUlpToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapExpToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        double double71 = arrayRealVector67.dotProduct(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector62.add(arrayRealVector70);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = arrayRealVector48.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector72);
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector78.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector78.mapCos();
        boolean boolean83 = arrayRealVector72.equals((java.lang.Object) arrayRealVector78);
        double double84 = arrayRealVector43.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector72);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector72.mapLog10ToSelf();
        double double86 = arrayRealVector72.getL1Norm();
        double double87 = arrayRealVector27.getDistance(arrayRealVector72);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 100.0d + "'", double57 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 14.354142428153194d + "'", double84 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertTrue("'" + double86 + "' != '" + 1.1569772511800065d + "'", double86 == 1.1569772511800065d);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 0.41381907561489006d + "'", double87 == 0.41381907561489006d);
    }

    @Test
    public void test1283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1283");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        double double31 = arrayRealVector19.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertTrue(Double.isNaN(double31));
    }

    @Test
    public void test1284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1284");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapSqrt();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        double double26 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector14.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector24.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapTanhToSelf();
        double double31 = arrayRealVector2.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapSignumToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(realVector32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor38 = openMapRealVector36.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector36.mapLog();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double43 = openMapRealVector41.getEntry(0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (byte) 10, 2.3978952727983707d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector41.append(openMapRealVector49);
        double double51 = openMapRealVector36.getDistance(openMapRealVector49);
        double double52 = openMapRealVector33.getL1Distance(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + (-1.6433183218042784d) + "'", double31 == (-1.6433183218042784d));
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(entryItor38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 0.0d + "'", double43 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 1.0d + "'", double51 == 1.0d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
    }

    @Test
    public void test1285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1285");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor7 = openMapRealVector6.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(entryItor7);
    }

    @Test
    public void test1286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1286");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        openMapRealVector13.set((-50.05532728089162d));
        double double31 = openMapRealVector13.getSparcity();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector43.copy();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector47.mapRintToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector60.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector47.subtract(openMapRealVector60);
        double double63 = openMapRealVector33.getL1Distance(openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector33.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector65.mapAdd(1.6329299089739802d);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray69);
        openMapRealVector70.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector70.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector77.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector74.add(openMapRealVector77);
        int int80 = openMapRealVector77.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector77.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector67.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector81);
        int int83 = openMapRealVector67.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector13.add(openMapRealVector67);
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector67.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.0d + "'", double31 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 9.0d + "'", double63 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(openMapRealVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(openMapRealVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(openMapRealVector79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector81);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector84);
        org.junit.Assert.assertNotNull(realVector85);
    }

    @Test
    public void test1287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1287");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector1.mapSinToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector7.mapCeilToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapPow((double) 0);
        double double22 = arrayRealVector7.getLInfDistance(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector7.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(realVector4, arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapSin();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 5.64585757183703d + "'", double22 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1288");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLog10ToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapPow((double) 0);
        double double34 = arrayRealVector19.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector19.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector12.ebeDivide(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.64585757183703d + "'", double34 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test1289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1289");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapPow((double) 0);
        double double36 = arrayRealVector21.getLInfDistance(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector21.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12, arrayRealVector21);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = arrayRealVector12.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5.64585757183703d + "'", double36 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(entryItor39);
    }

    @Test
    public void test1290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1290");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapLogToSelf();
        double double26 = arrayRealVector22.getL1Norm();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double31 = arrayRealVector22.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapTan();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapSin();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector5.append(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double39 = openMapRealVector38.getSparcity();
        double double40 = openMapRealVector38.getSparcity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector5.append(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6.0d + "'", double13 == 6.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 1.4711276743037347d + "'", double26 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 8.528872325696266d + "'", double31 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertTrue(Double.isNaN(double39));
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(openMapRealVector41);
    }

    @Test
    public void test1291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1291");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapSqrt();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        double double36 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector24.add(arrayRealVector34);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapSubtractToSelf((double) '4');
        double double43 = arrayRealVector40.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector34.subtract(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector18.append(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector18.mapExp();
        boolean boolean47 = arrayRealVector15.equals((java.lang.Object) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector18.mapInv();
        java.lang.String str49 = arrayRealVector18.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 42.0d + "'", double43 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(arrayRealVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "{-42}" + "'", str49, "{-42}");
    }

    @Test
    public void test1292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1292");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapAddToSelf(10993.232920103324d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1293");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector7 = arrayRealVector5.copy();
        double[] doubleArray8 = arrayRealVector5.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector9.append((double) 10L);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(abstractRealVector7);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test1294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1294");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 1, 0);
    }

    @Test
    public void test1295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1295");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.String str30 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector2.subtract(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44, false);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        double double59 = arrayRealVector50.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapAsin();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector57.mapFloorToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.subtract(realVector69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector64.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAbsToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector79.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector75.subtract(realVector80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector75.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector75);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = arrayRealVector75.ebeDivide(arrayRealVector87);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = arrayRealVector64.subtract(arrayRealVector87);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector89.mapPowToSelf(10.839071529076453d);
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector57.subtract(realVector91);
        double double93 = arrayRealVector47.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector57.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{0}" + "'", str30, "{0}");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 8.528872325696266d + "'", double59 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(arrayRealVector88);
        org.junit.Assert.assertNotNull(arrayRealVector89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4.3541424281629695d + "'", double93 == 4.3541424281629695d);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1296");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapCbrt();
        double[] doubleArray5 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, true);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = arrayRealVector1.append(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapExpm1();
        org.junit.Assert.assertNotNull(realVector2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(arrayRealVector9);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test1297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1297");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        double[] doubleArray49 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49, true);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray53);
        openMapRealVector54.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector54.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector61.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector58.add(openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector61.mapAddToSelf((double) 100L);
        double[] doubleArray67 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix68 = openMapRealVector65.outerProduct(doubleArray67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49, doubleArray67);
        // The following exception was thrown during execution in test generation
        try {
            double double72 = arrayRealVector41.getDistance(arrayRealVector71);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(openMapRealVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(openMapRealVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix68);
    }

    @Test
    public void test1298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1298");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        arrayRealVector2.unitize();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealMatrix realMatrix14 = arrayRealVector2.outerProduct(realVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector35.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix40 = arrayRealVector29.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapSubtractToSelf((double) '4');
        double double46 = arrayRealVector43.getNorm();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (byte) -1);
        double[] doubleArray49 = arrayRealVector43.getData();
        double double50 = arrayRealVector35.dotProduct(doubleArray49);
        double double51 = arrayRealVector19.dotProduct(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector(2, doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 2 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realMatrix14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 42.0d + "'", double46 == 42.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[-42.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + (-61.787362320756856d) + "'", double51 == (-61.787362320756856d));
    }

    @Test
    public void test1299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1299");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, true);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapDivideToSelf(1112336.5249304357d);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test1300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1300");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAddToSelf((double) 100);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapCbrt();
        boolean boolean39 = arrayRealVector29.equals((java.lang.Object) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector12.mapSubtractToSelf((double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector44);
    }

    @Test
    public void test1301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1301");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1302");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector14.mapAtan();
        double double35 = openMapRealVector14.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test1303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1303");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanhToSelf();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray19 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, doubleArray17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1304");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1305");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapCosh();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapLog();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1306");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector15, arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapMultiplyToSelf(10.839071529076453d);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapLogToSelf();
        double double49 = arrayRealVector45.getL1Norm();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        double double54 = arrayRealVector45.getL1Distance(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapTan();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapExpToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double57 = arrayRealVector39.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector53);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.4711276743037347d + "'", double49 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 8.528872325696266d + "'", double54 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1307");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1308");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(10, (double) 'a');
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapExp();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1309");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        double[] doubleArray49 = arrayRealVector48.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = arrayRealVector25.outerProduct(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector25.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector25.mapSin();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector25.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realMatrix50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
    }

    @Test
    public void test1310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1310");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        double[] doubleArray6 = arrayRealVector2.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, true);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[NaN]");
    }

    @Test
    public void test1311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1311");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        boolean boolean36 = openMapRealVector14.isNaN();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(entryItor35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1312");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapSin();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapCoshToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.mapLog1p();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test1313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1313");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(realVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        double double36 = arrayRealVector33.getNorm();
        double double37 = arrayRealVector30.getL1Distance(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector7.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector7.mapAcosToSelf();
        boolean boolean41 = arrayRealVector7.isNaN();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector7.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.4711276743037347d + "'", double11 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.528872325696266d + "'", double16 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 42.0d + "'", double36 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1314");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1315");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector29.mapCoshToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector29.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector29.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
    }

    @Test
    public void test1316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1316");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        java.lang.Class<?> wildcardClass5 = doubleArray1.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test1317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1317");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector1.mapAtanToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        double double9 = arrayRealVector7.getNorm();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapAtan();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapAsinToSelf();
        double double23 = arrayRealVector7.getLInfDistance(arrayRealVector13);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector26.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector13.ebeMultiply(arrayRealVector26);
        boolean boolean37 = arrayRealVector1.equals((java.lang.Object) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector1.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 10.0d + "'", double9 == 10.0d);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1318");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        double double17 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        // The following exception was thrown during execution in test generation
        try {
            double double19 = openMapRealVector9.getEntry(1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.0d + "'", double17 == 0.0d);
    }

    @Test
    public void test1319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1319");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector24.projection((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector17.subtract(realVector40);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1320");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        double double45 = arrayRealVector5.getL1Norm();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        double double56 = arrayRealVector52.dotProduct(arrayRealVector55);
        double double57 = arrayRealVector48.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapCbrt();
        double double61 = arrayRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector5.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.3978952727983707d + "'", double45 == 2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 8.528872325696266d + "'", double57 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 23.978952727983707d + "'", double61 == 23.978952727983707d);
        org.junit.Assert.assertNotNull(realVector62);
    }

    @Test
    public void test1321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1321");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        boolean boolean8 = openMapRealVector2.isNaN();
        double double9 = openMapRealVector2.getLInfNorm();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector12.append(realVector26);
        java.lang.String str28 = arrayRealVector12.toString();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 6.0d + "'", double9 == 6.0d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "{10}" + "'", str28, "{10}");
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test1322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1322");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector14.mapAtan();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector14.mapSin();
        double double36 = openMapRealVector14.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 0.0d + "'", double36 == 0.0d);
    }

    @Test
    public void test1323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1323");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector29.append((double) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector29.mapMultiplyToSelf(10912.39457234693d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.6329299089739802d + "'", double42 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test1324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1324");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapAcos();
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector6.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector6.mapFloorToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor10 = openMapRealVector6.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(entryItor10);
    }

    @Test
    public void test1325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1325");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector30.mapAbs();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapSubtractToSelf((double) '4');
        double double41 = arrayRealVector38.getNorm();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector38.mapDivide((double) (byte) -1);
        double[] doubleArray44 = arrayRealVector38.getData();
        double double45 = arrayRealVector30.getDistance(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 42.0d + "'", double41 == 42.0d);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[-42.0]");
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
    }

    @Test
    public void test1326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1326");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapLogToSelf();
        double double19 = arrayRealVector15.getL1Norm();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double24 = arrayRealVector15.getL1Distance(arrayRealVector23);
        double double25 = arrayRealVector12.getLInfDistance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector12.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector12.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4711276743037347d + "'", double19 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 8.528872325696266d + "'", double24 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test1327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1327");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        double[] doubleArray19 = arrayRealVector18.getDataRef();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[8.881784197001252E-16]");
    }

    @Test
    public void test1328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1328");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) -1, 0.0d);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapMultiply(23.978952727983707d);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test1329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1329");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapRint();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapSubtractToSelf((double) 100.0f);
        java.lang.Class<?> wildcardClass57 = arrayRealVector12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(wildcardClass57);
    }

    @Test
    public void test1330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1330");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        double double14 = openMapRealVector13.getSparcity();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector30.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector26.append(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector32.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapRintToSelf();
        double double36 = openMapRealVector13.getDistance(openMapRealVector34);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor37 = openMapRealVector13.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.198039027185569d + "'", double36 == 10.198039027185569d);
        org.junit.Assert.assertNotNull(entryItor37);
    }

    @Test
    public void test1331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1331");
        double[] doubleArray1 = new double[] { 9.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        double[] doubleArray3 = arrayRealVector2.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[9.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[9.0]");
    }

    @Test
    public void test1332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1332");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1333");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapSqrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1334");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        org.apache.commons.math.linear.RealVector realVector15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector13.projection(realVector15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test1335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1335");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapCosh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ', (int) (byte) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapTanh();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector20.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector20.mapTanhToSelf();
        boolean boolean34 = openMapRealVector17.equals((java.lang.Object) realVector33);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector17);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test1336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1336");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapSubtractToSelf((double) (byte) 10);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSqrt();
        double[] doubleArray24 = arrayRealVector16.toArray();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector27.add(arrayRealVector35);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector40.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37, arrayRealVector40);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector37.add((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector16, arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector16.mapSin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, arrayRealVector16);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 42.0d + "'", double51 == 42.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1337");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        arrayRealVector2.setEntry(0, 14.354142428153194d);
        boolean boolean21 = arrayRealVector2.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test1338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1338");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapPow((-32.0d));
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector22.mapMultiplyToSelf(6.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test1339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1339");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapDivideToSelf((double) (-1.0f));
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        double double21 = arrayRealVector12.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapLogToSelf();
        double double30 = arrayRealVector26.getL1Norm();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double35 = arrayRealVector26.getL1Distance(arrayRealVector34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector38.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(realVector48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapSubtractToSelf((double) '4');
        double double55 = arrayRealVector52.getNorm();
        double double56 = arrayRealVector49.getL1Distance(arrayRealVector52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector26.add(arrayRealVector52);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        double double62 = arrayRealVector52.dotProduct(realVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector19.add(arrayRealVector52);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapExpToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        double double75 = arrayRealVector71.dotProduct(arrayRealVector74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector66.add(arrayRealVector74);
        double[] doubleArray77 = arrayRealVector76.getDataRef();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector52.subtract(doubleArray77);
        double double79 = openMapRealVector7.dotProduct(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 8.528872325696266d + "'", double21 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.4711276743037347d + "'", double30 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 42.0d + "'", double55 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + (-61.787362320756856d) + "'", double62 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-14.35414242816297d) + "'", double79 == (-14.35414242816297d));
    }

    @Test
    public void test1340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1340");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector26.mapMultiplyToSelf(14.354142428153194d);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.mapSinhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector26.mapSubtractToSelf(8.528872325696266d);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector26.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test1341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1341");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector30.ebeDivide(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector19.subtract(arrayRealVector42);
        double[] doubleArray45 = arrayRealVector44.getData();
        boolean boolean46 = arrayRealVector44.isInfinite();
        boolean boolean47 = arrayRealVector14.equals((java.lang.Object) boolean46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14, false);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapMultiplyToSelf((double) 10L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[0.0]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test1342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1342");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        boolean boolean16 = arrayRealVector15.isInfinite();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector19.mapUlpToSelf();
        double double31 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapInvToSelf();
        boolean boolean33 = arrayRealVector15.equals((java.lang.Object) arrayRealVector19);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector46.subtract(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector36.projection(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector36.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector36.mapSqrt();
        double double57 = arrayRealVector15.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector15.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 8.881784197001252E-16d + "'", double31 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 22025.465794806718d + "'", double57 == 22025.465794806718d);
        org.junit.Assert.assertNotNull(realVector58);
    }

    @Test
    public void test1343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1343");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        double double45 = arrayRealVector5.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector5.mapDivide(1713659.1765230843d);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector5.mapLog();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.3978952727983707d + "'", double45 == 2.3978952727983707d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test1344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1344");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector29.mapCoshToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector82.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector82.mapDivide((double) (short) -1);
        double[] doubleArray88 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray88, (int) (short) 1, 0);
        double[] doubleArray92 = arrayRealVector91.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double93 = arrayRealVector29.getL1Distance(doubleArray92);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN]");
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(doubleArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray88), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[]");
    }

    @Test
    public void test1345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1345");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        boolean boolean31 = arrayRealVector16.isNaN();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector16.mapUlp();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector16.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1346");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapCbrtToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(realVector11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector12.unitVector();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector12.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1347");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSqrt();
        double[] doubleArray24 = arrayRealVector16.toArray();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector2.subtract(doubleArray24);
        boolean boolean26 = arrayRealVector2.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test1348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1348");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapSin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        arrayRealVector2.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1349");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector18.ebeDivide(arrayRealVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = arrayRealVector31.outerProduct(arrayRealVector62);
        double double68 = arrayRealVector12.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector69 = arrayRealVector62.copy();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector62.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector72.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector72.mapExpm1();
        double double78 = arrayRealVector62.getLInfDistance(arrayRealVector72);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(abstractRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue(Double.isNaN(double78));
    }

    @Test
    public void test1350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1350");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapSinhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1351");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', (double) 10.0f);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.unitize();
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
    }

    @Test
    public void test1352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1352");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapDivideToSelf(14.355979641962135d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapTan();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector28.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapTanhToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector34 = arrayRealVector28.copy();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector2.add((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        double double40 = arrayRealVector38.getNorm();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapAtan();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        double double46 = arrayRealVector44.getNorm();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapAtan();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector50.mapAsinToSelf();
        double double60 = arrayRealVector44.getLInfDistance(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38, (org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector38.mapSignumToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector65.mapPow((double) 0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = arrayRealVector65.iterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = arrayRealVector38.ebeDivide(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector28.append(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector28.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(abstractRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(arrayRealVector71);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(realVector73);
    }

    @Test
    public void test1353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1353");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.append(4.122307273313197E-9d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapLogToSelf();
        double double27 = arrayRealVector23.getL1Norm();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double32 = arrayRealVector23.getL1Distance(arrayRealVector31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        double double44 = arrayRealVector35.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector23.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        double double46 = arrayRealVector17.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector49.add(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapTanhToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector63.mapCbrt();
        boolean boolean67 = arrayRealVector57.equals((java.lang.Object) arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector63.mapLog1p();
        double double69 = arrayRealVector63.getL1Norm();
        arrayRealVector63.set(1.0d);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector74.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector63.add(arrayRealVector74);
        boolean boolean78 = arrayRealVector63.isNaN();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector79 = arrayRealVector63.copy();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector17.add(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.4711276743037347d + "'", double27 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 8.528872325696266d + "'", double32 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 100.0d + "'", double43 == 100.0d);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + (-6.853169696133174d) + "'", double46 == (-6.853169696133174d));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 4.35414242816297d + "'", double69 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(arrayRealVector77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(abstractRealVector79);
        org.junit.Assert.assertNotNull(arrayRealVector80);
    }

    @Test
    public void test1354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1354");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test1355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1355");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCoshToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = arrayRealVector12.iterator();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(entryItor16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1356");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        int int38 = arrayRealVector32.getDimension();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCoshToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapSqrt();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        double double54 = arrayRealVector52.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector42.add(arrayRealVector52);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.subtract(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector32.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapExpToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        double double75 = arrayRealVector71.dotProduct(arrayRealVector74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector66.add(arrayRealVector74);
        double[] doubleArray77 = arrayRealVector76.getDataRef();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector76.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector76.mapDivide((double) (short) -1);
        double[] doubleArray82 = arrayRealVector76.getDataRef();
        double double83 = arrayRealVector62.getLInfDistance(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector12.ebeDivide(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN]");
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double83));
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test1357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1357");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4');
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector1.mapSubtractToSelf(6.0d);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1358");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = openMapRealVector18.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{14.35}" + "'", str13, "{14.35}");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(entryItor20);
    }

    @Test
    public void test1359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1359");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double double34 = arrayRealVector28.getL1Norm();
        double[] doubleArray35 = arrayRealVector28.toArray();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector28.mapRint();
        double double37 = arrayRealVector28.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1360");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapAtanToSelf();
        java.lang.String str24 = arrayRealVector16.toString();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        double double30 = arrayRealVector16.dotProduct(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{1.35}" + "'", str24, "{1.35}");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.22549726022755537d + "'", double30 == 0.22549726022755537d);
    }

    @Test
    public void test1361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1361");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, 1.6853169696133175d);
        boolean boolean3 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapSinh();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test1362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1362");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapAsin();
        double double43 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector34.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 4.35414242816297d + "'", double43 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(realVector44);
    }

    @Test
    public void test1363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1363");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        double double5 = openMapRealVector2.getSparcity();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
    }

    @Test
    public void test1364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1364");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.mapTanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAcosToSelf();
        double[] doubleArray27 = arrayRealVector23.getDataRef();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector30.add(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector40.mapDivideToSelf((double) (byte) 0);
        int int45 = arrayRealVector40.getDimension();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.mapSin();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector23.projection(realVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector12.ebeMultiply(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 100.0d + "'", double39 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(arrayRealVector50);
    }

    @Test
    public void test1365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1365");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        double double38 = arrayRealVector32.getL1Norm();
        arrayRealVector32.set(1.0d);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector32.add(arrayRealVector43);
        boolean boolean47 = arrayRealVector32.isNaN();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector32.mapUlp();
        org.apache.commons.math.linear.RealMatrix realMatrix49 = arrayRealVector2.outerProduct(realVector48);
        arrayRealVector2.set(23.978952727983707d);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector2.mapAsinToSelf();
        double[] doubleArray53 = new double[] {};
        double[] doubleArray55 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector59.subtract(realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector59.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector59.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, arrayRealVector59);
        double double70 = arrayRealVector2.getDistance(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, false);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.35414242816297d + "'", double38 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test1366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1366");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapLogToSelf();
        double double58 = arrayRealVector54.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double63 = arrayRealVector54.getL1Distance(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector37, arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector54.mapSqrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54, true);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector54.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.881784197001252E-16d + "'", double50 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 1.4711276743037347d + "'", double58 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 8.528872325696266d + "'", double63 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector68);
    }

    @Test
    public void test1367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1367");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapInvToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapAtan();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector24.mapAsinToSelf();
        double double34 = arrayRealVector18.getLInfDistance(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, (org.apache.commons.math.linear.RealVector) arrayRealVector24);
        double[] doubleArray36 = arrayRealVector24.toArray();
        double double37 = arrayRealVector8.getDistance(doubleArray36);
        org.apache.commons.math.linear.RealMatrix realMatrix38 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector2.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(realMatrix38);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test1368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1368");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector13.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.6329299089739802d + "'", double42 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector51);
    }

    @Test
    public void test1369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1369");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector18.mapTanhToSelf();
        double double21 = openMapRealVector18.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector25.subtract(realVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector25.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector25);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector36.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector25.subtract(arrayRealVector48);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector48.ebeDivide(arrayRealVector53);
        java.lang.String str58 = arrayRealVector53.toString();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector53.mapLog1pToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapExpToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        double double71 = arrayRealVector67.dotProduct(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector62.add(arrayRealVector70);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector62.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector62.mapSinh();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector62.mapCeil();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector62.mapSin();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector62.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector62.mapMultiplyToSelf(1.6853169696133175d);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector62.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector53.ebeMultiply(realVector81);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector83 = openMapRealVector18.subtract(realVector82);
        boolean boolean84 = openMapRealVector83.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 6.0d + "'", double21 == 6.0d);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "{-42}" + "'", str58, "{-42}");
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 100.0d + "'", double71 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(openMapRealVector83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
    }

    @Test
    public void test1370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1370");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        double[] doubleArray18 = arrayRealVector12.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-0.8390715290764524]");
    }

    @Test
    public void test1371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1371");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        double double27 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        double double36 = arrayRealVector32.getL1Norm();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double41 = arrayRealVector32.getL1Distance(arrayRealVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector44.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector44.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(realVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        double double62 = arrayRealVector55.getL1Distance(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector32.add(arrayRealVector58);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        double double68 = arrayRealVector58.dotProduct(realVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector25.add(arrayRealVector58);
        double double71 = arrayRealVector69.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector69.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector69.mapExpm1();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector10.ebeDivide(arrayRealVector69);
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray77);
        openMapRealVector78.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector78.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector78.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector78.mapInvToSelf();
        openMapRealVector78.unitize();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector69.setSubVector(100, (org.apache.commons.math.linear.RealVector) openMapRealVector78);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(abstractRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 8.528872325696266d + "'", double27 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.4711276743037347d + "'", double36 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 8.528872325696266d + "'", double41 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double62));
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + (-61.787362320756856d) + "'", double68 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-32.0d) + "'", double71 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(openMapRealVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
    }

    @Test
    public void test1372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1372");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) (byte) 1, 13.35414242816297d);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector6.mapPow((double) 0);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.append((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector18.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.append(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector18.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector3.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector18);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test1373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1373");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector14.mapLog();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector19 = arrayRealVector14.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(abstractRealVector19);
    }

    @Test
    public void test1374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1374");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((-1), (int) '#', (double) ' ');
        double[] doubleArray4 = new double[] {};
        double[] doubleArray6 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4, doubleArray6);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector3.append(doubleArray4);
        double double10 = openMapRealVector9.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.0d + "'", double10 == 0.0d);
    }

    @Test
    public void test1375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1375");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        int int54 = arrayRealVector2.getDimension();
        double[] doubleArray55 = arrayRealVector2.getDataRef();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[10.0]");
    }

    @Test
    public void test1376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1376");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapLog();
        boolean boolean54 = arrayRealVector12.equals((java.lang.Object) arrayRealVector39);
        arrayRealVector39.unitize();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector39.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1377");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapAcos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1378");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapSqrt();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        double double36 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector24.add(arrayRealVector34);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapSubtractToSelf((double) '4');
        double double43 = arrayRealVector40.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector34.subtract(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector18.append(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector18.mapExp();
        boolean boolean47 = arrayRealVector15.equals((java.lang.Object) arrayRealVector18);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapLog1pToSelf();
        boolean boolean56 = arrayRealVector53.isInfinite();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapExpToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        double double68 = arrayRealVector64.dotProduct(arrayRealVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector59.add(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector67.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector53.ebeDivide(realVector70);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = arrayRealVector18.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector53);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapExpToSelf();
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        double double84 = arrayRealVector80.dotProduct(arrayRealVector83);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = arrayRealVector75.add(arrayRealVector83);
        double[] doubleArray86 = arrayRealVector85.getDataRef();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector85.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector85.mapDivide((double) (short) -1);
        double[] doubleArray91 = arrayRealVector85.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector94 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray91, (int) (short) 1, 0);
        double double95 = arrayRealVector53.getLInfDistance(doubleArray91);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 42.0d + "'", double43 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(arrayRealVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realMatrix72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[NaN]");
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(doubleArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray91), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double95));
    }

    @Test
    public void test1379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1379");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapCoshToSelf();
        double[] doubleArray13 = openMapRealVector11.getData();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector11.mapLog10();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAddToSelf((double) 100L);
        double[] doubleArray30 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix31 = openMapRealVector28.outerProduct(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector38.add(openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAddToSelf((double) 100L);
        double[] doubleArray47 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector45.outerProduct(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector28.append(doubleArray47);
        double[] doubleArray52 = openMapRealVector28.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector28.append(59.39696961966999d);
        double double55 = openMapRealVector11.getDistance(openMapRealVector54);
        double double56 = openMapRealVector11.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[11013.232920103324]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[101.0]");
        org.junit.Assert.assertNotNull(openMapRealVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 10912.39457234693d + "'", double55 == 10912.39457234693d);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 6.0d + "'", double56 == 6.0d);
    }

    @Test
    public void test1380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1380");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector9.add(realVector22);
        double[] doubleArray24 = arrayRealVector9.getData();
        openMapRealVector4.setSubVector((int) (short) 0, doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector4.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test1381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1381");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapTan();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapSubtract((double) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.mapAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector2.mapAbs();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapSqrt();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapLogToSelf();
        arrayRealVector23.set(1.0d);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray33 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31, doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtract(10.0d);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        double double41 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapAtan();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        double double47 = arrayRealVector45.getNorm();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapAtan();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector51.mapAsinToSelf();
        double double61 = arrayRealVector45.getLInfDistance(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39, (org.apache.commons.math.linear.RealVector) arrayRealVector51);
        double[] doubleArray63 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector34.add(doubleArray63);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAbsToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector67.subtract(realVector72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector67.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63, arrayRealVector67);
        arrayRealVector23.setSubVector((int) (byte) 0, doubleArray63);
        double[] doubleArray77 = arrayRealVector23.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector2.ebeDivide(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[100.0]");
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 10.0d + "'", double47 == 10.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue(Double.isNaN(double61));
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[NaN]");
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[NaN]");
        org.junit.Assert.assertNotNull(openMapRealVector78);
    }

    @Test
    public void test1382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1382");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.add(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.projection((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1383");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector2.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector2.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1384");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector19.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1385");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1386");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(1.749534445339284d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector33.getSubVector(1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(openMapRealVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 9.0d + "'", double31 == 9.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
    }

    @Test
    public void test1387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1387");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector2.mapAdd(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector16);
    }

    @Test
    public void test1388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1388");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1389");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapSubtractToSelf(1.4711276743037338d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor14 = arrayRealVector2.iterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(entryItor14);
    }

    @Test
    public void test1390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1390");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.mapMultiply(0.0d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector23.mapCeilToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapSqrt();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        double double48 = arrayRealVector46.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector36.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector46.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector46.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector46);
        boolean boolean56 = arrayRealVector32.equals((java.lang.Object) arrayRealVector55);
        arrayRealVector23.set((int) (byte) 0, arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector32.mapDivideToSelf(9.0d);
        boolean boolean60 = arrayRealVector2.equals((java.lang.Object) 9.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.0d + "'", double26 == 42.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 10.0d + "'", double48 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
    }

    @Test
    public void test1391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1391");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        arrayRealVector26.unitize();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        openMapRealVector33.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector33.mapRintToSelf();
        openMapRealVector33.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        openMapRealVector44.set(10.0d);
        openMapRealVector44.unitize();
        double double48 = openMapRealVector33.getL1Distance(openMapRealVector44);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double60 = arrayRealVector56.dotProduct(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = arrayRealVector51.add(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapTanhToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector65.mapCbrt();
        boolean boolean69 = arrayRealVector59.equals((java.lang.Object) arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector65.mapSubtract(1.0d);
        double double72 = openMapRealVector44.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector65.mapAsin();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector65.mapExp();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector65.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector65.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector26.ebeDivide(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector77.subtract(realVector78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 99.0d + "'", double48 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 3.3541424281629704d + "'", double72 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(arrayRealVector77);
    }

    @Test
    public void test1392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1392");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double[] doubleArray6 = openMapRealVector5.getData();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.add(openMapRealVector16);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapCoshToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector18.unitVector();
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector20.mapSubtract(2.000000000001193d);
        double double23 = openMapRealVector5.getDistance(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 99.0d + "'", double23 == 99.0d);
    }

    @Test
    public void test1393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1393");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        int int21 = arrayRealVector15.getDimension();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector15.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test1394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1394");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector42.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector42.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector42.mapSubtract(8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test1395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1395");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(3.788686108423733d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test1396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1396");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector10.set(1.4711276743037347d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        int int25 = openMapRealVector22.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.copy();
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector10.append(realVector27);
        boolean boolean29 = openMapRealVector10.isNaN();
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector10.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test1397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1397");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        double double38 = arrayRealVector32.getL1Norm();
        arrayRealVector32.set(1.0d);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector32.add(arrayRealVector43);
        boolean boolean47 = arrayRealVector32.isNaN();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector32.mapUlp();
        org.apache.commons.math.linear.RealMatrix realMatrix49 = arrayRealVector2.outerProduct(realVector48);
        arrayRealVector2.set(23.978952727983707d);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector2.mapAsinToSelf();
        double[] doubleArray53 = new double[] {};
        double[] doubleArray55 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector59.subtract(realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector59.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector59.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, arrayRealVector59);
        double double70 = arrayRealVector2.getDistance(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, false);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 4.35414242816297d + "'", double38 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realMatrix49);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
    }

    @Test
    public void test1398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1398");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1399");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd((double) 1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.add(openMapRealVector25);
        double double28 = openMapRealVector13.getL1Distance(openMapRealVector25);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        double double47 = openMapRealVector43.getSparcity();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector43.mapUlpToSelf();
        double double49 = openMapRealVector31.getDistance(openMapRealVector43);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapCbrt();
        double double56 = openMapRealVector43.getDistance(realVector55);
        double[] doubleArray59 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, true);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector43.add(doubleArray59);
        double[] doubleArray63 = openMapRealVector43.getData();
        double double64 = openMapRealVector13.getL1Distance(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.6249728132842707d + "'", double28 == 3.6249728132842707d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.6329299089739802d + "'", double56 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0]");
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 4.624972813284271d + "'", double64 == 4.624972813284271d);
    }

    @Test
    public void test1400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1400");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        double double65 = arrayRealVector61.dotProduct(arrayRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector56.add(arrayRealVector64);
        double[] doubleArray67 = arrayRealVector66.getDataRef();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector42.subtract(doubleArray67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAbsToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector71.subtract(realVector76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector71.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector71.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector71.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(realVector81);
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapSubtractToSelf((double) '4');
        double double88 = arrayRealVector85.getNorm();
        double double89 = arrayRealVector82.getL1Distance(arrayRealVector85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector82.mapAsin();
        org.apache.commons.math.linear.RealMatrix realMatrix92 = arrayRealVector42.outerProduct(arrayRealVector82);
        double double93 = arrayRealVector42.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertTrue("'" + double88 + "' != '" + 42.0d + "'", double88 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realMatrix92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 42.0d + "'", double93 == 42.0d);
    }

    @Test
    public void test1401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1401");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapLog();
        boolean boolean54 = arrayRealVector12.equals((java.lang.Object) arrayRealVector39);
        double double55 = arrayRealVector39.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector39.mapExpm1ToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double58 = arrayRealVector39.getEntry(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 8.881784197001252E-16d + "'", double55 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1402");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAddToSelf((double) (short) 100);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1403");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapCosh();
        boolean boolean6 = openMapRealVector2.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test1404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1404");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapTanhToSelf();
        double double41 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.0d + "'", double41 == 0.0d);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test1405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1405");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.subtract(realVector38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector33.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector33.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector30.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector30.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test1406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1406");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapDivideToSelf(14.355979641962135d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(1, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapSignumToSelf();
        double double22 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        boolean boolean23 = openMapRealVector2.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.058447528486587526d) + "'", double22 == (-0.058447528486587526d));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test1407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1407");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, false);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1408");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(realVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        double double36 = arrayRealVector33.getNorm();
        double double37 = arrayRealVector30.getL1Distance(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector7.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector7.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.4711276743037347d + "'", double11 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.528872325696266d + "'", double16 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 42.0d + "'", double36 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1409");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector26 = arrayRealVector24.copy();
        double[] doubleArray27 = arrayRealVector24.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, (org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector29 = arrayRealVector24.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(abstractRealVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(abstractRealVector29);
    }

    @Test
    public void test1410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1410");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        double[] doubleArray27 = arrayRealVector26.getDataRef();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.projection(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test1411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1411");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        double double5 = openMapRealVector2.getSparcity();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector18.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapTanhToSelf();
        double double25 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector23.add(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector38.mapCeil();
        double[] doubleArray43 = arrayRealVector38.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.6853169696133175d + "'", double25 == 1.6853169696133175d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[14.35414242816297]");
    }

    @Test
    public void test1412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1412");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1413");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapCosh();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapTanhToSelf();
        double[] doubleArray38 = new double[] {};
        double[] doubleArray40 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33, doubleArray38);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector46.subtract(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapCeilToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector46.add(realVector59);
        double[] doubleArray61 = arrayRealVector46.getData();
        double double62 = arrayRealVector33.getL1Distance(doubleArray61);
        double double63 = arrayRealVector17.getLInfDistance(doubleArray61);
        double double64 = arrayRealVector17.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 7.281718171542806d + "'", double62 == 7.281718171542806d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 9.314683030386682d + "'", double63 == 9.314683030386682d);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 0.6853169696133173d + "'", double64 == 0.6853169696133173d);
    }

    @Test
    public void test1414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1414");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapCbrt();
        double double22 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapPow((double) 0);
        double double41 = arrayRealVector26.getLInfDistance(arrayRealVector36);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector44.ebeDivide(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapTanh();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector26.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector19.ebeDivide(realVector59);
        double double61 = arrayRealVector6.getLInfDistance(arrayRealVector19);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction62 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector6.map(univariateRealFunction62);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 14.35414242816297d + "'", double22 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.64585757183703d + "'", double41 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.3141504231237282d + "'", double61 == 0.3141504231237282d);
    }

    @Test
    public void test1415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1415");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        arrayRealVector17.unitize();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector17.outerProduct(realVector27);
        double double30 = arrayRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector17.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector17.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector17.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13.35414242816297d + "'", double30 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1416");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double double34 = arrayRealVector28.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector28.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapPowToSelf(10.839071529076453d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test1417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1417");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test1418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1418");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        double double22 = arrayRealVector13.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapLogToSelf();
        double double31 = arrayRealVector27.getL1Norm();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double36 = arrayRealVector27.getL1Distance(arrayRealVector35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector39.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector39.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(realVector49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtractToSelf((double) '4');
        double double56 = arrayRealVector53.getNorm();
        double double57 = arrayRealVector50.getL1Distance(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector27.add(arrayRealVector53);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        double double63 = arrayRealVector53.dotProduct(realVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector20.add(arrayRealVector53);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapExpToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        double double76 = arrayRealVector72.dotProduct(arrayRealVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector67.add(arrayRealVector75);
        double[] doubleArray78 = arrayRealVector77.getDataRef();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector53.subtract(doubleArray78);
        double double80 = openMapRealVector2.getDistance(doubleArray78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector2.mapAdd((double) (-1.0f));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 8.528872325696266d + "'", double22 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.4711276743037347d + "'", double31 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 8.528872325696266d + "'", double36 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 42.0d + "'", double56 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-61.787362320756856d) + "'", double63 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 85.64585757183703d + "'", double80 == 85.64585757183703d);
        org.junit.Assert.assertNotNull(openMapRealVector82);
    }

    @Test
    public void test1419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1419");
        double[] doubleArray1 = new double[] { 9.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapLog();
        java.lang.String str4 = arrayRealVector2.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[9.0]");
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "{9}" + "'", str4, "{9}");
    }

    @Test
    public void test1420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1420");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapCbrtToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(realVector11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapSqrt();
        double[] doubleArray23 = arrayRealVector15.toArray();
        double double24 = openMapRealVector12.getL1Distance(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 7.845565309968116d + "'", double24 == 7.845565309968116d);
    }

    @Test
    public void test1421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1421");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(100, (double) (byte) 10);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapAddToSelf(0.6321205588285577d);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test1422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1422");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector13.unitVector();
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector13.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.6329299089739802d + "'", double42 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test1423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1423");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapLog();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double9 = openMapRealVector7.getEntry(0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 10, (int) (byte) 10, 2.3978952727983707d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector7.append(openMapRealVector15);
        double double17 = openMapRealVector2.getDistance(openMapRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(realVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        double double38 = arrayRealVector31.getL1Distance(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsin();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector15.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector31);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.0d + "'", double9 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.0d + "'", double17 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double38));
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1424");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1, 0.0d);
    }

    @Test
    public void test1425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1425");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[1.000000000000681]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1426");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapSinhToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapTanhToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapCbrt();
        boolean boolean49 = arrayRealVector39.equals((java.lang.Object) arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapAcosToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        double double62 = arrayRealVector53.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector60);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAbsToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector67.subtract(realVector72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector67.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector67);
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector67.ebeDivide(arrayRealVector79);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = arrayRealVector64.add(arrayRealVector80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector45.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector2.subtract(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapPow((double) 100.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 8.528872325696266d + "'", double62 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(arrayRealVector80);
        org.junit.Assert.assertNotNull(arrayRealVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(arrayRealVector83);
        org.junit.Assert.assertNotNull(realVector85);
    }

    @Test
    public void test1427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1427");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapCeil();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapLogToSelf();
        double double11 = arrayRealVector5.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.874591382923689d + "'", double11 == 0.874591382923689d);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test1428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1428");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector7.mapPow((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test1429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1429");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double3 = openMapRealVector2.getSparcity();
        boolean boolean4 = openMapRealVector2.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) -1, 1.6853169696133175d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.add(openMapRealVector8);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector9.getSubVector(10, (int) (byte) 0);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(openMapRealVector9);
    }

    @Test
    public void test1430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1430");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, 99.0d);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        boolean boolean83 = arrayRealVector80.isInfinite();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector69.add((org.apache.commons.math.linear.RealVector) arrayRealVector80);
        double[] doubleArray85 = openMapRealVector69.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[NaN]");
    }

    @Test
    public void test1431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1431");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector25.mapSignumToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector38.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(realVector48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapSubtractToSelf((double) '4');
        double double55 = arrayRealVector52.getNorm();
        double double56 = arrayRealVector49.getL1Distance(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector52.mapSqrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector25.projection(arrayRealVector52);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 42.0d + "'", double55 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double56));
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(arrayRealVector58);
    }

    @Test
    public void test1432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1432");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapMultiply(11.0d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1433");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapCosh();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapTanhToSelf();
        double[] doubleArray38 = new double[] {};
        double[] doubleArray40 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33, doubleArray38);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector46.subtract(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapCeilToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector46.add(realVector59);
        double[] doubleArray61 = arrayRealVector46.getData();
        double double62 = arrayRealVector33.getL1Distance(doubleArray61);
        double double63 = arrayRealVector17.getLInfDistance(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector17.mapSqrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[100.0]");
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[10.0]");
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 7.281718171542806d + "'", double62 == 7.281718171542806d);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 9.314683030386682d + "'", double63 == 9.314683030386682d);
        org.junit.Assert.assertNotNull(realVector64);
    }

    @Test
    public void test1434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1434");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSignumToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector28.mapExpm1ToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        double[] doubleArray38 = arrayRealVector35.getDataRef();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.ebeDivide(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector2.ebeMultiply(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, 1, 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1435");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector12.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test1436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1436");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLog10();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector11.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector11.mapAtanToSelf();
        double double24 = arrayRealVector11.getNorm();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector11.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector11.mapTanh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector5.projection(arrayRealVector11);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 8.881784197001252E-16d + "'", double24 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
    }

    @Test
    public void test1437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1437");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.mapAdd((double) (short) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor14 = openMapRealVector13.iterator();
        java.lang.Class<?> wildcardClass15 = openMapRealVector13.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(entryItor14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test1438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1438");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector9.mapAcos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1439");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.mapInvToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapDivideToSelf((double) (byte) 0);
        int int54 = arrayRealVector49.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector32.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector9.add(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapDivideToSelf(1.0d);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector56.mapPowToSelf(13.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector61);
    }

    @Test
    public void test1440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1440");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapDivideToSelf((double) 100L);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapFloor();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector22.mapSubtractToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test1441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1441");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector2.mapInvToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAbsToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector11.subtract(realVector16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector11.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector11);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector11.ebeDivide(arrayRealVector23);
        boolean boolean25 = arrayRealVector24.isInfinite();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.mapUlpToSelf();
        double double40 = arrayRealVector28.getNorm();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector28.mapInvToSelf();
        boolean boolean42 = arrayRealVector24.equals((java.lang.Object) arrayRealVector28);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector45.mapAsinToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector57.subtract(realVector62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector57.mapSqrt();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAbsToSelf();
        double double69 = arrayRealVector67.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector57.add(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector67.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector67.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector45.projection(realVector74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector28.subtract(arrayRealVector45);
        double double77 = openMapRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(0, (double) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector80);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 8.881784197001252E-16d + "'", double40 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 10.0d + "'", double69 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 1.1258999068426236E15d + "'", double77 == 1.1258999068426236E15d);
    }

    @Test
    public void test1442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1442");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test1443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1443");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector14.unitVector();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        openMapRealVector18.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector22.add(openMapRealVector25);
        int int28 = openMapRealVector25.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.unitVector();
        double[] doubleArray33 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33, true);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAddToSelf((double) 100L);
        double[] doubleArray51 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = openMapRealVector49.outerProduct(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33, doubleArray51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector30.append(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, 0, (int) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector14.ebeMultiply(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector60.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(openMapRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray51), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix52);
        org.junit.Assert.assertNotNull(openMapRealVector56);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(realVector61);
    }

    @Test
    public void test1444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1444");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector18.ebeDivide(arrayRealVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = arrayRealVector31.outerProduct(arrayRealVector62);
        double double68 = arrayRealVector12.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector12.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertNotNull(realVector69);
    }

    @Test
    public void test1445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1445");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector2.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(openMapRealVector7);
    }

    @Test
    public void test1446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1446");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapMultiplyToSelf((double) 1.0f);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray20 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtract(10.0d);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        double double28 = arrayRealVector26.getNorm();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapAtan();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        double double34 = arrayRealVector32.getNorm();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAtan();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.mapAsinToSelf();
        double double48 = arrayRealVector32.getLInfDistance(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26, (org.apache.commons.math.linear.RealVector) arrayRealVector38);
        double[] doubleArray50 = arrayRealVector38.toArray();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector21.add(doubleArray50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50, arrayRealVector54);
        double double63 = arrayRealVector14.dotProduct(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN]");
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test1447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1447");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector12.mapCoshToSelf();
        double[] doubleArray38 = arrayRealVector12.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[11.833336070820504]");
    }

    @Test
    public void test1448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1448");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector46.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector46.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
    }

    @Test
    public void test1449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1449");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector15, arrayRealVector32);
        double[] doubleArray40 = arrayRealVector32.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40, true);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[4.35414242816297]");
    }

    @Test
    public void test1450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1450");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector2.add(arrayRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector26.mapAddToSelf(1.718281828459045d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(openMapRealVector28);
    }

    @Test
    public void test1451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1451");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, Double.POSITIVE_INFINITY);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test1452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1452");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.getData();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapUlpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = arrayRealVector14.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        java.lang.String str42 = arrayRealVector14.toString();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector14.mapAtan();
        arrayRealVector2.set((int) (short) 0, arrayRealVector14);
        boolean boolean45 = arrayRealVector14.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "{0}" + "'", str42, "{0}");
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
    }

    @Test
    public void test1453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1453");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.String str30 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector2.subtract(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44, false);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        double double59 = arrayRealVector50.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapAsin();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector57.mapFloorToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.subtract(realVector69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector64.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAbsToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector79.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector75.subtract(realVector80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector75.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector75);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = arrayRealVector75.ebeDivide(arrayRealVector87);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = arrayRealVector64.subtract(arrayRealVector87);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector89.mapPowToSelf(10.839071529076453d);
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector57.subtract(realVector91);
        double double93 = arrayRealVector47.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector57.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector57.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{0}" + "'", str30, "{0}");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 8.528872325696266d + "'", double59 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(arrayRealVector88);
        org.junit.Assert.assertNotNull(arrayRealVector89);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(realVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 4.3541424281629695d + "'", double93 == 4.3541424281629695d);
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(realVector95);
    }

    @Test
    public void test1454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1454");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.append(realVector16);
        java.lang.String str18 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapSqrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, realVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapSqrt();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        double double52 = arrayRealVector50.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector40.add(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapLogToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector57.subtract(realVector62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector57.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector57.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(realVector67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector71.mapSubtractToSelf((double) '4');
        double double74 = arrayRealVector71.getNorm();
        double double75 = arrayRealVector68.getL1Distance(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector50.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        double double77 = arrayRealVector2.getDistance(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix79 = arrayRealVector2.outerProduct(realVector78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "{10}" + "'", str18, "{10}");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 10.0d + "'", double52 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 42.0d + "'", double74 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 7.697414907005954d + "'", double77 == 7.697414907005954d);
    }

    @Test
    public void test1455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1455");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapSqrt();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        double double36 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector24.add(arrayRealVector34);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapSubtractToSelf((double) '4');
        double double43 = arrayRealVector40.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector34.subtract(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector18.append(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector18.mapExp();
        boolean boolean47 = arrayRealVector15.equals((java.lang.Object) arrayRealVector18);
        double double48 = arrayRealVector18.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector18.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector18.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector18.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 10.0d + "'", double36 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 42.0d + "'", double43 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(arrayRealVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test1456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1456");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 99.0d, 1.4711276743037338d, 0.3141504231237282d, (-1.6433183218042784d), 59.39696961966999d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        boolean boolean8 = arrayRealVector7.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test1457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1457");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapDivideToSelf(14.355979641962135d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapTan();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector28.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapTanhToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector34 = arrayRealVector28.copy();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector2.add((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector46.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector46.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        double double63 = arrayRealVector59.dotProduct(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector54.add(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapTanhToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapCbrt();
        boolean boolean72 = arrayRealVector62.equals((java.lang.Object) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector68.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(realVector51, arrayRealVector68);
        boolean boolean76 = arrayRealVector75.isInfinite();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapExpToSelf();
        boolean boolean78 = arrayRealVector28.equals((java.lang.Object) realVector77);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(abstractRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 100.0d + "'", double63 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test1458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1458");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector26 = arrayRealVector24.copy();
        double[] doubleArray27 = arrayRealVector24.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, (org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapDivideToSelf((double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(abstractRealVector26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test1459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1459");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapAddToSelf(2.3978952727983707d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector16.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector16.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test1460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1460");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1461");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapPow((double) 0);
        double double36 = arrayRealVector21.getLInfDistance(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector21.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12, arrayRealVector21);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapSubtractToSelf((double) '4');
        double double44 = arrayRealVector41.getNorm();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector41.mapDivide((double) (byte) -1);
        double[] doubleArray47 = arrayRealVector41.getData();
        double double48 = arrayRealVector21.getL1Distance(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5.64585757183703d + "'", double36 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 42.0d + "'", double44 == 42.0d);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-42.0]");
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 44.154434690031884d + "'", double48 == 44.154434690031884d);
    }

    @Test
    public void test1462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1462");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double double13 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSinToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapPow((double) 0);
        double double36 = arrayRealVector21.getLInfDistance(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector21.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(realVector18, arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector2.add(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapSinToSelf();
        double double41 = arrayRealVector39.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6.0d + "'", double13 == 6.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 5.64585757183703d + "'", double36 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 0.22348828006555688d + "'", double41 == 0.22348828006555688d);
    }

    @Test
    public void test1463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1463");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapExpToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.add(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector33.append(realVector47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector51.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector51.mapAtanToSelf();
        double[] doubleArray62 = arrayRealVector51.getDataRef();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector33.add(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector24.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray62), "[NaN]");
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
    }

    @Test
    public void test1464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1464");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapPowToSelf((double) (short) -1);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test1465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1465");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        arrayRealVector12.set((double) (-1));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        double double28 = openMapRealVector25.getEntry(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 0.0d + "'", double28 == 0.0d);
    }

    @Test
    public void test1466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1466");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapLog1p();
        arrayRealVector2.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test1467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1467");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) -1, 14.355979641962135d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector3.mapCos();
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1468");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapLog10ToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        double double50 = arrayRealVector41.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector32.add(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 8.528872325696266d + "'", double50 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1469");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.mapUlp();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCeilToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector42.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector32.add(realVector45);
        double[] doubleArray47 = arrayRealVector32.getData();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, arrayRealVector53);
        double double57 = arrayRealVector23.getL1Distance(doubleArray47);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.0d + "'", double26 == 42.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 32.0d + "'", double57 == 32.0d);
    }

    @Test
    public void test1470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1470");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a');
    }

    @Test
    public void test1471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1471");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector2.add(arrayRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test1472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1472");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector9.add(realVector22);
        double[] doubleArray24 = arrayRealVector9.getData();
        openMapRealVector4.setSubVector((int) (short) 0, doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        double double32 = arrayRealVector28.getL1Norm();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double37 = arrayRealVector28.getL1Distance(arrayRealVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapSubtractToSelf((double) '4');
        double double57 = arrayRealVector54.getNorm();
        double double58 = arrayRealVector51.getL1Distance(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector28.add(arrayRealVector54);
        double double60 = arrayRealVector54.getL1Norm();
        double[] doubleArray61 = arrayRealVector54.toArray();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector54.mapRint();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsin();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapExpToSelf();
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        double double75 = arrayRealVector71.dotProduct(arrayRealVector74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector66.add(arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector76.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector76.mapExpm1ToSelf();
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapExpToSelf();
        double[] doubleArray86 = arrayRealVector83.getDataRef();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector76.ebeDivide(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector54.ebeDivide(doubleArray86);
        double double89 = openMapRealVector4.dotProduct(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.4711276743037347d + "'", double32 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 8.528872325696266d + "'", double37 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 42.0d + "'", double57 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 42.0d + "'", double60 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + 100.0d + "'", double75 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray86), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 43.5414242816297d + "'", double89 == 43.5414242816297d);
    }

    @Test
    public void test1473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1473");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector54.mapAsinToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapExpToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        double double67 = arrayRealVector63.dotProduct(arrayRealVector66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector58.add(arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapCbrt();
        double double71 = arrayRealVector68.getNorm();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector68.mapExpToSelf();
        double double73 = openMapRealVector54.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAbsToSelf();
        double double78 = arrayRealVector76.getNorm();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = new org.apache.commons.math.linear.OpenMapRealVector(realVector79);
        double[] doubleArray81 = openMapRealVector80.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector54.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector80);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertTrue("'" + double67 + "' != '" + 100.0d + "'", double67 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 14.35414242816297d + "'", double71 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 1713659.1765230843d + "'", double73 == 1713659.1765230843d);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 10.0d + "'", double78 == 10.0d);
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray81), "[1.4711276743037347]");
        org.junit.Assert.assertNotNull(openMapRealVector82);
    }

    @Test
    public void test1474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1474");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapUlpToSelf();
        double double33 = arrayRealVector19.getNorm();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        double double41 = arrayRealVector37.dotProduct(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapLog1pToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector55.mapPow((double) 0);
        double double60 = arrayRealVector45.getLInfDistance(arrayRealVector55);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector63.ebeDivide(arrayRealVector75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapTanh();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector45.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector76);
        double double79 = arrayRealVector40.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector45);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector19.setSubVector((-1), (org.apache.commons.math.linear.RealVector) arrayRealVector40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 5.64585757183703d + "'", double60 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 7.602104727201629d + "'", double79 == 7.602104727201629d);
    }

    @Test
    public void test1475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1475");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        openMapRealVector5.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test1476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1476");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector19.unitVector();
        openMapRealVector20.set(1.4142135623739385d);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapLogToSelf();
        double double43 = arrayRealVector39.getL1Norm();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double48 = arrayRealVector39.getL1Distance(arrayRealVector47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector51.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector51.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(realVector61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapSubtractToSelf((double) '4');
        double double68 = arrayRealVector65.getNorm();
        double double69 = arrayRealVector62.getL1Distance(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector39.add(arrayRealVector65);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        double double75 = arrayRealVector65.dotProduct(realVector74);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector32.add(arrayRealVector65);
        int int77 = arrayRealVector65.getDimension();
        // The following exception was thrown during execution in test generation
        try {
            double double78 = openMapRealVector20.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector65);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.4711276743037347d + "'", double43 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.528872325696266d + "'", double48 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 42.0d + "'", double68 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double69));
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue("'" + double75 + "' != '" + (-61.787362320756856d) + "'", double75 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1 + "'", int77 == 1);
    }

    @Test
    public void test1477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1477");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapAtanToSelf();
        org.junit.Assert.assertNotNull(realVector2);
    }

    @Test
    public void test1478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1478");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.mapMultiplyToSelf(42.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1479");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test1480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1480");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double double34 = arrayRealVector28.getL1Norm();
        double[] doubleArray35 = arrayRealVector28.toArray();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector28.mapRint();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsin();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.add(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapExpm1ToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        double[] doubleArray60 = arrayRealVector57.getDataRef();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector50.ebeDivide(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector28.ebeDivide(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector28.mapLog10();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
    }

    @Test
    public void test1481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1481");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector12.mapCosToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapExpToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        double double68 = arrayRealVector64.dotProduct(arrayRealVector67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = arrayRealVector59.add(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector59.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector59.mapSinh();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector59.mapCeil();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector59.mapSin();
        arrayRealVector59.unitize();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector59.mapSqrtToSelf();
        double double77 = arrayRealVector12.getL1Distance(realVector76);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertTrue("'" + double68 + "' != '" + 100.0d + "'", double68 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 0.4596976941316693d + "'", double77 == 0.4596976941316693d);
    }

    @Test
    public void test1482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1482");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSignum();
        double double20 = arrayRealVector12.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.8390715290764524d + "'", double20 == 0.8390715290764524d);
    }

    @Test
    public void test1483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1483");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapTanhToSelf();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray19 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, doubleArray17);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.mapExpToSelf();
        double[] doubleArray23 = arrayRealVector12.getDataRef();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector26.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector26.mapAtanToSelf();
        double[] doubleArray37 = arrayRealVector26.getDataRef();
        double double38 = arrayRealVector12.dotProduct(arrayRealVector26);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.setEntry((int) (short) 100, (double) 10.0f);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[2.718281828457194]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double38));
    }

    @Test
    public void test1484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1484");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(realVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        double double36 = arrayRealVector33.getNorm();
        double double37 = arrayRealVector30.getL1Distance(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40, (int) (byte) 0, (int) (short) 0);
        java.lang.String str45 = arrayRealVector44.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector30.ebeMultiply(arrayRealVector44);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 42.0d + "'", double36 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double37));
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "{}" + "'", str45, "{}");
    }

    @Test
    public void test1485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1485");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 9.0d);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapDivideToSelf(13.35414242816297d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAddToSelf(43.47112767430374d);
        double[] doubleArray10 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double11 = openMapRealVector5.getLInfDistance(doubleArray10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(openMapRealVector9);
    }

    @Test
    public void test1486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1486");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        arrayRealVector15.set(100.0d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector34.mapLog1p();
        int int40 = arrayRealVector34.getDimension();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCoshToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapSqrt();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        double double56 = arrayRealVector54.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector44.add(arrayRealVector54);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapSubtractToSelf((double) '4');
        double double63 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector54.subtract(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector34.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        double double77 = arrayRealVector73.dotProduct(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector68.add(arrayRealVector76);
        double[] doubleArray79 = arrayRealVector78.getDataRef();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector78.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector78.mapDivide((double) (short) -1);
        double[] doubleArray84 = arrayRealVector78.getDataRef();
        double double85 = arrayRealVector64.getLInfDistance(doubleArray84);
        org.apache.commons.math.linear.RealMatrix realMatrix86 = arrayRealVector15.outerProduct(doubleArray84);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 42.0d + "'", double63 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertTrue("'" + double77 + "' != '" + 100.0d + "'", double77 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector78);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray79), "[NaN]");
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(doubleArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray84), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double85));
        org.junit.Assert.assertNotNull(realMatrix86);
    }

    @Test
    public void test1487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1487");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.add(arrayRealVector29);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector31 = arrayRealVector13.copy();
        org.apache.commons.math.linear.RealVector realVector32 = abstractRealVector31.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(abstractRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test1488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1488");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        double[] doubleArray16 = openMapRealVector15.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[1.0]");
    }

    @Test
    public void test1489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1489");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.mapPowToSelf((double) 10.0f);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector2.append(realVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, true);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapSqrt();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        double double41 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector29.add(arrayRealVector39);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.subtract(arrayRealVector45);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double60 = arrayRealVector56.dotProduct(arrayRealVector59);
        double double61 = arrayRealVector52.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        double double62 = arrayRealVector45.getLInfDistance(arrayRealVector52);
        boolean boolean63 = arrayRealVector52.isInfinite();
        double[] doubleArray64 = arrayRealVector52.getData();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 10.0d + "'", double41 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8.528872325696266d + "'", double61 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 43.47112767430374d + "'", double62 == 43.47112767430374d);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[1.4711276743037347]");
        org.junit.Assert.assertNotNull(realVector66);
    }

    @Test
    public void test1490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1490");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.mapAdd((double) (short) -1);
        double double15 = openMapRealVector13.getEntry((int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.0d + "'", double15 == 0.0d);
    }

    @Test
    public void test1491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1491");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector13.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test1492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1492");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapCeil();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapSubtractToSelf((double) '4');
        double double23 = arrayRealVector20.getNorm();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector20.append(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapDivide(1.0E-12d);
        double double50 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCeil();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector16.ebeMultiply(realVector51);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 42.0d + "'", double23 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 59.39696961966999d + "'", double50 == 59.39696961966999d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
    }

    @Test
    public void test1493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1493");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 0, 59.39696961966999d);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = arrayRealVector6.add(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector6.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector6.mapSinh();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector6.mapLog();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector6.mapLog1pToSelf();
        boolean boolean22 = openMapRealVector3.equals((java.lang.Object) arrayRealVector6);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test1494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1494");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector11.mapPow((double) 0);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector11.append((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector18.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapPow((double) 10.0f);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector39.ebeDivide(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector28.subtract(arrayRealVector51);
        double double54 = arrayRealVector18.getLInfDistance(arrayRealVector28);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = arrayRealVector2.outerProduct(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector18.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realVector56);
    }

    @Test
    public void test1495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1495");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test1496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1496");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapDivideToSelf(14.355979641962135d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(1, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapSignumToSelf();
        double double22 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector2);
        double double24 = openMapRealVector23.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.058447528486587526d) + "'", double22 == (-0.058447528486587526d));
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 6.0d + "'", double24 == 6.0d);
    }

    @Test
    public void test1497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1497");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapRintToSelf();
        int int55 = arrayRealVector12.getDimension();
        double[] doubleArray56 = arrayRealVector12.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[1.0]");
    }

    @Test
    public void test1498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1498");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 1.0E-12d);
        double[] doubleArray7 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, true);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.unitVector();
        boolean boolean11 = openMapRealVector4.equals((java.lang.Object) realVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector29.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix42 = arrayRealVector15.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        java.lang.String str43 = arrayRealVector15.toString();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapExpToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        double double55 = arrayRealVector51.dotProduct(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector46.add(arrayRealVector54);
        double[] doubleArray57 = arrayRealVector56.getDataRef();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector15.subtract(doubleArray57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57, false);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapUlpToSelf();
        openMapRealVector4.setSubVector((int) (byte) 0, (org.apache.commons.math.linear.RealVector) arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "{0}" + "'", str43, "{0}");
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + 100.0d + "'", double55 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[1.7763568394002505E-15]");
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector61);
    }

    @Test
    public void test1499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1499");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, 1.6853169696133175d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.getSubVector((int) (byte) 1, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
    }

    @Test
    public void test1500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test1500");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        openMapRealVector20.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector11.add(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ', (int) (byte) 1, (double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector20.subtract(openMapRealVector28);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector24);
    }
}


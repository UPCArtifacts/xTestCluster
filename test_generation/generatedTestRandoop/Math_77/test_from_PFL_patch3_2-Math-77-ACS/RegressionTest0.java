import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector0 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector10.setSubVector((int) (short) 100, (org.apache.commons.math.linear.RealVector) arrayRealVector17);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCos();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double11 = arrayRealVector2.getEntry((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector4.projection(realVector5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        double[] doubleArray10 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix11 = arrayRealVector2.outerProduct(doubleArray10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        double[] doubleArray4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix5 = openMapRealVector2.outerProduct(doubleArray4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((-1), (double) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        double[] doubleArray24 = new double[] { (short) 1, 6.0d, (short) -1, 1.0f, 'a', (-1.0f) };
        // The following exception was thrown during execution in test generation
        try {
            double double25 = arrayRealVector2.dotProduct(doubleArray24);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[1.0, 6.0, -1.0, 1.0, 97.0, -1.0]");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapToSelf(univariateRealFunction3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        // The following exception was thrown during execution in test generation
        try {
            double double16 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray10 = new double[] { '4', 10L, 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            double double11 = openMapRealVector2.getDistance(doubleArray10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[52.0, 10.0, 1.0]");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = openMapRealVector2.getDistance(openMapRealVector4);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 0 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        double[] doubleArray9 = new double[] { 1.0f, 1.0f, '#', 1.0d };
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) 'a', doubleArray9);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[1.0, 1.0, 35.0, 1.0]");
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        double[] doubleArray6 = new double[] { (-1L), (byte) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector3.add(doubleArray6);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0]");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            double double7 = openMapRealVector3.getDistance(openMapRealVector6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 0 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        double[] doubleArray6 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            double double7 = openMapRealVector5.getLInfDistance(doubleArray6);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapLog10ToSelf();
        double[] doubleArray5 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix6 = arrayRealVector2.outerProduct(doubleArray5);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        double[] doubleArray20 = new double[] { 0, 5.64585757183703d, (-1.0d), 8.528872325696266d };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.ebeDivide(doubleArray20);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[0.0, 5.64585757183703, -1.0, 8.528872325696266]");
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        double[] doubleArray6 = new double[] { (short) -1, 0L, (-1.0f), (short) 1, 6.0d, (byte) 1 };
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 0.0, -1.0, 1.0, 6.0, 1.0]");
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        double[] doubleArray14 = new double[] { 100, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector6.ebeMultiply(doubleArray14);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[100.0, 0.0]");
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        double[] doubleArray23 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.subtract(doubleArray23);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0]");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = arrayRealVector2.add(arrayRealVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.mapLog1pToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = arrayRealVector5.dotProduct(arrayRealVector8);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        double[] doubleArray40 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector26.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector42);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[-1.0, 100.0]");
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        double double0 = org.apache.commons.math.linear.OpenMapRealVector.DEFAULT_ZERO_TOLERANCE;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 1.0E-12d + "'", double0 == 1.0E-12d);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        double[] doubleArray7 = new double[] { (byte) -1, 100, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            double double8 = openMapRealVector3.getLInfDistance(doubleArray7);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 100.0, -1.0]");
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        double[] doubleArray7 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix10 = openMapRealVector2.outerProduct(doubleArray7);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 100.0]");
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        double[] doubleArray32 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector26.add(doubleArray32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 100.0]");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCos();
        double[] doubleArray8 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, true);
        // The following exception was thrown during execution in test generation
        try {
            double double11 = arrayRealVector2.getLInfDistance(doubleArray8);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 100.0]");
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapSubtractToSelf((double) 1L);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.getSubVector((int) (byte) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.ebeMultiply(realVector11);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        double[] doubleArray20 = new double[] { 100L, 1.4711276743037347d, (short) -1, (byte) 10, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector2.subtract(doubleArray20);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0, 1.4711276743037347, -1.0, 10.0, -1.0]");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        double[] doubleArray19 = new double[] { (byte) 0, (short) 10, (byte) 100, (short) 100, 1.0E-12d, (short) 0 };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.add(doubleArray19);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[0.0, 10.0, 100.0, 100.0, 1.0E-12, 0.0]");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double13 = arrayRealVector2.getEntry((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setEntry(10, (-1.0d));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        boolean boolean28 = arrayRealVector2.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector0 = new org.apache.commons.math.linear.OpenMapRealVector();
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector3.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector3.mapAddToSelf((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector0.ebeDivide(realVector6);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.setEntry((int) '4', (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        double[] doubleArray4 = new double[] {};
        double[] doubleArray6 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4, doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) (short) 10, doubleArray6);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapDivideToSelf((double) (byte) 0);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1p();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector2.mapToSelf(univariateRealFunction9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setEntry((int) (short) -1, (double) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            double double18 = openMapRealVector13.getEntry((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix22 = arrayRealVector2.outerProduct(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] {};
        double[] doubleArray10 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, doubleArray10);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector(10, doubleArray10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[100.0]");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        double[] doubleArray30 = new double[] { 1L, 100L, 0L };
        // The following exception was thrown during execution in test generation
        try {
            double double31 = arrayRealVector26.getL1Distance(doubleArray30);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[1.0, 100.0, 0.0]");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector0 = new org.apache.commons.math.linear.OpenMapRealVector();
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector3.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapExpToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = arrayRealVector3.add(arrayRealVector11);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector0.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector11);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector13);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setEntry((int) '4', (double) '4');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        double[] doubleArray6 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix9 = arrayRealVector2.outerProduct(doubleArray6);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[-1.0, 100.0]");
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray24 = new double[] { (short) -1, (byte) -1, 100, 8.528872325696266d };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector17.outerProduct(doubleArray24);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, -1.0, 100.0, 8.528872325696266]");
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAbsToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double16 = arrayRealVector12.dotProduct(realVector15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapInvToSelf();
        double[] doubleArray9 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.subtract(doubleArray9);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = arrayRealVector2.subtract(arrayRealVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        openMapRealVector8.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector8.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector12.add(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector17.unitVector();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector21.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector17.append(openMapRealVector21);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector2.subtract(openMapRealVector23);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        double[] doubleArray17 = new double[] {};
        double[] doubleArray19 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray19);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector13.ebeMultiply(doubleArray17);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        double double12 = arrayRealVector2.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 6.0d + "'", double12 == 6.0d);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        java.lang.String str6 = arrayRealVector5.toString();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        java.lang.String str21 = arrayRealVector20.toString();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector5.setSubVector((int) '4', (org.apache.commons.math.linear.RealVector) arrayRealVector20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "{14.35}" + "'", str21, "{14.35}");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector10.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector10.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(realVector20);
        double[] doubleArray22 = arrayRealVector21.toArray();
        double double23 = arrayRealVector5.getLInfDistance(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, (int) (short) 0, (int) (byte) 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector5.setEntry((int) (short) -1, 0.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector0 = new org.apache.commons.math.linear.ArrayRealVector();
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        double[] doubleArray26 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26, true);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.ebeMultiply(doubleArray26);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 100.0]");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector6.mapCos();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector6.mapExpm1();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAddToSelf((double) 100L);
        double[] doubleArray27 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = openMapRealVector25.outerProduct(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector6.add(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) (byte) 100, doubleArray27);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 9]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, (int) (byte) 0, (int) (short) 0);
        java.lang.String str20 = arrayRealVector19.toString();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapInvToSelf();
        boolean boolean22 = arrayRealVector13.equals((java.lang.Object) realVector21);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "{}" + "'", str20, "{}");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        double[] doubleArray32 = new double[] { 8.528872325696266d, 1.0E-12d, (-1), 14.35414242816297d, 1.0d, (-1) };
        // The following exception was thrown during execution in test generation
        try {
            double double33 = arrayRealVector2.dotProduct(doubleArray32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[8.528872325696266, 1.0E-12, -1.0, 14.35414242816297, 1.0, -1.0]");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapLogToSelf();
        double double19 = arrayRealVector15.getL1Norm();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double24 = arrayRealVector15.getL1Distance(arrayRealVector23);
        double double25 = arrayRealVector12.getLInfDistance(arrayRealVector15);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAcosToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.setSubVector((int) '#', (org.apache.commons.math.linear.RealVector) arrayRealVector29);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 35 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4711276743037347d + "'", double19 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 8.528872325696266d + "'", double24 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapCosh();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapTanhToSelf();
        double[] doubleArray34 = new double[] {};
        double[] doubleArray36 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, doubleArray36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector29, doubleArray34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector6.ebeMultiply(doubleArray34);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector2.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapFloor();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.map(univariateRealFunction12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        double[] doubleArray6 = new double[] {};
        double[] doubleArray8 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, doubleArray8);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector4.setSubVector((int) 'a', doubleArray8);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[100.0]");
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector6.getSubVector((int) (byte) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        double double21 = openMapRealVector17.getNorm();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapTanhToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapCbrt();
        boolean boolean43 = arrayRealVector33.equals((java.lang.Object) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.mapSubtract(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector17.setSubVector(100, (org.apache.commons.math.linear.RealVector) arrayRealVector39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector4.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector5);
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        double double46 = arrayRealVector10.getEntry(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector11.map(univariateRealFunction18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapLog1pToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        double[] doubleArray40 = arrayRealVector39.toArray();
        double double41 = arrayRealVector23.getLInfDistance(doubleArray40);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) (byte) -1, doubleArray40);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 100.0d + "'", double24 == 100.0d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double41));
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        double[] doubleArray1 = new double[] { 1.4711276743037347d };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[1.4711276743037347]");
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        double double21 = openMapRealVector17.getNorm();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        double double26 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapAtan();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        double double32 = arrayRealVector30.getNorm();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapAtan();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        double double46 = arrayRealVector30.getLInfDistance(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24, (org.apache.commons.math.linear.RealVector) arrayRealVector36);
        double[] doubleArray48 = arrayRealVector36.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector17.subtract(doubleArray48);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector2.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.String str30 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector2.subtract(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44, false);
        java.lang.Class<?> wildcardClass48 = doubleArray44.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{0}" + "'", str30, "{0}");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(wildcardClass48);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector22.mapCos();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector22.mapExpm1();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        openMapRealVector30.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.add(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAddToSelf((double) 100L);
        double[] doubleArray43 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = openMapRealVector41.outerProduct(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector22.add(doubleArray43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector17.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector22);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        openMapRealVector9.unitize();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapSqrt();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector9.setSubVector((int) (short) -1, (org.apache.commons.math.linear.RealVector) arrayRealVector26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector2.getSubVector((int) (short) 100, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        // The following exception was thrown during execution in test generation
        try {
            double double43 = openMapRealVector13.getEntry((int) (short) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, 0, 100.0d);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        openMapRealVector6.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector6.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector10.add(openMapRealVector13);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAddToSelf((double) 100L);
        double[] doubleArray19 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix20 = openMapRealVector17.outerProduct(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        double[] doubleArray36 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = openMapRealVector34.outerProduct(doubleArray36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector17.append(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector3.ebeMultiply(doubleArray36);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(openMapRealVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(openMapRealVector40);
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.unitize();
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCos();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapCosh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        org.apache.commons.math.linear.RealVector realVector7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = arrayRealVector2.dotProduct(realVector7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAcosToSelf();
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, doubleArray9);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.subtract(doubleArray7);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[100.0]");
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = openMapRealVector6.subtract(openMapRealVector9);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector6);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapCos();
        org.apache.commons.math.linear.RealVector realVector7 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double8 = arrayRealVector2.getLInfDistance(realVector7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector18.mapUlpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        double double41 = arrayRealVector37.dotProduct(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector32.add(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix45 = arrayRealVector18.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapCos();
        boolean boolean53 = arrayRealVector42.equals((java.lang.Object) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.mapSqrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.set(1, arrayRealVector48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 100.0d + "'", double41 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realMatrix45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        double double14 = openMapRealVector9.getSparcity();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double3 = openMapRealVector2.getSparcity();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.append(openMapRealVector4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue(Double.isNaN(double3));
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector4.mapAdd((double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            double double8 = openMapRealVector1.dotProduct(openMapRealVector7);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector7);
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector37.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(realVector47);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector28.setSubVector(100, (org.apache.commons.math.linear.RealVector) arrayRealVector48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapDivideToSelf((double) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector17.setSubVector((int) '4', (org.apache.commons.math.linear.RealVector) arrayRealVector31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, (int) (byte) 10, (int) (short) 1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapToSelf(univariateRealFunction16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapFloor();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double double13 = arrayRealVector2.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 4.35414242816297d + "'", double13 == 4.35414242816297d);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray19 = new double[] { 1.4711276743037347d, 1.0E-12d, 14.354142428153194d, 5.64585757183703d, Double.NaN };
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector9.ebeMultiply(doubleArray19);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[1.4711276743037347, 1.0E-12, 14.354142428153194, 5.64585757183703, NaN]");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.ebeDivide(realVector16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAbsToSelf();
        double double13 = arrayRealVector11.getNorm();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector11.mapAtan();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        double double19 = arrayRealVector17.getNorm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAtan();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapAsinToSelf();
        double double33 = arrayRealVector17.getLInfDistance(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector11, (org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double[] doubleArray35 = arrayRealVector23.toArray();
        double double36 = arrayRealVector7.getDistance(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector7.mapTanh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector4.ebeMultiply(realVector37);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 10.0d + "'", double13 == 10.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 10.0d + "'", double19 == 10.0d);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue(Double.isNaN(double33));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double36));
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.map(univariateRealFunction7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapCosh();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapTanhToSelf();
        double[] doubleArray25 = new double[] {};
        double[] doubleArray27 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25, doubleArray27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.ebeMultiply(doubleArray25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[100.0]");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector13.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.map(univariateRealFunction21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        double[] doubleArray70 = new double[] { (short) -1, (byte) 1, (-1.0d) };
        // The following exception was thrown during execution in test generation
        try {
            double double71 = arrayRealVector2.dotProduct(doubleArray70);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[-1.0, 1.0, -1.0]");
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapUlpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector24.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = arrayRealVector10.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector5.projection((org.apache.commons.math.linear.RealVector) arrayRealVector34);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realMatrix37);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector0 = null;
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector3.mapRintToSelf();
        openMapRealVector3.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector3);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector6.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector0, (org.apache.commons.math.linear.RealVector) openMapRealVector7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(openMapRealVector7);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        double double23 = arrayRealVector14.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector2.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        double double32 = arrayRealVector28.getL1Norm();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double37 = arrayRealVector28.getL1Distance(arrayRealVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapSubtractToSelf((double) '4');
        double double57 = arrayRealVector54.getNorm();
        double double58 = arrayRealVector51.getL1Distance(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector28.add(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapSin();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapExpToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        double double72 = arrayRealVector68.dotProduct(arrayRealVector71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = arrayRealVector63.add(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector63.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector63.mapAtanToSelf();
        double double76 = arrayRealVector63.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector59.ebeDivide(arrayRealVector63);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector80.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector80.mapLogToSelf();
        double double84 = arrayRealVector80.getL1Norm();
        java.lang.Double[] doubleArray86 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        double double89 = arrayRealVector80.getL1Distance(arrayRealVector88);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector63, arrayRealVector80);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector21.set((int) (short) 10, arrayRealVector90);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 8.528872325696266d + "'", double23 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 1.4711276743037347d + "'", double32 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 8.528872325696266d + "'", double37 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 42.0d + "'", double57 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double58));
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 100.0d + "'", double72 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 8.881784197001252E-16d + "'", double76 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 1.4711276743037347d + "'", double84 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 8.528872325696266d + "'", double89 == 8.528872325696266d);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector6.mapAdd(85.64585757183703d);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector6.setEntry((int) (short) 1, 8.528872325696266d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(openMapRealVector8);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16, (double) 10L);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        openMapRealVector22.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector25.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector19.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector26);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector9.setSubVector((int) (short) 10, (org.apache.commons.math.linear.RealVector) openMapRealVector26);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapCosh();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector19.mapTanhToSelf();
        double[] doubleArray24 = new double[] {};
        double[] doubleArray26 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24, doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19, doubleArray24);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector6.ebeDivide(doubleArray24);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[100.0]");
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapExp();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector17.mapToSelf(univariateRealFunction22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        double double11 = arrayRealVector9.getNorm();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(realVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector13.mapAdd(85.64585757183703d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix16 = arrayRealVector5.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector15);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector15);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        openMapRealVector2.unitize();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, (int) (byte) 0, (int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) arrayRealVector12);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        java.lang.String str6 = arrayRealVector5.toString();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapSqrt();
        double[] doubleArray17 = arrayRealVector9.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix18 = arrayRealVector5.outerProduct(doubleArray17);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "{}" + "'", str6, "{}");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        arrayRealVector2.unitize();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapToSelf(univariateRealFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapTanhToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapCbrt();
        boolean boolean25 = arrayRealVector15.equals((java.lang.Object) arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector21.mapLog1p();
        int int27 = arrayRealVector21.getDimension();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCoshToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapSqrt();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        double double43 = arrayRealVector41.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector31.add(arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        double double50 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector41.subtract(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector21.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double64 = arrayRealVector60.dotProduct(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector55.add(arrayRealVector63);
        double[] doubleArray66 = arrayRealVector65.getDataRef();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector65.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector65.mapDivide((double) (short) -1);
        double[] doubleArray71 = arrayRealVector65.getDataRef();
        double double72 = arrayRealVector51.getLInfDistance(doubleArray71);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setSubVector((int) 'a', doubleArray71);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 10.0d + "'", double43 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 42.0d + "'", double50 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 100.0d + "'", double64 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        double double9 = arrayRealVector5.dotProduct(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapCeilToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double12 = openMapRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector8);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 100.0d + "'", double9 == 100.0d);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector16.getSubVector((int) (byte) 10, (int) (short) 100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.unitVector();
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(entryItor3);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 0);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        java.lang.String str9 = arrayRealVector5.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "{}" + "'", str9, "{}");
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        double double7 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapToSelf(univariateRealFunction8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.0d + "'", double7 == 6.0d);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapLog1pToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(realVector46);
        double[] doubleArray48 = arrayRealVector47.toArray();
        double double49 = arrayRealVector31.getLInfDistance(doubleArray48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector23.projection(doubleArray48);
        // The following exception was thrown during execution in test generation
        try {
            double double51 = openMapRealVector17.getDistance(doubleArray48);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(openMapRealVector50);
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        openMapRealVector39.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector39.mapAdd((double) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            double double44 = openMapRealVector36.getDistance(openMapRealVector43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(openMapRealVector43);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        double double55 = arrayRealVector53.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-32.0d) + "'", double55 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        boolean boolean11 = arrayRealVector2.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapRintToSelf();
        double double13 = openMapRealVector6.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 9.0d + "'", double13 == 9.0d);
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setEntry((-1), (double) (-1L));
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector7.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector7.mapSinh();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector7.mapCeil();
        boolean boolean22 = openMapRealVector4.equals((java.lang.Object) arrayRealVector7);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = openMapRealVector4.getEntry(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        double[] doubleArray8 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double9 = openMapRealVector2.getL1Distance(doubleArray8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapSqrt();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        double double34 = arrayRealVector32.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector22.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapLogToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector19.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapTanh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, false);
        double[] doubleArray19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, doubleArray19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector16.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        double[] doubleArray13 = new double[] {};
        double[] doubleArray15 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13, doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.add(doubleArray13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[100.0]");
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector36.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector2.subtract(arrayRealVector36);
        double double43 = arrayRealVector2.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 42.0d + "'", double39 == 42.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 1.4711276743037347d + "'", double43 == 1.4711276743037347d);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.copy();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector22.mapCos();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector22.mapExpm1();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        openMapRealVector30.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.add(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAddToSelf((double) 100L);
        double[] doubleArray43 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = openMapRealVector41.outerProduct(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector22.add(doubleArray43);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = openMapRealVector18.outerProduct(doubleArray43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43, false);
        // The following exception was thrown during execution in test generation
        try {
            double double49 = openMapRealVector2.getL1Distance(doubleArray43);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realMatrix46);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        double[] doubleArray14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector13.ebeMultiply(doubleArray14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        double double58 = arrayRealVector54.dotProduct(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector49.add(arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapCosh();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector59.mapTanhToSelf();
        double[] doubleArray64 = new double[] {};
        double[] doubleArray66 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64, doubleArray66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59, doubleArray64);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector41.add(doubleArray64);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 100.0d + "'", double58 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[]");
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[100.0]");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor11 = arrayRealVector2.iterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(entryItor11);
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        boolean boolean21 = openMapRealVector9.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        double double72 = arrayRealVector19.dotProduct(arrayRealVector61);
        double[] doubleArray73 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19, doubleArray73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.4711276743037347d + "'", double39 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 42.0d + "'", double64 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-61.787362320756856d) + "'", double71 == (-61.787362320756856d));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapDivideToSelf(8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.mapAsinToSelf();
        double double18 = arrayRealVector2.getLInfDistance(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapCoshToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setEntry((int) (short) 10, (double) 10);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue(Double.isNaN(double18));
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double14 = openMapRealVector11.getLInfDistance(realVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector25.mapTanToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapLog1pToSelf();
        double double44 = arrayRealVector25.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double[] doubleArray46 = new double[] {};
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector25.setSubVector((int) (byte) 100, doubleArray46);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.749534445339284d + "'", double44 == 1.749534445339284d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[]");
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        double[] doubleArray18 = arrayRealVector12.getDataRef();
        java.lang.Class<?> wildcardClass19 = arrayRealVector12.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapPow((double) (-1));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        double[] doubleArray21 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double22 = arrayRealVector12.dotProduct(doubleArray21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapLogToSelf();
        double double52 = arrayRealVector48.getL1Norm();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector5.set(1, arrayRealVector48);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.4711276743037347d + "'", double52 == 1.4711276743037347d);
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        double double15 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapSqrt();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.881784197001252E-16d + "'", double15 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.getSubVector((int) (byte) -1, (int) 'a');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapToSelf(univariateRealFunction15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.add(realVector14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlp();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector9.setEntry(100, 52.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector29);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector29.ebeDivide(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector18.subtract(arrayRealVector41);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector46.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector41.ebeDivide(arrayRealVector46);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = arrayRealVector15.outerProduct(arrayRealVector46);
        double[] doubleArray54 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54, true);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        openMapRealVector59.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector59.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector66.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector63.add(openMapRealVector66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector66.mapAddToSelf((double) 100L);
        double[] doubleArray72 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix73 = openMapRealVector70.outerProduct(doubleArray72);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector15.subtract(arrayRealVector76);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(openMapRealVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix73);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapCos();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapExpm1();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        double[] doubleArray36 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = openMapRealVector34.outerProduct(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector15.add(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector6.ebeDivide(realVector38);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector39.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(entryItor40);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.0d + "'", double26 == 42.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.String str30 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector2.subtract(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44, false);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapUlpToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double60 = arrayRealVector56.dotProduct(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = arrayRealVector51.add(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector51.mapUlpToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        double double74 = arrayRealVector70.dotProduct(arrayRealVector73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector65.add(arrayRealVector73);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix78 = arrayRealVector51.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector75);
        java.lang.String str79 = arrayRealVector51.toString();
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector82.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapExpToSelf();
        java.lang.Double[] doubleArray86 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        java.lang.Double[] doubleArray89 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray89);
        double double91 = arrayRealVector87.dotProduct(arrayRealVector90);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = arrayRealVector82.add(arrayRealVector90);
        double[] doubleArray93 = arrayRealVector92.getDataRef();
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector51.subtract(doubleArray93);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector96 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray93, false);
        org.apache.commons.math.linear.RealVector realVector97 = arrayRealVector47.ebeDivide(doubleArray93);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{0}" + "'", str30, "{0}");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[1.7763568394002505E-15]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 100.0d + "'", double74 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(realMatrix78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "{0}" + "'", str79, "{0}");
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(doubleArray89);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 100.0d + "'", double91 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector92);
        org.junit.Assert.assertNotNull(doubleArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray93), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector94);
        org.junit.Assert.assertNotNull(realVector97);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (short) 1, (int) (byte) 1);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapTanToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, true);
        double[] doubleArray23 = arrayRealVector20.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            double double24 = arrayRealVector5.getL1Distance(doubleArray23);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, 0, 100.0d);
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector3.mapCosToSelf();
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector2.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.mapAtan();
        int int21 = arrayRealVector12.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        boolean boolean18 = openMapRealVector15.isNaN();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(openMapRealVector19);
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapDivideToSelf((double) (byte) 0);
        int int38 = arrayRealVector33.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector16.append(realVector40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector39);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapAddToSelf((double) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix47 = arrayRealVector40.outerProduct(arrayRealVector43);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTan();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSin();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.mapAddToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector15.mapDivideToSelf((double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.4711276743037347d + "'", double11 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.528872325696266d + "'", double16 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        arrayRealVector26.unitize();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapTan();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector2.setEntry((int) (short) -1, (double) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        double double21 = openMapRealVector17.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector17.copy();
        int int23 = openMapRealVector17.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.0d + "'", double21 == 1.0d);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2 + "'", int23 == 2);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapTan();
        org.apache.commons.math.linear.RealVector realVector6 = null;
        // The following exception was thrown during execution in test generation
        try {
            double double7 = openMapRealVector2.getDistance(realVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector18.ebeDivide(arrayRealVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = arrayRealVector31.outerProduct(arrayRealVector62);
        double double68 = arrayRealVector12.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        java.lang.Object obj69 = null;
        boolean boolean70 = arrayRealVector12.equals(obj69);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertTrue(Double.isNaN(double68));
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        arrayRealVector16.set(1.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector16.add(arrayRealVector27);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector27.setEntry((int) ' ', 10.0d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 4.35414242816297d + "'", double22 == 4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        double double14 = openMapRealVector13.getSparcity();
        boolean boolean15 = openMapRealVector13.isInfinite();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector5.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapSqrt();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        double double34 = arrayRealVector32.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector22.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapLogToSelf();
        arrayRealVector32.set(1.0d);
        double[] doubleArray40 = new double[] {};
        double[] doubleArray42 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40, doubleArray42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapSubtract(10.0d);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        double double50 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAtan();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        double double56 = arrayRealVector54.getNorm();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapAtan();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector60.subtract(realVector65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector60.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector60.mapAsinToSelf();
        double double70 = arrayRealVector54.getLInfDistance(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48, (org.apache.commons.math.linear.RealVector) arrayRealVector60);
        double[] doubleArray72 = arrayRealVector60.toArray();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector43.add(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAbsToSelf();
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector76.subtract(realVector81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector76.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72, arrayRealVector76);
        arrayRealVector32.setSubVector((int) (byte) 0, doubleArray72);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector86 = openMapRealVector17.add((org.apache.commons.math.linear.RealVector) arrayRealVector32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[100.0]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 10.0d + "'", double56 == 10.0d);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray72), "[NaN]");
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector13.ebeMultiply(realVector37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        double[] doubleArray17 = new double[] {};
        double[] doubleArray19 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapSubtract(10.0d);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        double double27 = arrayRealVector25.getNorm();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAtan();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        double double33 = arrayRealVector31.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAtan();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapAsinToSelf();
        double double47 = arrayRealVector31.getLInfDistance(arrayRealVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector25, (org.apache.commons.math.linear.RealVector) arrayRealVector37);
        double[] doubleArray49 = arrayRealVector37.toArray();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector20.add(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector53.subtract(realVector58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector53.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49, arrayRealVector53);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector12.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector61);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[100.0]");
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double[] doubleArray25 = new double[] { 99.0d, (-61.787362320756856d), (-1.0f), 1.0f };
        // The following exception was thrown during execution in test generation
        try {
            double double26 = arrayRealVector20.getL1Distance(doubleArray25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[99.0, -61.787362320756856, -1.0, 1.0]");
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        double[] doubleArray13 = arrayRealVector10.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[2.3978952727983707]");
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAbsToSelf();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.subtract(realVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        // The following exception was thrown during execution in test generation
        try {
            double double14 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector13);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector45.subtract(realVector50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector45.ebeDivide(arrayRealVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector34.subtract(arrayRealVector57);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector57.ebeDivide(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector57.mapTanToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29, arrayRealVector57);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector29.getSubVector(2, 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 2 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector67);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, (int) (byte) 0, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapCosh();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        int int27 = openMapRealVector24.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.copy();
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector41.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector28.subtract(openMapRealVector41);
        double double44 = openMapRealVector14.getL1Distance(openMapRealVector43);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = openMapRealVector9.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector14);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 9.0d + "'", double44 == 9.0d);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.String str37 = arrayRealVector12.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "{1}" + "'", str37, "{1}");
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector26.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapLogToSelf();
        double double14 = arrayRealVector10.getL1Norm();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double19 = arrayRealVector10.getL1Distance(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapTan();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.set(100, arrayRealVector18);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.4711276743037347d + "'", double14 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 8.528872325696266d + "'", double19 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapFloor();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapSqrt();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        double double26 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector14.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector24.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.projection(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector2.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapMultiplyToSelf(4.35414242816297d);
        boolean boolean25 = arrayRealVector15.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector5.mapCos();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector5.mapExpm1();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector17.add(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAddToSelf((double) 100L);
        double[] doubleArray26 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = openMapRealVector24.outerProduct(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector5.add(doubleArray26);
        // The following exception was thrown during execution in test generation
        try {
            double double29 = arrayRealVector2.dotProduct(doubleArray26);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix27);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapExpToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        double double53 = arrayRealVector49.dotProduct(arrayRealVector52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector44.add(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapCosh();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector54.mapTanhToSelf();
        double[] doubleArray59 = new double[] {};
        double[] doubleArray61 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, doubleArray61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector13.ebeDivide(doubleArray59);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 100.0d + "'", double53 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[100.0]");
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector1.mapDivideToSelf(52.0d);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) 10L);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapSqrt();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        double double32 = arrayRealVector30.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector30.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(realVector17, arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 10.0d + "'", double32 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector7.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector7.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.projection(realVector16);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapSqrt();
        double[] doubleArray17 = arrayRealVector9.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector6.subtract(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(openMapRealVector18);
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapLog();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapFloor();
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapMultiplyToSelf((double) 10);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        double double47 = openMapRealVector43.getSparcity();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector43.mapUlpToSelf();
        double double49 = openMapRealVector31.getDistance(openMapRealVector43);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapCbrt();
        double double56 = openMapRealVector43.getDistance(realVector55);
        double[] doubleArray59 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, true);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector43.add(doubleArray59);
        double[] doubleArray63 = openMapRealVector43.getData();
        // The following exception was thrown during execution in test generation
        try {
            double double64 = arrayRealVector25.getLInfDistance(doubleArray63);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.0d + "'", double47 == 1.0d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 10.0d + "'", double49 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.6329299089739802d + "'", double56 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray63), "[0.0]");
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray36 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, doubleArray36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapDivideToSelf((double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector38.mapUlpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = arrayRealVector38.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        java.lang.String str66 = arrayRealVector38.toString();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        double[] doubleArray80 = arrayRealVector79.getDataRef();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector38.subtract(doubleArray80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80, false);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector25.ebeDivide(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector25.mapMultiplyToSelf(7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 43.47112767430374d + "'", double35 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "{0}" + "'", str66, "{0}");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray80), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector86);
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) 1);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.add(openMapRealVector7);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector13.mapUlpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector27.add(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix40 = arrayRealVector13.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        java.lang.String str41 = arrayRealVector13.toString();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector13.mapAtan();
        openMapRealVector9.setSubVector((int) (short) 0, realVector42);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 100.0d + "'", double36 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realMatrix40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "{0}" + "'", str41, "{0}");
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        double double22 = arrayRealVector13.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapLogToSelf();
        double double31 = arrayRealVector27.getL1Norm();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double36 = arrayRealVector27.getL1Distance(arrayRealVector35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector39.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector39.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(realVector49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtractToSelf((double) '4');
        double double56 = arrayRealVector53.getNorm();
        double double57 = arrayRealVector50.getL1Distance(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector27.add(arrayRealVector53);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        double double63 = arrayRealVector53.dotProduct(realVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector20.add(arrayRealVector53);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapExpToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        double double76 = arrayRealVector72.dotProduct(arrayRealVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector67.add(arrayRealVector75);
        double[] doubleArray78 = arrayRealVector77.getDataRef();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector53.subtract(doubleArray78);
        double double80 = openMapRealVector2.getDistance(doubleArray78);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor81 = openMapRealVector2.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 8.528872325696266d + "'", double22 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 1.4711276743037347d + "'", double31 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 8.528872325696266d + "'", double36 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 42.0d + "'", double56 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double57));
        org.junit.Assert.assertNotNull(arrayRealVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + (-61.787362320756856d) + "'", double63 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertTrue("'" + double76 + "' != '" + 100.0d + "'", double76 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector77);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray78), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector79);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 85.64585757183703d + "'", double80 == 85.64585757183703d);
        org.junit.Assert.assertNotNull(entryItor81);
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapCeil();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector20.mapSinh();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector20.mapLog();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapAbsToSelf();
        double double65 = arrayRealVector50.getL1Distance(arrayRealVector54);
        double double66 = arrayRealVector20.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAbsToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.subtract(realVector74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector69.mapSqrt();
        double[] doubleArray77 = arrayRealVector69.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector20.mapExpm1ToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double80 = arrayRealVector16.getL1Distance(arrayRealVector20);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 8.881784197001252E-16d + "'", double66 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray77), "[10.0]");
        org.junit.Assert.assertNotNull(realVector79);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapLog1pToSelf();
        boolean boolean42 = arrayRealVector39.isInfinite();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector45.add(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector39.ebeDivide(realVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector3, realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector3.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 100.0d + "'", double54 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapMultiplyToSelf((double) 10);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector22.mapAddToSelf(1.0d);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapPow(2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapSqrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double42 = arrayRealVector25.getDistance(arrayRealVector38);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) '#');
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 100.0d + "'", double81 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector82);
        org.junit.Assert.assertNotNull(doubleArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray83), "[NaN]");
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        double double31 = arrayRealVector20.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector12.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 6.0d + "'", double31 == 6.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector13.setEntry((int) (short) -1, 9.99999999999319E9d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        // The following exception was thrown during execution in test generation
        try {
            double double18 = arrayRealVector2.getEntry(100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector21);
        // The following exception was thrown during execution in test generation
        try {
            double double26 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector21);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        openMapRealVector13.set(43.47112767430374d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector32.unitVector();
        double double34 = openMapRealVector13.dotProduct(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf(1.4711276743037338d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 434.7112767430374d + "'", double34 == 434.7112767430374d);
        org.junit.Assert.assertNotNull(openMapRealVector36);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapRintToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        double double15 = arrayRealVector6.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector32.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector32.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(realVector42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        double double49 = arrayRealVector46.getNorm();
        double double50 = arrayRealVector43.getL1Distance(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector20.add(arrayRealVector46);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        double double56 = arrayRealVector46.dotProduct(realVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector13.add(arrayRealVector46);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapExpToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        double double69 = arrayRealVector65.dotProduct(arrayRealVector68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector60.add(arrayRealVector68);
        double[] doubleArray71 = arrayRealVector70.getDataRef();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector46.subtract(doubleArray71);
        double double73 = openMapRealVector2.getLInfDistance(doubleArray71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector2.mapAddToSelf((double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = new org.apache.commons.math.linear.OpenMapRealVector();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector75.subtract(openMapRealVector76);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.528872325696266d + "'", double15 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 42.0d + "'", double49 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-61.787362320756856d) + "'", double56 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 13.35414242816297d + "'", double73 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector75);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((-1), 0.0d);
        org.apache.commons.math.linear.RealVector realVector3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.add(realVector3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        double[] doubleArray6 = openMapRealVector5.getData();
        double[] doubleArray9 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9, true);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAddToSelf((double) 100L);
        double[] doubleArray27 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = openMapRealVector25.outerProduct(doubleArray27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector5.subtract(doubleArray9);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix28);
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapCosToSelf();
        org.junit.Assert.assertNotNull(realVector2);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector60.mapSubtractToSelf(1.4711276743037347d);
        double double69 = arrayRealVector60.getLInfNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 6.0d + "'", double69 == 6.0d);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector43, false);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        double double26 = arrayRealVector17.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector24);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.set((int) (byte) -1, arrayRealVector24);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 8.528872325696266d + "'", double26 == 8.528872325696266d);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapCbrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((-1), 2.3978952727983707d);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrt();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.getSubVector((int) (byte) -1, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) (short) 10, (double) ' ');
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        double double21 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapPowToSelf(1.0E-12d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapTanhToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        double double33 = arrayRealVector31.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAtan();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        double double39 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapAtan();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAbsToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector43.subtract(realVector48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector43.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector43.mapAsinToSelf();
        double double53 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31, (org.apache.commons.math.linear.RealVector) arrayRealVector43);
        double[] doubleArray55 = arrayRealVector43.toArray();
        double double56 = arrayRealVector27.getDistance(doubleArray55);
        // The following exception was thrown during execution in test generation
        try {
            double double57 = arrayRealVector20.getLInfDistance(doubleArray55);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.355979641962135d + "'", double21 == 14.355979641962135d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 10.0d + "'", double39 == 10.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertTrue(Double.isNaN(double53));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double56));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector2.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapLog();
        boolean boolean54 = arrayRealVector12.equals((java.lang.Object) arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        double[] doubleArray13 = arrayRealVector10.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13, (-1), (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NegativeArraySizeException; message: null");
        } catch (java.lang.NegativeArraySizeException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector26.mapAdd((double) (-1));
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector26.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        double[] doubleArray33 = arrayRealVector32.getDataRef();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.add(arrayRealVector48);
        double double51 = arrayRealVector40.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector32.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector32.mapAbs();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector18.ebeDivide(realVector53);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "{14.35}" + "'", str13, "{14.35}");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 100.0d + "'", double31 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[NaN]");
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 100.0d + "'", double49 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 6.0d + "'", double51 == 6.0d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(openMapRealVector54);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor3 = openMapRealVector2.sparseIterator();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.iterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapMultiply(5.64585757183703d);
        // The following exception was thrown during execution in test generation
        try {
            double double20 = openMapRealVector2.getL1Distance(realVector19);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(entryItor3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector17);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4');
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor5 = openMapRealVector4.sparseIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector4);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(entryItor5);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        double[] doubleArray37 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector13.append(59.39696961966999d);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector42.mapLogToSelf();
        double double46 = arrayRealVector42.getL1Norm();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double51 = arrayRealVector42.getL1Distance(arrayRealVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(realVector64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapSubtractToSelf((double) '4');
        double double71 = arrayRealVector68.getNorm();
        double double72 = arrayRealVector65.getL1Distance(arrayRealVector68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = arrayRealVector42.add(arrayRealVector68);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector76.mapSubtractToSelf((double) '4');
        double double79 = arrayRealVector76.getNorm();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector76.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector76.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector42.subtract(arrayRealVector76);
        // The following exception was thrown during execution in test generation
        try {
            double double83 = openMapRealVector39.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector82);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[101.0]");
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.4711276743037347d + "'", double46 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 8.528872325696266d + "'", double51 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + 42.0d + "'", double71 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(arrayRealVector73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 42.0d + "'", double79 == 42.0d);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(arrayRealVector82);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector40.unitVector();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector44.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector40.append(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector46.mapAdd(42.0d);
        double[] doubleArray49 = openMapRealVector46.toArray();
        // The following exception was thrown during execution in test generation
        try {
            double double50 = openMapRealVector28.getDistance(doubleArray49);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(openMapRealVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[10.0, 1.0]");
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        double double15 = arrayRealVector6.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector32.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector32.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(realVector42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        double double49 = arrayRealVector46.getNorm();
        double double50 = arrayRealVector43.getL1Distance(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector20.add(arrayRealVector46);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        double double56 = arrayRealVector46.dotProduct(realVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector13.add(arrayRealVector46);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapExpToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        double double69 = arrayRealVector65.dotProduct(arrayRealVector68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector60.add(arrayRealVector68);
        double[] doubleArray71 = arrayRealVector70.getDataRef();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector46.subtract(doubleArray71);
        double double73 = openMapRealVector2.getLInfDistance(doubleArray71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector2.mapAddToSelf((double) '#');
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector75.mapSignum();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 100.0d + "'", double14 == 100.0d);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 8.528872325696266d + "'", double15 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 42.0d + "'", double49 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + (-61.787362320756856d) + "'", double56 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector70);
        org.junit.Assert.assertNotNull(doubleArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray71), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertTrue("'" + double73 + "' != '" + 13.35414242816297d + "'", double73 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector75);
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapCos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector0 = null;
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        double double7 = arrayRealVector3.dotProduct(arrayRealVector6);
        double double8 = arrayRealVector3.getLInfNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector0, (org.apache.commons.math.linear.RealVector) arrayRealVector3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 100.0d + "'", double7 == 100.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 6.0d + "'", double8 == 6.0d);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        boolean boolean7 = openMapRealVector6.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((-1), 0.0d);
        double[] doubleArray3 = new double[] {};
        double[] doubleArray5 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3, doubleArray5);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector2.subtract(doubleArray3);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0]");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf((double) (-1.0f));
        java.lang.Class<?> wildcardClass15 = realVector14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray36 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36, arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapCeil();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector33.add(arrayRealVector50);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapInvToSelf();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector9.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector9.mapAtanToSelf();
        double double20 = arrayRealVector2.getDistance(realVector19);
        double double21 = arrayRealVector2.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 0.2296663502626633d + "'", double21 == 0.2296663502626633d);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapSubtractToSelf((double) 0L);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        double double20 = arrayRealVector17.getL1Norm();
        double double21 = arrayRealVector10.getLInfDistance(arrayRealVector17);
        double double22 = arrayRealVector17.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 42.0d + "'", double20 == 42.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 42.0d + "'", double22 == 42.0d);
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector30.mapRintToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47, true);
        double[] doubleArray50 = arrayRealVector47.getDataRef();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector30.setSubVector((-1), doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[10.0]");
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector0 = null;
        java.lang.Double[] doubleArray2 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector3.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector3.mapPow((double) 0);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector3.append((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapUlpToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector0, (org.apache.commons.math.linear.RealVector) arrayRealVector10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        // The following exception was thrown during execution in test generation
        try {
            double double5 = openMapRealVector2.getEntry((int) ' ');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector14);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        double double29 = arrayRealVector20.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapPowToSelf(5.64585757183703d);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector16.setSubVector(1, realVector31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', (int) (byte) 1);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.add(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.projection((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, arrayRealVector41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        double double65 = arrayRealVector61.dotProduct(arrayRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector56.add(arrayRealVector64);
        double[] doubleArray67 = arrayRealVector66.getDataRef();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector42.subtract(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector42.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertTrue("'" + double65 + "' != '" + 100.0d + "'", double65 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapCoshToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor23 = arrayRealVector21.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(entryItor23);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        boolean boolean34 = arrayRealVector31.isInfinite();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector31.mapLog10();
        boolean boolean36 = openMapRealVector13.equals((java.lang.Object) arrayRealVector31);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapSqrt();
        double[] doubleArray22 = arrayRealVector14.toArray();
        double double23 = openMapRealVector11.getL1Distance(doubleArray22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector11.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector24);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapTanToSelf();
        double double16 = openMapRealVector2.getSparcity();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapInv();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapSubtractToSelf((double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((-32.0d));
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        int int35 = openMapRealVector32.getDimension();
        double double36 = openMapRealVector32.getSparcity();
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector32.mapUlpToSelf();
        double double38 = openMapRealVector20.getDistance(openMapRealVector32);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapCbrt();
        double double45 = openMapRealVector32.getDistance(realVector44);
        double[] doubleArray48 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48, true);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector32.add(doubleArray48);
        double[] doubleArray52 = new double[] {};
        double[] doubleArray54 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52, doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48, arrayRealVector56);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector17.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector58);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 1.0d + "'", double36 == 1.0d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 1.6329299089739802d + "'", double45 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray52), "[]");
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[100.0]");
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapLog1pToSelf();
        double[] doubleArray5 = new double[] {};
        double[] doubleArray7 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, doubleArray7);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = arrayRealVector2.projection(arrayRealVector9);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[100.0]");
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1, (int) (byte) 1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector14.unitVector();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector18.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector14.append(openMapRealVector18);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        openMapRealVector23.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector14.add(openMapRealVector23);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector2.append(openMapRealVector23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector27);
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapSqrt();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        double double59 = arrayRealVector57.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector47.add(arrayRealVector57);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapSubtractToSelf((double) '4');
        double double66 = arrayRealVector63.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector57.subtract(arrayRealVector63);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAtanToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        double double79 = arrayRealVector70.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector77);
        double double80 = arrayRealVector63.getLInfDistance(arrayRealVector70);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapExpToSelf();
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        java.lang.Double[] doubleArray90 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray90);
        double double92 = arrayRealVector88.dotProduct(arrayRealVector91);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = arrayRealVector83.add(arrayRealVector91);
        double[] doubleArray94 = arrayRealVector93.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix95 = arrayRealVector70.outerProduct(doubleArray94);
        org.apache.commons.math.linear.RealVector realVector96 = arrayRealVector36.ebeMultiply(doubleArray94);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 42.0d + "'", double66 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 8.528872325696266d + "'", double79 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 43.47112767430374d + "'", double80 == 43.47112767430374d);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realMatrix95);
        org.junit.Assert.assertNotNull(realVector96);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector13.setEntry((int) (byte) 10, (double) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTan();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapDivideToSelf(85.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAddToSelf((double) 100);
        arrayRealVector12.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector10.map(univariateRealFunction17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4', (int) (byte) 0);
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector16.copy();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        double double29 = arrayRealVector20.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector27.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector27);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapLogToSelf();
        double double38 = arrayRealVector34.getL1Norm();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double43 = arrayRealVector34.getL1Distance(arrayRealVector42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAbsToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector46.subtract(realVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector46.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector46.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector46.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(realVector56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapSubtractToSelf((double) '4');
        double double63 = arrayRealVector60.getNorm();
        double double64 = arrayRealVector57.getL1Distance(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector34.add(arrayRealVector60);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        double double70 = arrayRealVector60.dotProduct(realVector69);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = arrayRealVector27.add(arrayRealVector60);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector74.mapExpToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        double double83 = arrayRealVector79.dotProduct(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = arrayRealVector74.add(arrayRealVector82);
        double[] doubleArray85 = arrayRealVector84.getDataRef();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector60.subtract(doubleArray85);
        double double87 = openMapRealVector16.getLInfDistance(doubleArray85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector16.mapAddToSelf((double) '#');
        double double90 = openMapRealVector89.getLInfNorm();
        double double91 = arrayRealVector8.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector89);
        boolean boolean92 = arrayRealVector2.equals((java.lang.Object) double91);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 100.0d + "'", double12 == 100.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 6.0d + "'", double13 == 6.0d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 1.4711276743037347d + "'", double38 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double43 + "' != '" + 8.528872325696266d + "'", double43 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertTrue("'" + double63 + "' != '" + 42.0d + "'", double63 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double64));
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + (-61.787362320756856d) + "'", double70 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(doubleArray78);
        org.junit.Assert.assertNotNull(doubleArray81);
        org.junit.Assert.assertTrue("'" + double83 + "' != '" + 100.0d + "'", double83 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector84);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector86);
        org.junit.Assert.assertTrue("'" + double87 + "' != '" + 13.35414242816297d + "'", double87 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(openMapRealVector89);
        org.junit.Assert.assertTrue("'" + double90 + "' != '" + 6.0d + "'", double90 == 6.0d);
        org.junit.Assert.assertTrue("'" + double91 + "' != '" + 26.0d + "'", double91 == 26.0d);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(2, (int) (short) 0);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapLogToSelf();
        double double9 = arrayRealVector5.getL1Norm();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double14 = arrayRealVector5.getL1Distance(arrayRealVector13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector17.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector17.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(realVector27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapSubtractToSelf((double) '4');
        double double34 = arrayRealVector31.getNorm();
        double double35 = arrayRealVector28.getL1Distance(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector5.add(arrayRealVector31);
        double double37 = arrayRealVector31.getL1Norm();
        double[] doubleArray38 = arrayRealVector31.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector2.projection(doubleArray38);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.4711276743037347d + "'", double9 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 8.528872325696266d + "'", double14 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double35));
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[-42.0]");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        double double31 = arrayRealVector20.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector12.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix37 = arrayRealVector12.outerProduct(arrayRealVector36);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 6.0d + "'", double31 == 6.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapSubtractToSelf(100.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        double[] doubleArray2 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, true);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector4.map(univariateRealFunction5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 100.0]");
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector19.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector15.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(realVector25);
        double[] doubleArray27 = arrayRealVector26.toArray();
        double double28 = arrayRealVector10.getLInfDistance(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.projection(doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = openMapRealVector29.getEntry(100);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(openMapRealVector29);
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        double double21 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapPowToSelf(1.0E-12d);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.ebeDivide(arrayRealVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector42);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector53.subtract(realVector58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector53.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector53.ebeDivide(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector42.subtract(arrayRealVector65);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector70.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector70.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector65.ebeDivide(arrayRealVector70);
        org.apache.commons.math.linear.RealMatrix realMatrix75 = arrayRealVector39.outerProduct(arrayRealVector70);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector70.mapCeil();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector20.add((org.apache.commons.math.linear.RealVector) arrayRealVector70);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.355979641962135d + "'", double21 == 14.355979641962135d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(arrayRealVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(realMatrix75);
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) '4');
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray3);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector4.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector4.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector4.mapLogToSelf();
        double double8 = arrayRealVector4.getL1Norm();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double13 = arrayRealVector4.getL1Distance(arrayRealVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector16.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(realVector26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        double double33 = arrayRealVector30.getNorm();
        double double34 = arrayRealVector27.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector4.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapSin();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        double double52 = arrayRealVector39.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector35.ebeDivide(arrayRealVector39);
        // The following exception was thrown during execution in test generation
        try {
            double double54 = arrayRealVector1.getDistance(arrayRealVector39);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.4711276743037347d + "'", double8 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 8.528872325696266d + "'", double13 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 42.0d + "'", double33 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(arrayRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 8.881784197001252E-16d + "'", double52 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(arrayRealVector53);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        openMapRealVector9.set(4.35414242816297d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        double double25 = openMapRealVector24.getSparcity();
        boolean boolean26 = openMapRealVector24.isInfinite();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        openMapRealVector29.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector33.add(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAddToSelf((double) 100L);
        double[] doubleArray42 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = openMapRealVector40.outerProduct(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector46.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector53.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector50.add(openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAddToSelf((double) 100L);
        double[] doubleArray59 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = openMapRealVector57.outerProduct(doubleArray59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector40.append(doubleArray59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector24.append(doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector9.setSubVector((int) ' ', (org.apache.commons.math.linear.RealVector) openMapRealVector64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.0d + "'", double25 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(openMapRealVector64);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        double double7 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAbs();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 6.0d + "'", double7 == 6.0d);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 10, (int) ' ');
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapAcos();
        openMapRealVector6.set((double) (short) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector26.add(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector26.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector26.mapSqrtToSelf();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector22.add(arrayRealVector26);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 100.0d + "'", double35 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapSqrtToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 3.788686108423733d + "'", double14 == 3.788686108423733d);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector23.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapLog10();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        boolean boolean16 = arrayRealVector15.isInfinite();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.String str24 = arrayRealVector19.toString();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "{2.4}" + "'", str24, "{2.4}");
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray38 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36, doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector29.ebeMultiply(arrayRealVector40);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0]");
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.mapAdd((double) (short) -1);
        int int14 = openMapRealVector2.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapSqrt();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        double double29 = arrayRealVector27.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector17.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.append(4.122307273313197E-9d);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector2.projection(realVector35);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 10.0d + "'", double29 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        double double21 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapDivideToSelf(9.99999999999319E9d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 14.355979641962135d + "'", double21 == 14.355979641962135d);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTan();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapSin();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapPow((double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapExp();
        double[] doubleArray18 = new double[] {};
        double[] doubleArray20 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtract(10.0d);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        double double28 = arrayRealVector26.getNorm();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapAtan();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        double double34 = arrayRealVector32.getNorm();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAtan();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.mapAsinToSelf();
        double double48 = arrayRealVector32.getLInfDistance(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26, (org.apache.commons.math.linear.RealVector) arrayRealVector38);
        double[] doubleArray50 = arrayRealVector38.toArray();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector21.add(doubleArray50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50, arrayRealVector54);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector10.setSubVector(2, doubleArray50);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 2 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 10.0d + "'", double28 == 10.0d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 10.0d + "'", double34 == 10.0d);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[NaN]");
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.projection((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 100.0d + "'", double16 == 100.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = openMapRealVector2.mapAdd((double) 1);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector2.add(openMapRealVector7);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.add(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector12.mapSqrtToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        double[] doubleArray39 = arrayRealVector38.getDataRef();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector38.mapDivide((double) (short) -1);
        double[] doubleArray44 = arrayRealVector38.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector12.add(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = openMapRealVector2.outerProduct(doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector38);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[NaN]");
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realMatrix46);
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd((double) 1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.add(openMapRealVector25);
        double double28 = openMapRealVector13.getL1Distance(openMapRealVector25);
        double[] doubleArray31 = new double[] { 0.0d, Double.POSITIVE_INFINITY };
        // The following exception was thrown during execution in test generation
        try {
            double double32 = openMapRealVector25.getDistance(doubleArray31);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.6249728132842707d + "'", double28 == 3.6249728132842707d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0, Infinity]");
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapCos();
        boolean boolean37 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.mapLog10ToSelf();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector32.mapToSelf(univariateRealFunction39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        boolean boolean16 = arrayRealVector15.isInfinite();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix18 = arrayRealVector15.outerProduct(arrayRealVector17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapSubtractToSelf((double) 1L);
        double[] doubleArray9 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9, true);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAddToSelf((double) 100L);
        double[] doubleArray27 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix28 = openMapRealVector25.outerProduct(doubleArray27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9, doubleArray27);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector2.ebeMultiply(arrayRealVector31);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix28);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapCeil();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector13.map(univariateRealFunction18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) ' ', (int) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapSubtract(26.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSqrt();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAbsToSelf();
        double double62 = arrayRealVector60.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector50.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector2.subtract(arrayRealVector60);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector69.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60, (org.apache.commons.math.linear.RealVector) arrayRealVector69);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector60.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector60.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 10.0d + "'", double62 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector79);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector19.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAbsToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector43.subtract(realVector48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector43.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector43);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector40.add(arrayRealVector51);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapCoshToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = arrayRealVector9.add(arrayRealVector13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapCosh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        boolean boolean54 = arrayRealVector42.isInfinite();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapSin();
        int int12 = arrayRealVector10.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector14.mapCosToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector29.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector29.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector29.mapSinh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector29.mapLog();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector14.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        int int45 = arrayRealVector14.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.add(openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAddToSelf((double) 100L);
        double[] doubleArray22 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = openMapRealVector20.outerProduct(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector6.append(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector6.mapAcosToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector35 = arrayRealVector33.copy();
        double[] doubleArray36 = arrayRealVector33.toArray();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector6.ebeMultiply(doubleArray36);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(openMapRealVector18);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix23);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(abstractRealVector35);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[]");
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        openMapRealVector8.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector8.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector12.add(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAddToSelf((double) 100L);
        double[] doubleArray21 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = openMapRealVector19.outerProduct(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21, false);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) (byte) -1, doubleArray21);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix22);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector48.mapDivide((double) (byte) -1);
        double[] doubleArray54 = arrayRealVector48.getData();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector5.setSubVector((int) '4', doubleArray54);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 42.0d + "'", double51 == 42.0d);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-42.0]");
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1p();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapCosh();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector24.mapTanhToSelf();
        double[] doubleArray29 = new double[] {};
        double[] doubleArray31 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, doubleArray31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24, doubleArray29);
        // The following exception was thrown during execution in test generation
        try {
            double double34 = arrayRealVector2.getDistance(doubleArray29);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[100.0]");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector13.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector13.mapInv();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        openMapRealVector33.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector40.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector37.add(openMapRealVector40);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector37.mapLog1pToSelf();
        double double44 = openMapRealVector13.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(entryItor29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 2.302585092994046d + "'", double44 == 2.302585092994046d);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        double[] doubleArray17 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, true);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAddToSelf((double) 100L);
        double[] doubleArray35 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix36 = openMapRealVector33.outerProduct(doubleArray35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, doubleArray35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector14.append(doubleArray35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, 0, (int) (byte) 0);
        java.lang.String str44 = arrayRealVector43.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix36);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "{}" + "'", str44, "{}");
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector31.mapCoshToSelf();
        double[] doubleArray33 = openMapRealVector31.getData();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector17.setSubVector((int) (short) 10, doubleArray33);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[11013.232920103324]");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapDivide((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector11.mapPow((double) 0);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector11.append((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector18.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapPow((double) 10.0f);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector39.ebeDivide(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector28.subtract(arrayRealVector51);
        double double54 = arrayRealVector18.getLInfDistance(arrayRealVector28);
        org.apache.commons.math.linear.RealMatrix realMatrix55 = arrayRealVector2.outerProduct(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector18.mapPowToSelf((double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(realMatrix55);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        arrayRealVector17.unitize();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector17.outerProduct(realVector27);
        double double30 = arrayRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        double[] doubleArray31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector17.add(doubleArray31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13.35414242816297d + "'", double30 == 13.35414242816297d);
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector2.mapExpm1ToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        double double66 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapAtan();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAbsToSelf();
        double double72 = arrayRealVector70.getNorm();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector70.mapAtan();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAbsToSelf();
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector76.subtract(realVector81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector76.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector76.mapAsinToSelf();
        double double86 = arrayRealVector70.getLInfDistance(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64, (org.apache.commons.math.linear.RealVector) arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector76.unitVector();
        double double89 = arrayRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector76);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 10.0d + "'", double66 == 10.0d);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 10.0d + "'", double72 == 10.0d);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(doubleArray75);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(realVector81);
        org.junit.Assert.assertNotNull(realVector82);
        org.junit.Assert.assertNotNull(realVector83);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertTrue(Double.isNaN(double86));
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue(Double.isNaN(double89));
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray14 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        double double23 = arrayRealVector19.getL1Norm();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double28 = arrayRealVector19.getL1Distance(arrayRealVector27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector31.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(realVector41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        double double49 = arrayRealVector42.getL1Distance(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector19.add(arrayRealVector45);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtractToSelf((double) '4');
        double double56 = arrayRealVector53.getNorm();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector53.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector19.subtract(arrayRealVector53);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.set((int) (byte) 10, arrayRealVector19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 1.4711276743037347d + "'", double23 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 8.528872325696266d + "'", double28 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 42.0d + "'", double48 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 42.0d + "'", double56 == 42.0d);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(arrayRealVector59);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 100);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1pToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector2.add(arrayRealVector22);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector29.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector29.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26, realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapCoshToSelf();
        double[] doubleArray13 = openMapRealVector11.getData();
        // The following exception was thrown during execution in test generation
        try {
            openMapRealVector11.setEntry(100, 1.6853169696133175d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[11013.232920103324]");
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector2.ebeDivide(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector52.mapAdd(1.4711276743037338d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[NaN]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realMatrix51);
        org.junit.Assert.assertNotNull(openMapRealVector52);
        org.junit.Assert.assertNotNull(openMapRealVector54);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapAddToSelf((-1.6433183218042784d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector13);
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.String str30 = arrayRealVector2.toString();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector2.subtract(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.append(10.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "{0}" + "'", str30, "{0}");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        double double33 = arrayRealVector24.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.ebeDivide(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector35.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        java.lang.String str54 = arrayRealVector16.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.528872325696266d + "'", double33 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "{(NaN)}" + "'", str54, "{(NaN)}");
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector14.mapAtan();
        double[] doubleArray35 = openMapRealVector14.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[0.0]");
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        double[] doubleArray34 = new double[] {};
        double[] doubleArray36 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, doubleArray36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapLog();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0]");
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector41);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        java.lang.String str35 = arrayRealVector30.toString();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-42}" + "'", str35, "{-42}");
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        arrayRealVector37.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapLog10();
        java.lang.Class<?> wildcardClass55 = realVector54.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector1 = new org.apache.commons.math.linear.ArrayRealVector((int) (short) 10);
        org.apache.commons.math.linear.RealVector realVector2 = arrayRealVector1.mapAsinToSelf();
        org.junit.Assert.assertNotNull(realVector2);
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAcosToSelf();
        java.lang.String str7 = arrayRealVector2.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "{(NaN)}" + "'", str7, "{(NaN)}");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector41 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector23.projection(realVector41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        double double5 = openMapRealVector4.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = openMapRealVector4.append(openMapRealVector6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 10.0d + "'", double5 == 10.0d);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapSubtract(10.839071529076453d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapLog1pToSelf();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector34.mapToSelf(univariateRealFunction43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        openMapRealVector37.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector44.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector41.add(openMapRealVector44);
        int int47 = openMapRealVector44.getDimension();
        double double48 = openMapRealVector44.getSparcity();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector44.mapUlpToSelf();
        double double50 = openMapRealVector32.getDistance(openMapRealVector44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapCbrt();
        double double57 = openMapRealVector44.getDistance(realVector56);
        double[] doubleArray60 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60, true);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector44.add(doubleArray60);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = arrayRealVector2.getL1Distance(doubleArray60);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 1.0d + "'", double48 == 1.0d);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 10.0d + "'", double50 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 1.6329299089739802d + "'", double57 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector63);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapExpm1ToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.add(arrayRealVector20);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector25.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector22, arrayRealVector25);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        double double36 = arrayRealVector33.getNorm();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector22.add((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        double double39 = arrayRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector2.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 100.0d + "'", double21 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 42.0d + "'", double36 == 42.0d);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 21983.465794806718d + "'", double39 == 21983.465794806718d);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAcosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor16 = arrayRealVector2.iterator();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapToSelf(univariateRealFunction17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(entryItor16);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector10.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector12.getSubVector((int) (short) 100, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapTanToSelf();
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = arrayRealVector6.add(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector6.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector6.mapAtanToSelf();
        double double19 = arrayRealVector2.getLInfDistance(arrayRealVector6);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor20 = arrayRealVector2.iterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 100.0d + "'", double15 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.4711276743037338d + "'", double19 == 1.4711276743037338d);
        org.junit.Assert.assertNotNull(entryItor20);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        double[] doubleArray7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector6.ebeDivide(doubleArray7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        java.lang.String str22 = arrayRealVector16.toString();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "{-42}" + "'", str22, "{-42}");
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(100);
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.String str23 = arrayRealVector22.toString();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{52}" + "'", str23, "{52}");
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector11.mapSinh();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector11.mapTanhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        double double34 = arrayRealVector28.getL1Norm();
        double[] doubleArray35 = arrayRealVector28.toArray();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector36 = arrayRealVector28.copy();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 42.0d + "'", double34 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-42.0]");
        org.junit.Assert.assertNotNull(abstractRealVector36);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.ebeDivide(realVector29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapCbrtToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.mapSubtractToSelf((-32.0d));
        double[] doubleArray23 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, true);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, doubleArray41);
        // The following exception was thrown during execution in test generation
        try {
            double double46 = arrayRealVector2.getLInfDistance(doubleArray23);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix42);
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor18 = arrayRealVector12.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(entryItor18);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector26.mapAsin();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapSqrt();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        double double54 = arrayRealVector52.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector42.add(arrayRealVector52);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapSubtractToSelf((double) '4');
        double double61 = arrayRealVector58.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.subtract(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector36.append(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapDivide(1.0E-12d);
        double double66 = arrayRealVector63.getNorm();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector26.projection((org.apache.commons.math.linear.RealVector) arrayRealVector63);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 42.0d + "'", double39 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 42.0d + "'", double61 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 59.39696961966999d + "'", double66 == 59.39696961966999d);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        double[] doubleArray20 = new double[] { 100 };
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.setSubVector((int) 'a', doubleArray20);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 97 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[100.0]");
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapAcosToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        double double30 = arrayRealVector22.dotProduct(realVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(realVector29);
        // The following exception was thrown during execution in test generation
        try {
            double double32 = openMapRealVector19.getDistance(openMapRealVector31);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, 2, 100);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector13.mapSubtractToSelf(2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector36.mapCeil();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(openMapRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(openMapRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix33);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector2.mapPowToSelf((double) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapLog();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapTanh();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapAbsToSelf();
        double double47 = arrayRealVector32.getL1Distance(arrayRealVector36);
        double double48 = arrayRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 8.881784197001252E-16d + "'", double48 == 8.881784197001252E-16d);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        double double30 = openMapRealVector29.getSparcity();
        boolean boolean31 = openMapRealVector29.isInfinite();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector38.add(openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAddToSelf((double) 100L);
        double[] doubleArray47 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector45.outerProduct(doubleArray47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector58.mapAddToSelf((double) 100L);
        double[] doubleArray64 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix65 = openMapRealVector62.outerProduct(doubleArray64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector45.append(doubleArray64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector29.append(doubleArray64);
        double[] doubleArray70 = openMapRealVector69.getData();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector12.subtract(doubleArray70);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.0d + "'", double30 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(openMapRealVector68);
        org.junit.Assert.assertNotNull(openMapRealVector69);
        org.junit.Assert.assertNotNull(doubleArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray70), "[9.0, NaN]");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        double[] doubleArray10 = arrayRealVector2.toArray();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapExpToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        double double22 = arrayRealVector18.dotProduct(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = arrayRealVector13.add(arrayRealVector21);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        double double37 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector23.add((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector2.mapPowToSelf(42.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 100.0d + "'", double22 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 42.0d + "'", double37 == 42.0d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector42);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        arrayRealVector2.unitize();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector2.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[NaN]");
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[NaN]");
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        double[] doubleArray15 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector9.outerProduct(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector5.projection(doubleArray15);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix16);
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapCosToSelf();
        arrayRealVector2.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapSqrtToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, (int) (byte) -1, (int) (short) 0);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapTanhToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector4.setSubVector((int) (short) -1, realVector19);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(100, 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        double double11 = openMapRealVector10.getL1Norm();
        double double12 = openMapRealVector5.dotProduct(openMapRealVector10);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector10);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 10.0d + "'", double11 == 10.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 10.0d + "'", double12 == 10.0d);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapSubtract(1.0d);
        arrayRealVector16.set((double) 0);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapSinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        boolean boolean34 = openMapRealVector14.isInfinite();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapLog();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector14.ebeDivide(realVector38);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 1.0d + "'", double18 == 1.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.6329299089739802d + "'", double27 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd((double) 1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.add(openMapRealVector25);
        double double28 = openMapRealVector13.getL1Distance(openMapRealVector25);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.6249728132842707d + "'", double28 == 3.6249728132842707d);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapAsin();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor39 = openMapRealVector37.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(entryItor39);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        double double8 = arrayRealVector6.getNorm();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector6.mapAtan();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapAtan();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        double double28 = arrayRealVector12.getLInfDistance(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, (org.apache.commons.math.linear.RealVector) arrayRealVector18);
        double[] doubleArray30 = arrayRealVector18.toArray();
        double double31 = arrayRealVector2.getDistance(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector2.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.mapTan();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector2.mapAsin();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 10.0d + "'", double8 == 10.0d);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertTrue(Double.isNaN(double28));
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double31));
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        int int26 = arrayRealVector14.getDimension();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector14.mapLogToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapExp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector12.mapMultiply(1.6853169696133175d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector39.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector39.mapSinh();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.mapLog();
        boolean boolean54 = arrayRealVector12.equals((java.lang.Object) arrayRealVector39);
        double double56 = arrayRealVector12.getEntry(0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 100.0d + "'", double30 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + double36 + "' != '" + 4.122307273313197E-9d + "'", double36 == 4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.0d + "'", double56 == 1.0d);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) '#');
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = openMapRealVector69.sparseIterator();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[NaN]");
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray66), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double67));
        org.junit.Assert.assertNotNull(entryItor70);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector2.mapInvToSelf();
        java.lang.Class<?> wildcardClass9 = openMapRealVector2.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(wildcardClass9);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapSqrt();
        double[] doubleArray22 = arrayRealVector14.toArray();
        double double23 = openMapRealVector11.getL1Distance(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, (int) (short) -1, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.0d + "'", double23 == 0.0d);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.append(4.122307273313197E-9d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCosh();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.set((int) ' ', arrayRealVector39);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 32 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector26.getSubVector((-1), (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(entryItor30);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        arrayRealVector2.setEntry(0, 14.354142428153194d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector2.map(univariateRealFunction21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapSin();
        arrayRealVector10.unitize();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector14.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector14.mapCosToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector29.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector29.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector29.mapSinh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector29.mapLog();
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector14.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector45 = arrayRealVector29.copy();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector29.mapAsin();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector29.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 100.0d + "'", double38 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(abstractRealVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(0);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector36.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector2.subtract(arrayRealVector36);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            double double49 = arrayRealVector36.getLInfDistance(arrayRealVector47);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 42.0d + "'", double39 == 42.0d);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(arrayRealVector42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector2.mapMultiply(0.0d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector10);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector9.append(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector14.unitVector();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector14.setEntry((-1), 11011.76174702909d);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector41.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(realVector47);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapTanhToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapCbrt();
        boolean boolean35 = arrayRealVector25.equals((java.lang.Object) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector31.mapLog1p();
        int int37 = arrayRealVector31.getDimension();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCoshToSelf();
        arrayRealVector10.setSubVector(0, realVector38);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(realVector38);
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLog10ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector23.mapUlpToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix50 = arrayRealVector23.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        arrayRealVector47.unitize();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        // The following exception was thrown during execution in test generation
        try {
            double double53 = arrayRealVector20.getL1Distance(arrayRealVector52);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realMatrix50);
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapDivideToSelf((double) 100L);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector22.ebeMultiply(arrayRealVector25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        double[] doubleArray26 = arrayRealVector14.toArray();
        double[] doubleArray27 = arrayRealVector14.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[NaN]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[NaN]");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector13.mapAdd((double) 0);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector13.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapCeil();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapCos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector42);
        // The following exception was thrown during execution in test generation
        try {
            double double45 = openMapRealVector43.getEntry((int) '#');
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 35 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapExpToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.add(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector46.mapDivideToSelf((double) (byte) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector3.ebeMultiply(arrayRealVector46);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector55.mapPow((double) 0);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector55.append((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector51.setSubVector((int) (short) -1, realVector64);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector19);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector24.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector24.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector19.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector24.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix38 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(arrayRealVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realMatrix38);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        double[] doubleArray29 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.projection(doubleArray29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAtan();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        double double45 = arrayRealVector29.getLInfDistance(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, (org.apache.commons.math.linear.RealVector) arrayRealVector35);
        double[] doubleArray47 = arrayRealVector35.toArray();
        double double48 = arrayRealVector19.getDistance(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector6.subtract(doubleArray47);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector52.mapPow((double) 0);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector52.append((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector59.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector6.subtract(realVector64);
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue(Double.isNaN(double45));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double48));
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.unitVector();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector24.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector32.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector37 = arrayRealVector32.copy();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector21.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector32);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 100.0d + "'", double33 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(abstractRealVector37);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapSqrt();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        double double21 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector9.add(arrayRealVector19);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector23 = arrayRealVector19.copy();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector19.append((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapSignumToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) (short) 1, realVector43);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 10.0d + "'", double21 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(abstractRealVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 10.0d + "'", double38 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.map(univariateRealFunction13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector26.mapAsin();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector26.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, 2);
        double[] doubleArray5 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, true);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        openMapRealVector10.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector14.add(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAddToSelf((double) 100L);
        double[] doubleArray23 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix24 = openMapRealVector21.outerProduct(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5, doubleArray23);
        // The following exception was thrown during execution in test generation
        try {
            double double28 = openMapRealVector2.getLInfDistance(doubleArray5);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix24);
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        double double18 = arrayRealVector2.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector2.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapMultiplyToSelf((double) (-1L));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 6.0d + "'", double18 == 6.0d);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        int int27 = openMapRealVector24.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.copy();
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector41.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector28.subtract(openMapRealVector41);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor44 = openMapRealVector28.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector28.mapInv();
        double double46 = openMapRealVector9.dotProduct(openMapRealVector28);
        double[] doubleArray47 = openMapRealVector28.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(openMapRealVector42);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertNotNull(entryItor44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 1.0d + "'", double46 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[1.0]");
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector17.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        // The following exception was thrown during execution in test generation
        try {
            double double24 = openMapRealVector17.dotProduct(openMapRealVector23);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLog10ToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapPow((double) 0);
        double double34 = arrayRealVector19.getLInfDistance(arrayRealVector29);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector19.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector12.ebeDivide(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapTanh();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector12.mapUlpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 14.35414242816297d + "'", double15 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 5.64585757183703d + "'", double34 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(arrayRealVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapSubtract(1.0d);
        arrayRealVector16.set((double) 0);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapTanhToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        double double38 = arrayRealVector29.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector36.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        double double47 = arrayRealVector43.getL1Norm();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        double double52 = arrayRealVector43.getL1Distance(arrayRealVector51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector55.subtract(realVector60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector55.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector55.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector55.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(realVector65);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapSubtractToSelf((double) '4');
        double double72 = arrayRealVector69.getNorm();
        double double73 = arrayRealVector66.getL1Distance(arrayRealVector69);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector43.add(arrayRealVector69);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector77.mapAtanToSelf();
        double double79 = arrayRealVector69.dotProduct(realVector78);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector36.add(arrayRealVector69);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector83.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapExpToSelf();
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        java.lang.Double[] doubleArray90 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector91 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray90);
        double double92 = arrayRealVector88.dotProduct(arrayRealVector91);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = arrayRealVector83.add(arrayRealVector91);
        double[] doubleArray94 = arrayRealVector93.getDataRef();
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector69.subtract(doubleArray94);
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector16.set(10, arrayRealVector69);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 10 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 100.0d + "'", double37 == 100.0d);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 8.528872325696266d + "'", double38 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 1.4711276743037347d + "'", double47 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 8.528872325696266d + "'", double52 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertTrue("'" + double72 + "' != '" + 42.0d + "'", double72 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double73));
        org.junit.Assert.assertNotNull(arrayRealVector74);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertNotNull(realVector78);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + (-61.787362320756856d) + "'", double79 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector80);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(realVector85);
        org.junit.Assert.assertNotNull(doubleArray87);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertTrue("'" + double92 + "' != '" + 100.0d + "'", double92 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector93);
        org.junit.Assert.assertNotNull(doubleArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray94), "[14.35414242816297]");
        org.junit.Assert.assertNotNull(realVector95);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapExpm1ToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor18 = arrayRealVector14.iterator();
        double[] doubleArray25 = new double[] { 2.302585092994046d, (-6.853169696133174d), 2, 4.3541424281629695d, 99.0d };
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector14.setSubVector((int) (short) 100, doubleArray25);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(entryItor18);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[2.302585092994046, -6.853169696133174, 2.0, 4.3541424281629695, 99.0]");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        arrayRealVector17.unitize();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector17.outerProduct(realVector27);
        double double30 = arrayRealVector14.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector14.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 13.35414242816297d + "'", double30 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(10, (int) '4', (double) 100L);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector6.add(arrayRealVector26);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        double double35 = arrayRealVector33.getNorm();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAtan();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector39.mapAsinToSelf();
        double double49 = arrayRealVector33.getLInfDistance(arrayRealVector39);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector52.subtract(realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector52.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector52.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector52.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(realVector62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapSubtractToSelf((double) '4');
        double double69 = arrayRealVector66.getNorm();
        double double70 = arrayRealVector63.getL1Distance(arrayRealVector66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapCoshToSelf();
        double[] doubleArray73 = arrayRealVector71.getData();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector33.subtract(doubleArray73);
        double double75 = arrayRealVector30.getDistance(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double76 = openMapRealVector3.getDistance(doubleArray73);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertTrue(Double.isNaN(double49));
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 42.0d + "'", double69 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[NaN]");
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertTrue(Double.isNaN(double75));
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor5 = openMapRealVector4.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector4.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(entryItor5);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        double double28 = arrayRealVector19.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector15.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector15.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector15.mapAtanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 8.528872325696266d + "'", double28 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, false);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAcosToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.unitVector();
        double[] doubleArray37 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, true);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        openMapRealVector42.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector49.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector46.add(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector49.mapAddToSelf((double) 100L);
        double[] doubleArray55 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector53.outerProduct(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector34.append(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, 0, (int) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            double double64 = arrayRealVector18.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector63);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(openMapRealVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix56);
        org.junit.Assert.assertNotNull(openMapRealVector60);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        double double24 = arrayRealVector8.getLInfDistance(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector2.mapCos();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector17.unitVector();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTan();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapCeilToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapExpToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double62 = arrayRealVector58.dotProduct(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector53.add(arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector61.mapTanhToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector67.mapCbrt();
        boolean boolean71 = arrayRealVector61.equals((java.lang.Object) arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector67.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(realVector50, arrayRealVector67);
        boolean boolean75 = arrayRealVector74.isInfinite();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector74.mapUlp();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector2.setSubVector((int) (byte) 100, (org.apache.commons.math.linear.RealVector) arrayRealVector74);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 100 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.4711276743037347d + "'", double6 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 42.0d + "'", double31 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double32));
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 100.0d + "'", double46 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertTrue("'" + double62 + "' != '" + 100.0d + "'", double62 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray66);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(realVector76);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapPowToSelf(10.839071529076453d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.map(univariateRealFunction30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapExp();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(realVector21);
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector9.append(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector14.unitVector();
        java.lang.Class<?> wildcardClass28 = arrayRealVector14.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(wildcardClass28);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (int) (byte) 10);
        double double3 = openMapRealVector2.getL1Norm();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapAcos();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector13.append(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector13.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        double double72 = arrayRealVector19.dotProduct(arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector19.mapMultiplyToSelf((-1.0d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertTrue("'" + double39 + "' != '" + 1.4711276743037347d + "'", double39 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 8.528872325696266d + "'", double44 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertTrue("'" + double64 + "' != '" + 42.0d + "'", double64 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double65));
        org.junit.Assert.assertNotNull(arrayRealVector66);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + double71 + "' != '" + (-61.787362320756856d) + "'", double71 == (-61.787362320756856d));
        org.junit.Assert.assertTrue(Double.isNaN(double72));
        org.junit.Assert.assertNotNull(realVector74);
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapAcos();
        boolean boolean8 = openMapRealVector6.isNaN();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.ebeMultiply(realVector17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(realVector15);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.mapInvToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapDivideToSelf((double) (byte) 0);
        int int54 = arrayRealVector49.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector32.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector9.add(arrayRealVector55);
        double[] doubleArray57 = new double[] {};
        double[] doubleArray59 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57, doubleArray59);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealMatrix realMatrix61 = arrayRealVector56.outerProduct(doubleArray57);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[]");
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[100.0]");
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector12.mapLog10();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        double double66 = arrayRealVector62.dotProduct(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector57.add(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector65.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector65.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapExpToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        double double82 = arrayRealVector78.dotProduct(arrayRealVector81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector73.add(arrayRealVector81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector81.mapTanhToSelf();
        java.lang.Double[] doubleArray86 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray86);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector87.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector87.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector87.mapCbrt();
        boolean boolean91 = arrayRealVector81.equals((java.lang.Object) arrayRealVector87);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector87.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector94 = new org.apache.commons.math.linear.ArrayRealVector(realVector70, arrayRealVector87);
        double[] doubleArray95 = arrayRealVector87.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix96 = arrayRealVector12.outerProduct(doubleArray95);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 100.0d + "'", double26 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 100.0d + "'", double40 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realMatrix44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + double53 + "' != '" + 14.354142428153194d + "'", double53 == 14.354142428153194d);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 100.0d + "'", double66 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(doubleArray72);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(doubleArray80);
        org.junit.Assert.assertTrue("'" + double82 + "' != '" + 100.0d + "'", double82 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector83);
        org.junit.Assert.assertNotNull(realVector84);
        org.junit.Assert.assertNotNull(doubleArray86);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(realVector93);
        org.junit.Assert.assertNotNull(doubleArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray95), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realMatrix96);
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, 0, 100.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector3.append(openMapRealVector4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapCbrtToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector30.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector26.append(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector32.mapAdd(42.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector((int) 'a', (int) (short) -1, 14.355979641962135d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.append(openMapRealVector38);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.projection((org.apache.commons.math.linear.RealVector) openMapRealVector34);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector39);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        org.apache.commons.math.linear.RealVector realVector12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.projection(realVector12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue(Double.isNaN(double10));
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.append(26.0d);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapSinh();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor7 = arrayRealVector2.iterator();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapAtan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(entryItor7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        double[] doubleArray14 = new double[] {};
        double[] doubleArray16 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14, doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16, arrayRealVector20);
        // The following exception was thrown during execution in test generation
        try {
            double double31 = openMapRealVector13.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector30);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapTanh();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 10.0d + "'", double10 == 10.0d);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 10.0d + "'", double16 == 10.0d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[NaN]");
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        arrayRealVector12.set((double) (-1));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, (int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) openMapRealVector25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        openMapRealVector29.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector33.add(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAddToSelf((double) 100L);
        double[] doubleArray42 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix43 = openMapRealVector40.outerProduct(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector46.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector53.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector50.add(openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAddToSelf((double) 100L);
        double[] doubleArray59 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = openMapRealVector57.outerProduct(doubleArray59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector40.append(doubleArray59);
        double[] doubleArray64 = openMapRealVector40.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector40.append(59.39696961966999d);
        // The following exception was thrown during execution in test generation
        try {
            double double67 = openMapRealVector25.dotProduct(openMapRealVector66);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(openMapRealVector57);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix60);
        org.junit.Assert.assertNotNull(openMapRealVector63);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[101.0]");
        org.junit.Assert.assertNotNull(openMapRealVector66);
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        double double33 = arrayRealVector24.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.ebeDivide(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector35.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector35.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 8.528872325696266d + "'", double33 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(arrayRealVector51);
        org.junit.Assert.assertNotNull(arrayRealVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.append(4.35414242816297d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector26.mapAsin();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector43.copy();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector47.mapRintToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector60.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector47.subtract(openMapRealVector60);
        double double63 = openMapRealVector26.getL1Distance(openMapRealVector47);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(openMapRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(entryItor30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(openMapRealVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(openMapRealVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(openMapRealVector60);
        org.junit.Assert.assertNotNull(openMapRealVector61);
        org.junit.Assert.assertNotNull(openMapRealVector62);
        org.junit.Assert.assertTrue(Double.isNaN(double63));
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector12.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector12.mapFloor();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector12.mapAtan();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector12.mapSubtractToSelf((double) 2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf((double) (-1.0f));
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapDivide(9.99999999999319E9d);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector10.map(univariateRealFunction17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        double double10 = openMapRealVector7.getSparcity();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapSqrt();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapTanhToSelf();
        double double30 = openMapRealVector7.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector28.add(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector43.mapExpm1();
        double double48 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector2.mapLog1p();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 10.0d + "'", double25 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue("'" + double30 + "' != '" + 1.6853169696133175d + "'", double30 == 1.6853169696133175d);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(arrayRealVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 13.35414242816297d + "'", double48 == 13.35414242816297d);
        org.junit.Assert.assertNotNull(realVector49);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) -1);
        double[] doubleArray2 = new double[] {};
        double[] doubleArray4 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, doubleArray4);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4, arrayRealVector8);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAbsToSelf();
        double double27 = arrayRealVector25.getNorm();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAtan();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        double double33 = arrayRealVector31.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAtan();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapAsinToSelf();
        double double47 = arrayRealVector31.getLInfDistance(arrayRealVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector25, (org.apache.commons.math.linear.RealVector) arrayRealVector37);
        double[] doubleArray49 = arrayRealVector37.toArray();
        double double50 = arrayRealVector21.getDistance(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector8.subtract(doubleArray49);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector1.append(doubleArray49);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, -1]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 10.0d + "'", double27 == 10.0d);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 10.0d + "'", double33 == 10.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray49), "[NaN]");
        org.junit.Assert.assertTrue(Double.isNaN(double50));
        org.junit.Assert.assertNotNull(realVector51);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector((-1));
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.mapInvToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapDivideToSelf((double) (byte) 0);
        int int54 = arrayRealVector49.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector32.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector9.add(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 100.0d + "'", double27 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertTrue("'" + double48 + "' != '" + 100.0d + "'", double48 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(arrayRealVector55);
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertNotNull(realVector57);
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1p();
        int int18 = openMapRealVector13.getDimension();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector13.mapSubtractToSelf((double) 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(realVector20);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapAtanToSelf();
        double[] doubleArray13 = arrayRealVector2.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAsinToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        int int26 = openMapRealVector23.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.unitVector();
        double double29 = openMapRealVector2.getL1Distance(openMapRealVector23);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor34 = openMapRealVector32.sparseIterator();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapSubtractToSelf((double) '4');
        double double40 = arrayRealVector37.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector32.append((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector32.mapAdd((double) (short) -1);
        double double44 = openMapRealVector2.getL1Distance(openMapRealVector43);
        boolean boolean46 = openMapRealVector2.equals((java.lang.Object) 10.0f);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector49.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor51 = openMapRealVector49.sparseIterator();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapSubtractToSelf((double) '4');
        double double57 = arrayRealVector54.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector49.append((org.apache.commons.math.linear.RealVector) arrayRealVector54);
        // The following exception was thrown during execution in test generation
        try {
            double double59 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector58);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(entryItor34);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 42.0d + "'", double40 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector41);
        org.junit.Assert.assertNotNull(openMapRealVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 1.0d + "'", double44 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(entryItor51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 42.0d + "'", double57 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector58);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapMultiplyToSelf((double) 10);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 42.0d + "'", double21 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(10, (double) (short) 0);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAbsToSelf();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector5.subtract(realVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector5.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector5.subtract(arrayRealVector28);
        double[] doubleArray31 = arrayRealVector30.getData();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector2.append(doubleArray31);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[0.0]");
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        double double5 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.add(arrayRealVector18);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapSubtractToSelf((double) '4');
        double double27 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.subtract(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector2.append(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapDivide(1.0E-12d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.append(26.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        openMapRealVector41.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector48.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector45.add(openMapRealVector48);
        int int51 = openMapRealVector48.getDimension();
        double double52 = openMapRealVector48.getSparcity();
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector48.mapUlpToSelf();
        double double54 = openMapRealVector36.getDistance(openMapRealVector48);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapCbrt();
        double double61 = openMapRealVector48.getDistance(realVector60);
        double[] doubleArray64 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64, true);
        org.apache.commons.math.linear.RealVector realVector67 = openMapRealVector48.add(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector68 = openMapRealVector48.mapAtan();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector29.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector48);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 42.0d + "'", double5 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertTrue("'" + double27 + "' != '" + 42.0d + "'", double27 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector28);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 1.0d + "'", double52 == 1.0d);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 10.0d + "'", double54 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 1.6329299089739802d + "'", double61 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray64), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapTanToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector2.unitVector();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapCbrt();
        // The following exception was thrown during execution in test generation
        try {
            double double8 = arrayRealVector5.getEntry((int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 9.0d);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapInv();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapTanhToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        openMapRealVector10.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector14.add(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector19.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector23.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector19.append(openMapRealVector23);
        boolean boolean26 = openMapRealVector25.isInfinite();
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector25.mapTan();
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector5.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector25);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapAsin();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector34.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 100.0d + "'", double29 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 3.3541424281629704d + "'", double41 == 3.3541424281629704d);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapLog1pToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(realVector23);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        double double35 = arrayRealVector33.getNorm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 42.0d + "'", double26 == 42.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.0d + "'", double35 == 0.0d);
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        java.lang.String str35 = arrayRealVector30.toString();
        double[] doubleArray36 = arrayRealVector30.getData();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-42}" + "'", str35, "{-42}");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[-42.0]");
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector8.ebeDivide(arrayRealVector20);
        double double22 = openMapRealVector2.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector21 and openMapRealVector2.", arrayRealVector21.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector21));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapSubtractToSelf((double) 0L);
        boolean boolean22 = openMapRealVector6.equals((java.lang.Object) arrayRealVector17);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector14 and openMapRealVector2.", arrayRealVector14.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector14));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector23.unitVector();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector9.projection((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector6 and openMapRealVector21.", realVector6.equals(openMapRealVector21) == openMapRealVector21.equals(realVector6));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapPow((double) 0);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector10.append((org.apache.commons.math.linear.RealVector) arrayRealVector17);
        double double20 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector2.", arrayRealVector17.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector17));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, false);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        double[] doubleArray16 = new double[] {};
        double[] doubleArray18 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16, doubleArray18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18, (double) 10);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.add(doubleArray18);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector19 and openMapRealVector21.", arrayRealVector19.equals(openMapRealVector21) == openMapRealVector21.equals(arrayRealVector19));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, 0.0d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAddToSelf((double) 100L);
        double[] doubleArray28 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix29 = openMapRealVector26.outerProduct(doubleArray28);
        double double30 = arrayRealVector2.getL1Distance(doubleArray28);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector15.", arrayRealVector7.equals(openMapRealVector15) == openMapRealVector15.equals(arrayRealVector7));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.ebeDivide(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector8.subtract(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector5.projection((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector2.", arrayRealVector32.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector32));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.append(realVector16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector24.add(openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.mapAddToSelf((double) 100L);
        double[] doubleArray33 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix34 = openMapRealVector31.outerProduct(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeMultiply(doubleArray33);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector20.", arrayRealVector10.equals(openMapRealVector20) == openMapRealVector20.equals(arrayRealVector10));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        double[] doubleArray15 = new double[] {};
        double[] doubleArray17 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, (double) 10);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector2.append(doubleArray17);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector18 and openMapRealVector20.", arrayRealVector18.equals(openMapRealVector20) == openMapRealVector20.equals(arrayRealVector18));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector16);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector18.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector18.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(realVector28);
        double[] doubleArray30 = arrayRealVector29.toArray();
        double double31 = arrayRealVector13.getLInfDistance(doubleArray30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector2.ebeDivide(doubleArray30);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector2.", arrayRealVector10.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector10));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        openMapRealVector37.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector44.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector41.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector44.mapAddToSelf((double) 100L);
        double[] doubleArray50 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector48.outerProduct(doubleArray50);
        double double52 = arrayRealVector25.dotProduct(doubleArray50);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector37.", arrayRealVector2.equals(openMapRealVector37) == openMapRealVector37.equals(arrayRealVector2));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector17);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector17.ebeDivide(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector6.subtract(arrayRealVector29);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector29.ebeDivide(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector29.mapTanToSelf();
        double double40 = openMapRealVector3.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector30 and openMapRealVector2.", arrayRealVector30.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector30));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector15.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(realVector25);
        double[] doubleArray27 = arrayRealVector26.toArray();
        double double28 = arrayRealVector10.getLInfDistance(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.projection(doubleArray27);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        double double41 = arrayRealVector37.dotProduct(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector32.add(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector40.mapSubtract(0.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27, arrayRealVector40);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector2.", arrayRealVector7.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector7));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapTanhToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector11.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector25);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector2.", arrayRealVector20.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector20));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.mapTan();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector18.", arrayRealVector7.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector7));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        double[] doubleArray16 = new double[] { 100.0d };
        double double17 = arrayRealVector12.dotProduct(doubleArray16);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector2.", arrayRealVector9.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector9));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector8.subtract(realVector13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.mapAsinToSelf();
        double double18 = arrayRealVector2.getLInfDistance(arrayRealVector8);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapLog1pToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector34.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector34.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(realVector44);
        double[] doubleArray46 = arrayRealVector45.toArray();
        double double47 = arrayRealVector29.getLInfDistance(doubleArray46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector21.projection(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector2.ebeMultiply(doubleArray46);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector21.", arrayRealVector2.equals(openMapRealVector21) == openMapRealVector21.equals(arrayRealVector2));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapTanhToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCbrt();
        boolean boolean34 = arrayRealVector24.equals((java.lang.Object) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector30.mapLog1p();
        double double36 = arrayRealVector30.getL1Norm();
        double double37 = openMapRealVector9.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector21 and openMapRealVector2.", arrayRealVector21.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector21));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        double[] doubleArray36 = new double[] {};
        double[] doubleArray38 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36, doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38, (double) 10);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector25.append(doubleArray38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector39 and openMapRealVector41.", arrayRealVector39.equals(openMapRealVector41) == openMapRealVector41.equals(arrayRealVector39));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        double[] doubleArray13 = new double[] {};
        double[] doubleArray15 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13, doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, arrayRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector12.subtract(doubleArray15);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector27 and openMapRealVector2.", arrayRealVector27.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector27));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        openMapRealVector30.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.add(openMapRealVector37);
        int int40 = openMapRealVector37.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.copy();
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector45.mapCos();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapExpm1();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        openMapRealVector53.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector60.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector57.add(openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector60.mapAddToSelf((double) 100L);
        double[] doubleArray66 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix67 = openMapRealVector64.outerProduct(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector45.add(doubleArray66);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = openMapRealVector41.outerProduct(doubleArray66);
        org.apache.commons.math.linear.RealMatrix realMatrix70 = arrayRealVector27.outerProduct(doubleArray66);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector30.", arrayRealVector2.equals(openMapRealVector30) == openMapRealVector30.equals(arrayRealVector2));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 100.0d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector3.", arrayRealVector2.equals(openMapRealVector3) == openMapRealVector3.equals(arrayRealVector2));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapCeilToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, true);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        double[] doubleArray14 = arrayRealVector13.toArray();
        double[] doubleArray15 = new double[] {};
        double[] doubleArray17 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, (double) 10);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector13.projection(doubleArray17);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector18 and openMapRealVector20.", arrayRealVector18.equals(openMapRealVector20) == openMapRealVector20.equals(arrayRealVector18));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        double double21 = arrayRealVector17.dotProduct(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapLog1pToSelf();
        boolean boolean23 = arrayRealVector20.isInfinite();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector26.add(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector20.ebeDivide(realVector37);
        double double39 = arrayRealVector12.dotProduct(realVector37);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector2.", arrayRealVector9.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector9));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        boolean boolean8 = arrayRealVector5.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapExpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = arrayRealVector11.add(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector5.ebeDivide(realVector22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        openMapRealVector26.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAdd((double) (byte) -1);
        double double31 = openMapRealVector30.getSparcity();
        boolean boolean32 = openMapRealVector30.isInfinite();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        openMapRealVector35.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector42.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector39.add(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAddToSelf((double) 100L);
        double[] doubleArray48 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = openMapRealVector46.outerProduct(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        openMapRealVector52.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector59.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector56.add(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector59.mapAddToSelf((double) 100L);
        double[] doubleArray65 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = openMapRealVector63.outerProduct(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector46.append(doubleArray65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector30.append(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector5.subtract(doubleArray65);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector26.", arrayRealVector2.equals(openMapRealVector26) == openMapRealVector26.equals(arrayRealVector2));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapSqrt();
        double[] doubleArray47 = arrayRealVector39.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector13.ebeMultiply(doubleArray47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector39 and openMapRealVector2.", arrayRealVector39.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector39));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9, (double) 10L);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        openMapRealVector15.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector18.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector12.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector6.append(openMapRealVector12);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector2.", arrayRealVector10.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector10));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.unitVector();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector30.projection((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector23.", arrayRealVector2.equals(openMapRealVector23) == openMapRealVector23.equals(arrayRealVector2));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapTanh();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapMultiplyToSelf((double) (short) -1);
        org.junit.Assert.assertTrue("Contract failed: equals-hashcode on realVector15 and realVector13", realVector15.equals(realVector13) ? realVector15.hashCode() == realVector13.hashCode() : true);
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector20 = arrayRealVector12.copy();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector18.", arrayRealVector7.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector7));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector8.mapSubtractToSelf(14.35414242816297d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        double[] doubleArray21 = openMapRealVector16.toArray();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        openMapRealVector35.set(10.0d);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.subtract(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector48.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector48.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(realVector58);
        double[] doubleArray60 = arrayRealVector59.toArray();
        double double61 = arrayRealVector43.getLInfDistance(doubleArray60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector35.projection(doubleArray60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector26.append(openMapRealVector62);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector40 and openMapRealVector2.", arrayRealVector40.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector40));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector6.mapSinh();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) 10L);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        openMapRealVector17.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector20.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector14.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector6.append(openMapRealVector22);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector12 and openMapRealVector2.", arrayRealVector12.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector12));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        double[] doubleArray12 = new double[] {};
        double[] doubleArray14 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12, doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtract(10.0d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        double double22 = arrayRealVector20.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapAtan();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        double double28 = arrayRealVector26.getNorm();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapAtan();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector32.mapAsinToSelf();
        double double42 = arrayRealVector26.getLInfDistance(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, (org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double[] doubleArray44 = arrayRealVector32.toArray();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector15.add(doubleArray44);
        double double46 = openMapRealVector6.getLInfDistance(doubleArray44);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector2.", arrayRealVector20.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector20));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAbsToSelf();
        double double13 = arrayRealVector11.getNorm();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector11.mapAtan();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        double double19 = arrayRealVector17.getNorm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAtan();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapAsinToSelf();
        double double33 = arrayRealVector17.getLInfDistance(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector11, (org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double[] doubleArray35 = arrayRealVector23.toArray();
        double double36 = arrayRealVector7.getDistance(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector7.mapTanh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector4.ebeMultiply(realVector37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector41.subtract(realVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector41.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector49, true);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapLogToSelf();
        double double58 = arrayRealVector54.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double63 = arrayRealVector54.getL1Distance(arrayRealVector62);
        double double64 = arrayRealVector51.getLInfDistance(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector38, arrayRealVector54);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector15.mapRintToSelf();
        openMapRealVector15.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapLogToSelf();
        double double44 = arrayRealVector40.getL1Norm();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double49 = arrayRealVector40.getL1Distance(arrayRealVector48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector52.subtract(realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector52.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector52.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector52.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(realVector62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapSubtractToSelf((double) '4');
        double double69 = arrayRealVector66.getNorm();
        double double70 = arrayRealVector63.getL1Distance(arrayRealVector66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = arrayRealVector40.add(arrayRealVector66);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        double double76 = arrayRealVector66.dotProduct(realVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector33.add(arrayRealVector66);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector80.mapExpToSelf();
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        double double89 = arrayRealVector85.dotProduct(arrayRealVector88);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = arrayRealVector80.add(arrayRealVector88);
        double[] doubleArray91 = arrayRealVector90.getDataRef();
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector66.subtract(doubleArray91);
        double double93 = openMapRealVector15.getDistance(doubleArray91);
        double double94 = openMapRealVector4.dotProduct(openMapRealVector15);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector12.", arrayRealVector2.equals(openMapRealVector12) == openMapRealVector12.equals(arrayRealVector2));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapTanh();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector3.", arrayRealVector2.equals(openMapRealVector3) == openMapRealVector3.equals(arrayRealVector2));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector5.mapCeilToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        openMapRealVector11.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector15.add(openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAddToSelf((double) 100L);
        double[] doubleArray24 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector22.outerProduct(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector22.append(doubleArray41);
        double[] doubleArray46 = openMapRealVector22.getData();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector5.subtract(doubleArray46);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector11.", arrayRealVector2.equals(openMapRealVector11) == openMapRealVector11.equals(arrayRealVector2));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector4.copy();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor6 = openMapRealVector4.iterator();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector11.mapSinh();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        double double31 = arrayRealVector22.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapCbrt();
        double double35 = openMapRealVector11.getLInfDistance(realVector34);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector26 and openMapRealVector2.", arrayRealVector26.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector26));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        openMapRealVector26.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector33.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector30.add(openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.mapAddToSelf((double) 100L);
        double[] doubleArray39 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = openMapRealVector37.outerProduct(doubleArray39);
        double double41 = arrayRealVector13.getL1Distance(doubleArray39);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector6 and openMapRealVector26.", arrayRealVector6.equals(openMapRealVector26) == openMapRealVector26.equals(arrayRealVector6));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.mapSinh();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector15.mapLog();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector12.subtract(realVector29);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector2.", arrayRealVector20.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector20));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = arrayRealVector6.add(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector6.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector6.mapAtanToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector21.mapUlpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector35.add(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix48 = arrayRealVector21.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector45);
        arrayRealVector45.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix50 = arrayRealVector6.outerProduct(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector6.mapLog10ToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapSqrt();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        double double66 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector54.add(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector64.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector64.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = arrayRealVector6.subtract(arrayRealVector64);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapExpToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        double double82 = arrayRealVector78.dotProduct(arrayRealVector81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector73.add(arrayRealVector81);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector73.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64, (org.apache.commons.math.linear.RealVector) arrayRealVector73);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector2.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector73);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector45 and openMapRealVector3.", arrayRealVector45.equals(openMapRealVector3) == openMapRealVector3.equals(arrayRealVector45));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 100);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector3.", arrayRealVector2.equals(openMapRealVector3) == openMapRealVector3.equals(arrayRealVector2));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        double[] doubleArray7 = openMapRealVector6.toArray();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapUlpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector24.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix37 = arrayRealVector10.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        java.lang.String str38 = arrayRealVector10.toString();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapExpToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double50 = arrayRealVector46.dotProduct(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector41.add(arrayRealVector49);
        double[] doubleArray52 = arrayRealVector51.getDataRef();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector10.subtract(doubleArray52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, doubleArray52);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector5 and openMapRealVector6.", realVector5.equals(openMapRealVector6) == openMapRealVector6.equals(realVector5));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        double double31 = arrayRealVector20.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        openMapRealVector35.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector42.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector39.add(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAddToSelf((double) 100L);
        double[] doubleArray48 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = openMapRealVector46.outerProduct(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        openMapRealVector52.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector59.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector56.add(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector59.mapAddToSelf((double) 100L);
        double[] doubleArray65 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = openMapRealVector63.outerProduct(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector46.append(doubleArray65);
        double[] doubleArray70 = openMapRealVector46.getData();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray70);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector35.", arrayRealVector7.equals(openMapRealVector35) == openMapRealVector35.equals(arrayRealVector7));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector8.mapCosToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector22.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector22.mapSinh();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector22.mapLog();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector39);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector39.ebeDivide(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapTanh();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector56.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector56.mapAbsToSelf();
        double double67 = arrayRealVector52.getL1Distance(arrayRealVector56);
        double double68 = arrayRealVector22.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector52);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAbsToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector71.subtract(realVector76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector71.mapSqrt();
        double[] doubleArray79 = arrayRealVector71.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector22, doubleArray79);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector17.append(doubleArray79);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector27 and openMapRealVector2.", arrayRealVector27.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector27));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapFloorToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector2.", arrayRealVector9.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector9));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector7.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector7.mapAtanToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector22.mapUlpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapExpToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.add(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix49 = arrayRealVector22.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        arrayRealVector46.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix51 = arrayRealVector7.outerProduct(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector7.mapLog10ToSelf();
        boolean boolean53 = openMapRealVector4.equals((java.lang.Object) realVector52);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector46 and openMapRealVector2.", arrayRealVector46.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector46));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        double double12 = arrayRealVector10.getL1Norm();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector11.", arrayRealVector2.equals(openMapRealVector11) == openMapRealVector11.equals(arrayRealVector2));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector37.mapAdd((double) 1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector42.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector37.add(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector34.subtract(openMapRealVector44);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector27 and openMapRealVector37.", realVector27.equals(openMapRealVector37) == openMapRealVector37.equals(realVector27));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        openMapRealVector9.unitize();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapTanhToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapCbrt();
        boolean boolean33 = arrayRealVector23.equals((java.lang.Object) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapLog1p();
        int int35 = arrayRealVector29.getDimension();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapCoshToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapSqrt();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAbsToSelf();
        double double51 = arrayRealVector49.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector39.add(arrayRealVector49);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapSubtractToSelf((double) '4');
        double double58 = arrayRealVector55.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = arrayRealVector49.subtract(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector29.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapExpToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        double double72 = arrayRealVector68.dotProduct(arrayRealVector71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = arrayRealVector63.add(arrayRealVector71);
        double[] doubleArray74 = arrayRealVector73.getDataRef();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector73.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector73.mapDivide((double) (short) -1);
        double[] doubleArray79 = arrayRealVector73.getDataRef();
        double double80 = arrayRealVector59.getLInfDistance(doubleArray79);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector81 = openMapRealVector9.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector2.", arrayRealVector20.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector20));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector18.subtract(realVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector18.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector29);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector29.ebeDivide(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector18.subtract(arrayRealVector41);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector46.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector41.ebeDivide(arrayRealVector46);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = arrayRealVector15.outerProduct(arrayRealVector46);
        double[] doubleArray52 = new double[] {};
        double[] doubleArray54 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52, doubleArray54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray54, (double) 10);
        double[] doubleArray58 = openMapRealVector57.getData();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector15.append(doubleArray58);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector55 and openMapRealVector57.", arrayRealVector55.equals(openMapRealVector57) == openMapRealVector57.equals(arrayRealVector55));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.add(openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAddToSelf((double) 100L);
        double[] doubleArray22 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = openMapRealVector20.outerProduct(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector6.append(doubleArray22);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapLogToSelf();
        double double33 = arrayRealVector29.getL1Norm();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double38 = arrayRealVector29.getL1Distance(arrayRealVector37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector41.subtract(realVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector41.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector41.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector41.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(realVector51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapSubtractToSelf((double) '4');
        double double58 = arrayRealVector55.getNorm();
        double double59 = arrayRealVector52.getL1Distance(arrayRealVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector29.add(arrayRealVector55);
        double double61 = arrayRealVector55.getL1Norm();
        double[] doubleArray62 = arrayRealVector55.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector6.append(doubleArray62);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector36 and openMapRealVector9.", arrayRealVector36.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector36));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        double double72 = arrayRealVector19.dotProduct(arrayRealVector61);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray74);
        openMapRealVector75.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector75.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector83 = openMapRealVector82.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector79.add(openMapRealVector82);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector85 = openMapRealVector84.unitVector();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector19.add((org.apache.commons.math.linear.RealVector) openMapRealVector84);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector75.", arrayRealVector2.equals(openMapRealVector75) == openMapRealVector75.equals(arrayRealVector2));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        double double39 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector36.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector2.subtract(arrayRealVector36);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        openMapRealVector45.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector52.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector49.add(openMapRealVector52);
        int int55 = openMapRealVector52.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.copy();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector56.mapRintToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapCos();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapExpm1();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray67);
        openMapRealVector68.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector68.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector75.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector72.add(openMapRealVector75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector75.mapAddToSelf((double) 100L);
        double[] doubleArray81 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix82 = openMapRealVector79.outerProduct(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector60.add(doubleArray81);
        org.apache.commons.math.linear.RealMatrix realMatrix84 = openMapRealVector56.outerProduct(doubleArray81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81, false);
        double double87 = arrayRealVector2.getL1Distance(doubleArray81);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector45.", arrayRealVector9.equals(openMapRealVector45) == openMapRealVector45.equals(arrayRealVector9));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        openMapRealVector9.set(4.35414242816297d);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapSqrtToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector19 and openMapRealVector9.", arrayRealVector19.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector19));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = arrayRealVector12.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector12.mapCbrtToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector19.", arrayRealVector7.equals(openMapRealVector19) == openMapRealVector19.equals(arrayRealVector7));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray9);
        openMapRealVector10.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector10.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector10.mapRintToSelf();
        openMapRealVector10.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        double double30 = arrayRealVector21.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapLogToSelf();
        double double39 = arrayRealVector35.getL1Norm();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double44 = arrayRealVector35.getL1Distance(arrayRealVector43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector47.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapSubtractToSelf((double) '4');
        double double64 = arrayRealVector61.getNorm();
        double double65 = arrayRealVector58.getL1Distance(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector35.add(arrayRealVector61);
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        double double71 = arrayRealVector61.dotProduct(realVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector28.add(arrayRealVector61);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapExpToSelf();
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        double double84 = arrayRealVector80.dotProduct(arrayRealVector83);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = arrayRealVector75.add(arrayRealVector83);
        double[] doubleArray86 = arrayRealVector85.getDataRef();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector61.subtract(doubleArray86);
        double double88 = openMapRealVector10.getDistance(doubleArray86);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector6.subtract(openMapRealVector10);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector25 and openMapRealVector2.", arrayRealVector25.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector25));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapLogToSelf();
        double double26 = arrayRealVector22.getL1Norm();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double31 = arrayRealVector22.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapTan();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapSin();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(realVector14, arrayRealVector30);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector29 and openMapRealVector2.", arrayRealVector29.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector29));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector30.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector30.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(realVector40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapSubtractToSelf((double) '4');
        double double47 = arrayRealVector44.getNorm();
        double double48 = arrayRealVector41.getL1Distance(arrayRealVector44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapCoshToSelf();
        double[] doubleArray51 = arrayRealVector49.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector14.projection(doubleArray51);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector38 and openMapRealVector2.", arrayRealVector38.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector38));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        double double17 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.mapAtanToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector16 and realVector18.", arrayRealVector16.equals(realVector18) == realVector18.equals(arrayRealVector16));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector15.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(realVector25);
        double[] doubleArray27 = arrayRealVector26.toArray();
        double double28 = arrayRealVector10.getLInfDistance(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.projection(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector2.", arrayRealVector7.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector7));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector42.copy();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector43.", arrayRealVector17.equals(openMapRealVector43) == openMapRealVector43.equals(arrayRealVector17));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        arrayRealVector41.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector2.outerProduct(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector2.mapLog10ToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray49);
        openMapRealVector50.set(10.0d);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapLog1pToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector63.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector63.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(realVector73);
        double[] doubleArray75 = arrayRealVector74.toArray();
        double double76 = arrayRealVector58.getLInfDistance(doubleArray75);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector50.projection(doubleArray75);
        double double78 = arrayRealVector2.getDistance(doubleArray75);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector50.", arrayRealVector7.equals(openMapRealVector50) == openMapRealVector50.equals(arrayRealVector7));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        double[] doubleArray37 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector13.append(59.39696961966999d);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector42.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector42.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector42.mapTanh();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector42.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector42.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector13.projection((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector50 and openMapRealVector2.", arrayRealVector50.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector50));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAbsToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector7.subtract(realVector12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector7.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector7);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector7.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector7.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(realVector17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapSubtractToSelf((double) '4');
        double double24 = arrayRealVector21.getNorm();
        double double25 = arrayRealVector18.getL1Distance(arrayRealVector21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18);
        double double27 = openMapRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector18.mapCeilToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector15 and openMapRealVector2.", arrayRealVector15.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector15));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector16.ebeDivide(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector13.add(arrayRealVector29);
        double[] doubleArray31 = new double[] {};
        double[] doubleArray33 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31, doubleArray33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33, (double) 10);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        double double44 = arrayRealVector39.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector36.add((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector13.outerProduct(realVector45);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector34 and openMapRealVector36.", arrayRealVector34.equals(openMapRealVector36) == openMapRealVector36.equals(arrayRealVector34));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapCeilToSelf();
        double[] doubleArray22 = arrayRealVector19.toArray();
        double double23 = openMapRealVector9.getDistance(doubleArray22);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector16 and openMapRealVector2.", arrayRealVector16.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector16));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLog10ToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector2.", arrayRealVector9.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector9));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) '#');
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector88 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray87);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector89 = openMapRealVector88.copy();
        double double90 = arrayRealVector82.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector88);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector69.", arrayRealVector60.equals(openMapRealVector69) == openMapRealVector69.equals(arrayRealVector60));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        int int33 = openMapRealVector30.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.copy();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapRintToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector38.mapCos();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector38.mapExpm1();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector46.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = openMapRealVector53.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector50.add(openMapRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAddToSelf((double) 100L);
        double[] doubleArray59 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix60 = openMapRealVector57.outerProduct(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector38.add(doubleArray59);
        org.apache.commons.math.linear.RealMatrix realMatrix62 = openMapRealVector34.outerProduct(doubleArray59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray59);
        double double64 = arrayRealVector13.dotProduct(doubleArray59);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector63.", arrayRealVector2.equals(openMapRealVector63) == openMapRealVector63.equals(arrayRealVector2));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector4.mapAtan();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector12.", arrayRealVector2.equals(openMapRealVector12) == openMapRealVector12.equals(arrayRealVector2));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray47 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47, (double) 10);
        double double51 = arrayRealVector36.getL1Distance(doubleArray47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector50.", arrayRealVector3.equals(openMapRealVector50) == openMapRealVector50.equals(arrayRealVector3));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) '#');
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor86 = arrayRealVector82.sparseIterator();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector69.", arrayRealVector60.equals(openMapRealVector69) == openMapRealVector69.equals(arrayRealVector60));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector6.mapAdd(85.64585757183703d);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector11.mapAcosToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        double double19 = arrayRealVector11.dotProduct(realVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(realVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector8.append(openMapRealVector20);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector5 and openMapRealVector6.", realVector5.equals(openMapRealVector6) == openMapRealVector6.equals(realVector5));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) '#');
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        arrayRealVector82.unitize();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector69.", arrayRealVector60.equals(openMapRealVector69) == openMapRealVector69.equals(arrayRealVector60));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapCbrt();
        double double20 = arrayRealVector17.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapLog10ToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapPow((double) 0);
        double double39 = arrayRealVector24.getLInfDistance(arrayRealVector34);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.subtract(realVector47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector42.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector42);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector42.ebeDivide(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapTanh();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector24.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector17.ebeDivide(realVector57);
        double double59 = openMapRealVector4.getL1Distance(realVector57);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector38 and openMapRealVector2.", realVector38.equals(openMapRealVector2) == openMapRealVector2.equals(realVector38));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.ebeDivide(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapTanh();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double62 = arrayRealVector58.dotProduct(arrayRealVector61);
        double double63 = arrayRealVector54.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector50.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector50.mapAcosToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector34.append((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector37 and openMapRealVector2.", arrayRealVector37.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector37));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAbsToSelf();
        double double13 = arrayRealVector11.getNorm();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector11.mapAtan();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        double double19 = arrayRealVector17.getNorm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAtan();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapAsinToSelf();
        double double33 = arrayRealVector17.getLInfDistance(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector11, (org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double[] doubleArray35 = arrayRealVector23.toArray();
        double double36 = arrayRealVector7.getDistance(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector7.mapTanh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector4.ebeMultiply(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapLog1p();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapTanhToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix44 = arrayRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapCos();
        boolean boolean52 = arrayRealVector41.equals((java.lang.Object) arrayRealVector47);
        double double53 = arrayRealVector12.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56);
        openMapRealVector57.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector57.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = openMapRealVector64.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector61.add(openMapRealVector64);
        int int67 = openMapRealVector64.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector64.copy();
        org.apache.commons.math.linear.RealVector realVector69 = openMapRealVector68.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector68.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector54.ebeMultiply(realVector70);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector57.", arrayRealVector7.equals(openMapRealVector57) == openMapRealVector57.equals(arrayRealVector7));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        openMapRealVector19.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector22.unitVector();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        openMapRealVector26.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector33.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector30.add(openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.mapAddToSelf((double) 100L);
        double[] doubleArray39 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix40 = openMapRealVector37.outerProduct(doubleArray39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector23.append(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector12.ebeDivide(doubleArray39);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector26.", arrayRealVector2.equals(openMapRealVector26) == openMapRealVector26.equals(arrayRealVector2));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector13.mapCeil();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        java.lang.String str36 = arrayRealVector35.toString();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = arrayRealVector45.add(arrayRealVector53);
        double[] doubleArray56 = arrayRealVector55.getDataRef();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector55.mapDivide((double) (short) -1);
        double[] doubleArray61 = arrayRealVector55.getDataRef();
        double double62 = openMapRealVector41.getL1Distance(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector13.ebeMultiply(doubleArray61);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector41.", arrayRealVector10.equals(openMapRealVector41) == openMapRealVector41.equals(arrayRealVector10));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector26.mapTanhToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapCbrt();
        boolean boolean36 = arrayRealVector26.equals((java.lang.Object) arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapLog1p();
        double double38 = arrayRealVector32.getL1Norm();
        arrayRealVector32.set(1.0d);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector32.add(arrayRealVector43);
        boolean boolean47 = arrayRealVector32.isNaN();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector32.mapUlp();
        org.apache.commons.math.linear.RealMatrix realMatrix49 = arrayRealVector2.outerProduct(realVector48);
        arrayRealVector2.set(23.978952727983707d);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        double double56 = arrayRealVector54.getNorm();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(realVector57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAbsToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector61.subtract(realVector66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector61.mapSqrt();
        double[] doubleArray69 = arrayRealVector61.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector58.subtract(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector2.ebeDivide(doubleArray69);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector57 and openMapRealVector58.", realVector57.equals(openMapRealVector58) == openMapRealVector58.equals(realVector57));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.add(openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAddToSelf((double) 100L);
        double[] doubleArray22 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = openMapRealVector20.outerProduct(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector6.append(doubleArray22);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapCeilToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector39.mapPow((double) 0);
        double double44 = arrayRealVector29.getLInfDistance(arrayRealVector39);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector47.ebeDivide(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapTanh();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector29.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector60);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        double double74 = arrayRealVector70.dotProduct(arrayRealVector73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector65.add(arrayRealVector73);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapCbrt();
        double double78 = arrayRealVector75.getNorm();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector75.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = arrayRealVector29.ebeDivide(arrayRealVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, arrayRealVector29);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector29 and openMapRealVector9.", arrayRealVector29.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector29));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray49);
        double double53 = arrayRealVector2.dotProduct(doubleArray49);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector43 and openMapRealVector52.", arrayRealVector43.equals(openMapRealVector52) == openMapRealVector52.equals(arrayRealVector43));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapLog1p();
        double[] doubleArray14 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14, true);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14, doubleArray32);
        double double37 = arrayRealVector2.getLInfDistance(doubleArray32);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector8 and openMapRealVector19.", arrayRealVector8.equals(openMapRealVector19) == openMapRealVector19.equals(arrayRealVector8));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector15.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(realVector25);
        double[] doubleArray27 = arrayRealVector26.toArray();
        double double28 = arrayRealVector10.getLInfDistance(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.projection(doubleArray27);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapSqrt();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        double double44 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector32.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector42.mapLogToSelf();
        arrayRealVector42.set(1.0d);
        double[] doubleArray50 = new double[] {};
        double[] doubleArray52 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50, doubleArray52);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapSubtract(10.0d);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAbsToSelf();
        double double60 = arrayRealVector58.getNorm();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector58.mapAtan();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        double double66 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapAtan();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAbsToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector70.subtract(realVector75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector70.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector70);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector70.mapAsinToSelf();
        double double80 = arrayRealVector64.getLInfDistance(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector58, (org.apache.commons.math.linear.RealVector) arrayRealVector70);
        double[] doubleArray82 = arrayRealVector70.toArray();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector53.add(doubleArray82);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector86.mapAbsToSelf();
        java.lang.Double[] doubleArray89 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector90.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector86.subtract(realVector91);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector86.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector94 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82, arrayRealVector86);
        arrayRealVector42.setSubVector((int) (byte) 0, doubleArray82);
        org.apache.commons.math.linear.RealMatrix realMatrix96 = openMapRealVector29.outerProduct(doubleArray82);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector2.", arrayRealVector7.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector7));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        openMapRealVector11.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector15.add(openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAddToSelf((double) 100L);
        double[] doubleArray24 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector22.outerProduct(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector22.append(doubleArray41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector6.append(doubleArray41);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        double double57 = arrayRealVector53.dotProduct(arrayRealVector56);
        double double58 = arrayRealVector49.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector56);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = arrayRealVector63.ebeDivide(arrayRealVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector60.add(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, arrayRealVector76);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector53 and openMapRealVector2.", arrayRealVector53.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector53));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector42);
        double double45 = openMapRealVector42.getEntry((int) (short) 0);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector43.", arrayRealVector17.equals(openMapRealVector43) == openMapRealVector43.equals(arrayRealVector17));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapPow((double) (-1));
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector24.add(openMapRealVector27);
        int int30 = openMapRealVector27.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.unitVector();
        double[] doubleArray35 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, true);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        openMapRealVector40.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector40.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector47.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector44.add(openMapRealVector47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector47.mapAddToSelf((double) 100L);
        double[] doubleArray53 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix54 = openMapRealVector51.outerProduct(doubleArray53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, doubleArray53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector32.append(doubleArray53);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, 0, (int) (byte) 0);
        double double62 = arrayRealVector2.getDistance(doubleArray53);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector20.", arrayRealVector7.equals(openMapRealVector20) == openMapRealVector20.equals(arrayRealVector7));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapDivideToSelf((double) (byte) 0);
        int int17 = arrayRealVector12.getDimension();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapSin();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapCoshToSelf();
        double[] doubleArray32 = openMapRealVector30.getData();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector12.append(doubleArray32);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector21.", arrayRealVector7.equals(openMapRealVector21) == openMapRealVector21.equals(arrayRealVector7));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd((double) 1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.add(openMapRealVector25);
        double double28 = openMapRealVector13.getL1Distance(openMapRealVector25);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector31.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector31.mapSinh();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector31.mapLog();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.subtract(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = arrayRealVector48.ebeDivide(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapTanh();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAbsToSelf();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector65.subtract(realVector70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector65.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector65.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector65.mapAbsToSelf();
        double double76 = arrayRealVector61.getL1Distance(arrayRealVector65);
        double double77 = arrayRealVector31.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector61);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAbsToSelf();
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector84.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector80.subtract(realVector85);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector80.mapSqrt();
        double[] doubleArray88 = arrayRealVector80.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31, doubleArray88);
        org.apache.commons.math.linear.RealMatrix realMatrix90 = openMapRealVector25.outerProduct(doubleArray88);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector36 and openMapRealVector2.", arrayRealVector36.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector36));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapRintToSelf();
        double double13 = openMapRealVector6.getNorm();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        double double18 = arrayRealVector16.getNorm();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAtan();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector22.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix27 = arrayRealVector16.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector22);
        double[] doubleArray28 = arrayRealVector22.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector6.projection(doubleArray28);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector16 and openMapRealVector2.", arrayRealVector16.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector16));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTan();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSin();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.mapAddToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector15.mapDivideToSelf((double) (byte) 100);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector26.add(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector26.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector26.mapDivideToSelf(8.881784197001252E-16d);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector15.projection(realVector39);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector39 and openMapRealVector2.", realVector39.equals(openMapRealVector2) == openMapRealVector2.equals(realVector39));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        double[] doubleArray2 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, true);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAddToSelf((double) 100L);
        double[] doubleArray20 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix21 = openMapRealVector18.outerProduct(doubleArray20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, doubleArray20);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector27.add(arrayRealVector35);
        double[] doubleArray38 = arrayRealVector37.getDataRef();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector37.mapDivide((double) (short) -1);
        double[] doubleArray43 = arrayRealVector37.getDataRef();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapExpToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        double double55 = arrayRealVector51.dotProduct(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector46.add(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapSqrtToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = arrayRealVector37.outerProduct(realVector57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector37);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector7.", arrayRealVector32.equals(openMapRealVector7) == openMapRealVector7.equals(arrayRealVector32));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector15.mapAdd((double) 1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector15.add(openMapRealVector20);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector25.add(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector25.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector25.mapSqrtToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapExpToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double50 = arrayRealVector46.dotProduct(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector41.add(arrayRealVector49);
        double[] doubleArray52 = arrayRealVector51.getDataRef();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector51.mapDivide((double) (short) -1);
        double[] doubleArray57 = arrayRealVector51.getDataRef();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector25.add(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix59 = openMapRealVector15.outerProduct(doubleArray57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector9.ebeMultiply(doubleArray57);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector30 and openMapRealVector2.", arrayRealVector30.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector30));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector16.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector13.add(realVector27);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector24 and openMapRealVector2.", arrayRealVector24.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector24));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapLogToSelf();
        double double26 = arrayRealVector22.getL1Norm();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double31 = arrayRealVector22.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapTan();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapSin();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector5.append(openMapRealVector19);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector38.mapPow((double) 0);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector38.append((org.apache.commons.math.linear.RealVector) arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector45.mapPow((double) 10.0f);
        double[] doubleArray53 = arrayRealVector45.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix54 = openMapRealVector5.outerProduct(doubleArray53);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector42 and openMapRealVector17.", realVector42.equals(openMapRealVector17) == openMapRealVector17.equals(realVector42));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        boolean boolean21 = openMapRealVector9.isInfinite();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector24.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapTanhToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        boolean boolean42 = arrayRealVector32.equals((java.lang.Object) arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector38.mapLog1p();
        double double44 = arrayRealVector38.getL1Norm();
        arrayRealVector38.set(1.0d);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector38.add(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector9.add((org.apache.commons.math.linear.RealVector) arrayRealVector38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector29 and openMapRealVector2.", arrayRealVector29.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector29));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0, 1.6329299089739802d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector1.", arrayRealVector2.equals(openMapRealVector1) == openMapRealVector1.equals(arrayRealVector2));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        double[] doubleArray8 = new double[] {};
        double[] doubleArray10 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10, arrayRealVector14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector5.add(doubleArray10);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector11 and openMapRealVector25.", arrayRealVector11.equals(openMapRealVector25) == openMapRealVector25.equals(arrayRealVector11));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector14);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        double double23 = arrayRealVector19.getL1Norm();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double28 = arrayRealVector19.getL1Distance(arrayRealVector27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector31.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(realVector41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        double double49 = arrayRealVector42.getL1Distance(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector19.add(arrayRealVector45);
        double double51 = arrayRealVector45.getL1Norm();
        double[] doubleArray52 = arrayRealVector45.toArray();
        double double53 = openMapRealVector14.getL1Distance(doubleArray52);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector26 and openMapRealVector2.", arrayRealVector26.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector26));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector21);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector21.ebeDivide(arrayRealVector33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector10.subtract(arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector33.ebeDivide(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapTanToSelf();
        double double44 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector2.", arrayRealVector10.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector10));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector38.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector38);
        int int43 = openMapRealVector42.getDimension();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        int int61 = openMapRealVector58.getDimension();
        double double62 = openMapRealVector58.getSparcity();
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector58.mapUlpToSelf();
        double double64 = openMapRealVector46.getDistance(openMapRealVector58);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector67.mapCbrt();
        double double71 = openMapRealVector58.getDistance(realVector70);
        double[] doubleArray74 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74, true);
        org.apache.commons.math.linear.RealVector realVector77 = openMapRealVector58.add(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector58.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector79 = openMapRealVector42.append(openMapRealVector58);
        double double80 = arrayRealVector23.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector58);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector31.", arrayRealVector7.equals(openMapRealVector31) == openMapRealVector31.equals(arrayRealVector7));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapSqrt();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        double double29 = arrayRealVector27.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector17.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.mapInv();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapFloor();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector9.ebeDivide(realVector34);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector2.", arrayRealVector17.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector17));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector13.sparseIterator();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        double double41 = arrayRealVector37.dotProduct(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector32.add(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector32.mapUlpToSelf();
        double[] doubleArray44 = arrayRealVector32.toArray();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector32.mapCosToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.subtract(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapCeilToSelf();
        double[] doubleArray56 = new double[] {};
        double[] doubleArray58 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56, doubleArray58);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapSubtract(10.0d);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        double double66 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapAtan();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAbsToSelf();
        double double72 = arrayRealVector70.getNorm();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector70.mapAtan();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAbsToSelf();
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector76.subtract(realVector81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector76.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector76.mapAsinToSelf();
        double double86 = arrayRealVector70.getLInfDistance(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector87 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64, (org.apache.commons.math.linear.RealVector) arrayRealVector76);
        double[] doubleArray88 = arrayRealVector76.toArray();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector59.add(doubleArray88);
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector48.subtract(doubleArray88);
        double double91 = arrayRealVector32.dotProduct(doubleArray88);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = openMapRealVector13.outerProduct(doubleArray88);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector9.", arrayRealVector32.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector32));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector42.", arrayRealVector17.equals(openMapRealVector42) == openMapRealVector42.equals(arrayRealVector17));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((-32.0d));
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector20.mapCbrtToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector25.mapAdd((double) 1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector25.add(openMapRealVector30);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector35.mapExpToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector35.add(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector35.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector35.mapSqrtToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double60 = arrayRealVector56.dotProduct(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = arrayRealVector51.add(arrayRealVector59);
        double[] doubleArray62 = arrayRealVector61.getDataRef();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector61.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector61.mapDivide((double) (short) -1);
        double[] doubleArray67 = arrayRealVector61.getDataRef();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector35.add(doubleArray67);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = openMapRealVector25.outerProduct(doubleArray67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector20.ebeDivide(doubleArray67);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector17.append(doubleArray67);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector40 and openMapRealVector2.", arrayRealVector40.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector40));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector13.mapMultiply((-1.0d));
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapAtanToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        double double55 = arrayRealVector46.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapCbrt();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector13.ebeDivide(realVector58);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector50 and openMapRealVector2.", arrayRealVector50.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector50));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, true);
        double[] doubleArray13 = arrayRealVector10.getDataRef();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAddToSelf((double) 100L);
        double[] doubleArray29 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = openMapRealVector27.outerProduct(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, false);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector10.ebeMultiply(doubleArray29);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector16.", arrayRealVector2.equals(openMapRealVector16) == openMapRealVector16.equals(arrayRealVector2));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector2.ebeDivide(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector52.mapAdd(1.4711276743037338d);
        boolean boolean55 = openMapRealVector54.isNaN();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector43 and openMapRealVector52.", arrayRealVector43.equals(openMapRealVector52) == openMapRealVector52.equals(arrayRealVector43));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = arrayRealVector31.iterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector26.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector31 and openMapRealVector2.", arrayRealVector31.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector31));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapLog1pToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapExpToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        double double36 = arrayRealVector32.dotProduct(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector27.add(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector15.add(arrayRealVector35);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        double double44 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector42.mapAtan();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAbsToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.subtract(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector48.mapAsinToSelf();
        double double58 = arrayRealVector42.getLInfDistance(arrayRealVector48);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAbsToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector61.subtract(realVector66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector61.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector61.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector61.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(realVector71);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapSubtractToSelf((double) '4');
        double double78 = arrayRealVector75.getNorm();
        double double79 = arrayRealVector72.getL1Distance(arrayRealVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector72);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapCoshToSelf();
        double[] doubleArray82 = arrayRealVector80.getData();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector42.subtract(doubleArray82);
        double double84 = arrayRealVector39.getDistance(doubleArray82);
        double double85 = openMapRealVector6.getDistance(doubleArray82);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector23 and openMapRealVector2.", arrayRealVector23.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector23));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapSqrt();
        double double38 = openMapRealVector30.dotProduct(openMapRealVector36);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector34 and openMapRealVector4.", arrayRealVector34.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector34));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        openMapRealVector9.set(4.35414242816297d);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(realVector29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        double double36 = arrayRealVector33.getNorm();
        double double37 = arrayRealVector30.getL1Distance(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.mapPowToSelf(0.0d);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapSignumToSelf();
        double double41 = openMapRealVector9.getLInfDistance(realVector40);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector27 and openMapRealVector2.", arrayRealVector27.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector27));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector38.mapUlpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = arrayRealVector38.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        arrayRealVector62.unitize();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAbsToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector70.subtract(realVector75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector70.mapSqrt();
        double[] doubleArray78 = arrayRealVector70.getData();
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector67.ebeDivide(doubleArray78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector14.ebeDivide(doubleArray78);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector43 and openMapRealVector2.", arrayRealVector43.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector43));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd((double) 1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.add(openMapRealVector25);
        double double28 = openMapRealVector13.getL1Distance(openMapRealVector25);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector25.mapCbrt();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapSqrt();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        double double44 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector32.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector42.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector42.mapAbsToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector25.ebeMultiply(realVector48);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector2.", arrayRealVector32.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector32));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        double[] doubleArray8 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, true);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector13.mapCos();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector13.mapExpm1();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAddToSelf((double) 100L);
        double[] doubleArray34 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = openMapRealVector32.outerProduct(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector13.add(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector5.subtract(doubleArray34);
        double[] doubleArray39 = openMapRealVector5.getData();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector13 and openMapRealVector38.", arrayRealVector13.equals(openMapRealVector38) == openMapRealVector38.equals(arrayRealVector13));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        double[] doubleArray18 = new double[] {};
        double[] doubleArray20 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, doubleArray20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20, (double) 10);
        double double24 = openMapRealVector23.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        double double33 = arrayRealVector31.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAtan();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        double double39 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapAtan();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAbsToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector43.subtract(realVector48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector43.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector43.mapAsinToSelf();
        double double53 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31, (org.apache.commons.math.linear.RealVector) arrayRealVector43);
        double[] doubleArray55 = arrayRealVector43.toArray();
        double double56 = arrayRealVector27.getDistance(doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector23.append(doubleArray55);
        double double58 = openMapRealVector13.getL1Distance(doubleArray55);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector21 and openMapRealVector2.", arrayRealVector21.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector21));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        double double10 = openMapRealVector7.getSparcity();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapSqrt();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapTanhToSelf();
        double double30 = openMapRealVector7.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector28.add(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector43.mapExpm1();
        double double48 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapAcosToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        double double59 = arrayRealVector51.dotProduct(realVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(realVector58);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapSqrt();
        double[] doubleArray71 = arrayRealVector63.toArray();
        double double72 = openMapRealVector60.getL1Distance(doubleArray71);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector60.copy();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector43.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector13 and openMapRealVector73.", arrayRealVector13.equals(openMapRealVector73) == openMapRealVector73.equals(arrayRealVector13));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAtan();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        double double45 = arrayRealVector29.getLInfDistance(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, (org.apache.commons.math.linear.RealVector) arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector35.mapCosToSelf();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector50.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector50.mapSinh();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector50.mapLog();
        org.apache.commons.math.linear.RealMatrix realMatrix65 = arrayRealVector35.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector66 = arrayRealVector50.copy();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector50.mapAsin();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector50.mapCbrt();
        org.apache.commons.math.linear.RealMatrix realMatrix69 = arrayRealVector2.outerProduct(realVector68);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector23 and openMapRealVector5.", arrayRealVector23.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector23));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = arrayRealVector7.add(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector7.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector7.mapSinh();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector7.mapCeil();
        boolean boolean22 = openMapRealVector4.equals((java.lang.Object) arrayRealVector7);
        arrayRealVector7.setEntry((int) (short) 0, 4.3541424281629695d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector9.append(arrayRealVector14);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        openMapRealVector29.set(10.0d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector38.add(openMapRealVector41);
        int int44 = openMapRealVector41.getDimension();
        double double45 = openMapRealVector41.getSparcity();
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector41.mapUlpToSelf();
        double double47 = openMapRealVector29.getDistance(openMapRealVector41);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapCbrt();
        double double54 = openMapRealVector41.getDistance(realVector53);
        double[] doubleArray57 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57, true);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector41.add(doubleArray57);
        double[] doubleArray61 = new double[] {};
        double[] doubleArray63 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61, doubleArray63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57, arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapLog();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector26, arrayRealVector67);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector29.", arrayRealVector9.equals(openMapRealVector29) == openMapRealVector29.equals(arrayRealVector9));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        double[] doubleArray21 = new double[] {};
        double[] doubleArray23 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21, doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector27.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23, arrayRealVector27);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        double double46 = arrayRealVector44.getNorm();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapAtan();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        double double52 = arrayRealVector50.getNorm();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapAtan();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector56.mapAsinToSelf();
        double double66 = arrayRealVector50.getLInfDistance(arrayRealVector56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44, (org.apache.commons.math.linear.RealVector) arrayRealVector56);
        double[] doubleArray68 = arrayRealVector56.toArray();
        double double69 = arrayRealVector40.getDistance(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector27.subtract(doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray68, 13.35414242816297d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector2.ebeMultiply(doubleArray68);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector27 and openMapRealVector72.", arrayRealVector27.equals(openMapRealVector72) == openMapRealVector72.equals(arrayRealVector27));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector26.mapAsin();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector43.copy();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector47.mapRintToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector60.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector47.subtract(openMapRealVector60);
        double double63 = openMapRealVector26.getL1Distance(openMapRealVector47);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector66.mapAbsToSelf();
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector66.subtract(realVector71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector66.mapSqrt();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAbsToSelf();
        double double78 = arrayRealVector76.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector66.add(arrayRealVector76);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector80 = arrayRealVector76.copy();
        org.apache.commons.math.linear.RealVector realVector81 = openMapRealVector47.add((org.apache.commons.math.linear.RealVector) arrayRealVector76);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector66 and openMapRealVector2.", arrayRealVector66.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector66));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector8.mapUlpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix35 = arrayRealVector8.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        java.lang.String str36 = arrayRealVector8.toString();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        double[] doubleArray50 = arrayRealVector49.getDataRef();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector8.subtract(doubleArray50);
        double double52 = openMapRealVector4.getLInfDistance(doubleArray50);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector55.subtract(realVector60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector55.mapSqrt();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAbsToSelf();
        double double67 = arrayRealVector65.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector55.add(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.getSubVector((int) (short) 1, 0);
        boolean boolean72 = openMapRealVector4.equals((java.lang.Object) 0);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector62 and realVector5.", realVector62.equals(realVector5) == realVector5.equals(realVector62));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapAbs();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapSqrt();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector47.mapLogToSelf();
        arrayRealVector47.set(1.0d);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        double double65 = arrayRealVector61.dotProduct(arrayRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector56.add(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector64.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.mapFloor();
        double double71 = arrayRealVector47.getLInfDistance(arrayRealVector64);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector74.mapExpToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        double double83 = arrayRealVector79.dotProduct(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = arrayRealVector74.add(arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector74.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector74.mapSinh();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector74.mapLog();
        boolean boolean89 = arrayRealVector47.equals((java.lang.Object) arrayRealVector74);
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector47.mapTanToSelf();
        double double91 = arrayRealVector23.getL1Distance(realVector90);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector33 and openMapRealVector30.", arrayRealVector33.equals(openMapRealVector30) == openMapRealVector30.equals(arrayRealVector33));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector10.set(1.4711276743037347d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        int int25 = openMapRealVector22.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.copy();
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector10.append(realVector27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapSqrt();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        double double43 = arrayRealVector41.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector31.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector41.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector46.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapAbsToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector28.append(realVector48);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector31 and openMapRealVector2.", arrayRealVector31.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector31));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.mapCbrtToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        int int31 = openMapRealVector28.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.copy();
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector36.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapCos();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector36.mapExpm1();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        openMapRealVector44.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector44.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector51.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector48.add(openMapRealVector51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAddToSelf((double) 100L);
        double[] doubleArray57 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix58 = openMapRealVector55.outerProduct(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector36.add(doubleArray57);
        org.apache.commons.math.linear.RealMatrix realMatrix60 = openMapRealVector32.outerProduct(doubleArray57);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector2.ebeDivide(doubleArray57);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector16 and openMapRealVector28.", realVector16.equals(openMapRealVector28) == openMapRealVector28.equals(realVector16));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector11.mapAbsToSelf();
        double double13 = arrayRealVector11.getNorm();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector11.mapAtan();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        double double19 = arrayRealVector17.getNorm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAtan();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapAsinToSelf();
        double double33 = arrayRealVector17.getLInfDistance(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector11, (org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double[] doubleArray35 = arrayRealVector23.toArray();
        double double36 = arrayRealVector7.getDistance(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector7.mapTanh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector4.ebeMultiply(realVector37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        openMapRealVector41.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAdd((double) (byte) -1);
        double[] doubleArray47 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector41.outerProduct(doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector49.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector49.copy();
        double double52 = openMapRealVector38.getL1Distance(openMapRealVector51);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapTanhToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapCbrt();
        boolean boolean38 = arrayRealVector28.equals((java.lang.Object) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSubtract(1.0d);
        double double41 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector34.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector34.mapSubtractToSelf(1.1569772511800065d);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector47.mapAdd((double) 1);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector52.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector47.add(openMapRealVector52);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapExpToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        double double66 = arrayRealVector62.dotProduct(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector57.add(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector57.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector57.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector57.mapSqrtToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapExpToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        double double82 = arrayRealVector78.dotProduct(arrayRealVector81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector73.add(arrayRealVector81);
        double[] doubleArray84 = arrayRealVector83.getDataRef();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector83.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector83.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector83.mapDivide((double) (short) -1);
        double[] doubleArray89 = arrayRealVector83.getDataRef();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector57.add(doubleArray89);
        org.apache.commons.math.linear.RealMatrix realMatrix91 = openMapRealVector47.outerProduct(doubleArray89);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray89);
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector34.add(doubleArray89);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector83 and openMapRealVector92.", arrayRealVector83.equals(openMapRealVector92) == openMapRealVector92.equals(arrayRealVector83));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector16.mapSubtractToSelf((double) (-1));
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        openMapRealVector9.unitize();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.mapSqrtToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapExpToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector31.add(arrayRealVector39);
        double[] doubleArray42 = arrayRealVector41.getDataRef();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector41.mapDivide((double) (short) -1);
        double[] doubleArray47 = arrayRealVector41.getDataRef();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector15.add(doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector9.append(realVector48);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector2.", arrayRealVector20.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector20));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        arrayRealVector2.unitize();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector2.add((org.apache.commons.math.linear.RealVector) openMapRealVector7);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector12.", arrayRealVector2.equals(openMapRealVector12) == openMapRealVector12.equals(arrayRealVector2));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapTanhToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        boolean boolean27 = arrayRealVector17.equals((java.lang.Object) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector30.add(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector40.mapDivideToSelf((double) (byte) 0);
        int int45 = arrayRealVector40.getDimension();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector23.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector40.mapSubtract((double) 1L);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector5.ebeMultiply(arrayRealVector40);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        openMapRealVector52.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector59.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector56.add(openMapRealVector59);
        org.apache.commons.math.linear.RealVector realVector62 = openMapRealVector56.mapTan();
        double double63 = arrayRealVector5.getDistance(realVector62);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector52.", arrayRealVector2.equals(openMapRealVector52) == openMapRealVector52.equals(arrayRealVector2));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        boolean boolean21 = openMapRealVector9.isInfinite();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        openMapRealVector24.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector31.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.add(openMapRealVector31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAddToSelf((double) 100L);
        double[] doubleArray37 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix38 = openMapRealVector35.outerProduct(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        openMapRealVector41.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector48.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector45.add(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector48.mapAddToSelf((double) 100L);
        double[] doubleArray54 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = openMapRealVector52.outerProduct(doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector35.append(doubleArray54);
        double[] doubleArray59 = openMapRealVector35.getData();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59, true);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector9.projection(doubleArray59);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector61 and openMapRealVector9.", arrayRealVector61.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector61));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        double double31 = arrayRealVector20.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector12.mapAbs();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector43.mapAddToSelf((double) 100L);
        double[] doubleArray49 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix50 = openMapRealVector47.outerProduct(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray52);
        openMapRealVector53.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector53.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = openMapRealVector60.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector57.add(openMapRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector60.mapAddToSelf((double) 100L);
        double[] doubleArray66 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix67 = openMapRealVector64.outerProduct(doubleArray66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector47.append(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector12.append(doubleArray66);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector36.", arrayRealVector7.equals(openMapRealVector36) == openMapRealVector36.equals(arrayRealVector7));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector13.sparseIterator();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapSqrt();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        double double44 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector32.add(arrayRealVector42);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        double double51 = arrayRealVector48.getNorm();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapSqrt();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        double double66 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector54.add(arrayRealVector64);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector70.mapSubtractToSelf((double) '4');
        double double73 = arrayRealVector70.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector64.subtract(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector48.append(arrayRealVector70);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector48.mapExp();
        boolean boolean77 = arrayRealVector45.equals((java.lang.Object) arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector78 = openMapRealVector13.add((org.apache.commons.math.linear.RealVector) arrayRealVector45);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector2.", arrayRealVector32.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector32));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector10.copy();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector12.mapInv();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector13 and openMapRealVector10.", arrayRealVector13.equals(openMapRealVector10) == openMapRealVector10.equals(arrayRealVector13));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double[] doubleArray6 = new double[] {};
        double[] doubleArray8 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) 10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, doubleArray8);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector9 and openMapRealVector11.", arrayRealVector9.equals(openMapRealVector11) == openMapRealVector11.equals(arrayRealVector9));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        int int13 = openMapRealVector11.getDimension();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapAcosToSelf();
        double[] doubleArray22 = new double[] {};
        double[] doubleArray24 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, doubleArray24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24, (double) 10);
        double double28 = openMapRealVector27.getL1Norm();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        double double37 = arrayRealVector35.getNorm();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector35.mapAtan();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        double double43 = arrayRealVector41.getNorm();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapAtan();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector47.mapAsinToSelf();
        double double57 = arrayRealVector41.getLInfDistance(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35, (org.apache.commons.math.linear.RealVector) arrayRealVector47);
        double[] doubleArray59 = arrayRealVector47.toArray();
        double double60 = arrayRealVector31.getDistance(doubleArray59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector27.append(doubleArray59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector17.append(doubleArray59);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector25 and openMapRealVector27.", arrayRealVector25.equals(openMapRealVector27) == openMapRealVector27.equals(arrayRealVector25));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor19 = openMapRealVector17.sparseIterator();
        double double20 = openMapRealVector17.getLInfNorm();
        double[] doubleArray21 = openMapRealVector17.getData();
        double double22 = arrayRealVector8.getLInfDistance(doubleArray21);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAddToSelf((double) (short) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector17.unitVector();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapCeilToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        openMapRealVector24.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        double double36 = openMapRealVector24.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector24.mapCosToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector24.mapAdd((double) 'a');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector20.append(openMapRealVector24);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector31 and openMapRealVector2.", arrayRealVector31.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector31));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        double double14 = openMapRealVector13.getSparcity();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        double[] doubleArray29 = arrayRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapCosToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector31 = arrayRealVector17.copy();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector13, arrayRealVector17);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector9.", arrayRealVector17.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector17));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, (double) '#');
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        double[] doubleArray83 = arrayRealVector82.getDataRef();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = openMapRealVector69.projection((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector82.mapCbrt();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector69.", arrayRealVector60.equals(openMapRealVector69) == openMapRealVector69.equals(arrayRealVector60));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector1.", arrayRealVector2.equals(openMapRealVector1) == openMapRealVector1.equals(arrayRealVector2));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        boolean boolean13 = openMapRealVector4.isNaN();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector12.", arrayRealVector2.equals(openMapRealVector12) == openMapRealVector12.equals(arrayRealVector2));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapCos();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapExpm1();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        double[] doubleArray36 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = openMapRealVector34.outerProduct(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector15.add(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector6.ebeDivide(realVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector39.append(59.39696961966999d);
        openMapRealVector41.unitize();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector15 and openMapRealVector39.", arrayRealVector15.equals(openMapRealVector39) == openMapRealVector39.equals(arrayRealVector15));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (-6.853169696133174d));
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        double[] doubleArray28 = arrayRealVector27.getData();
        boolean boolean29 = arrayRealVector27.isInfinite();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector39.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector46.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector46.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector39.projection((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector27.ebeDivide(arrayRealVector46);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector32.", arrayRealVector2.equals(openMapRealVector32) == openMapRealVector32.equals(arrayRealVector2));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, 99.0d);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        boolean boolean83 = arrayRealVector80.isInfinite();
        org.apache.commons.math.linear.RealVector realVector84 = openMapRealVector69.add((org.apache.commons.math.linear.RealVector) arrayRealVector80);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector80.mapTanh();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector69.", arrayRealVector60.equals(openMapRealVector69) == openMapRealVector69.equals(arrayRealVector60));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = arrayRealVector14.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector14.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector14.mapSqrtToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapExpToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        double double39 = arrayRealVector35.dotProduct(arrayRealVector38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector30.add(arrayRealVector38);
        double[] doubleArray41 = arrayRealVector40.getDataRef();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector40.mapDivide((double) (short) -1);
        double[] doubleArray46 = arrayRealVector40.getDataRef();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector14.add(doubleArray46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapPow((double) 0);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector50.append((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector57.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector65.mapAcosToSelf();
        double[] doubleArray69 = arrayRealVector65.getDataRef();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector57.ebeDivide(doubleArray69);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46, doubleArray69);
        org.apache.commons.math.linear.RealMatrix realMatrix72 = openMapRealVector11.outerProduct(doubleArray69);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector19 and openMapRealVector2.", arrayRealVector19.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector19));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        double[] doubleArray21 = arrayRealVector17.getDataRef();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector24.add(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapDivideToSelf((double) (byte) 0);
        int int39 = arrayRealVector34.getDimension();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.mapSin();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector17.projection(realVector40);
        double double42 = openMapRealVector13.getL1Distance(realVector40);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector29 and openMapRealVector2.", arrayRealVector29.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector29));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        double[] doubleArray37 = openMapRealVector13.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector13.append(59.39696961966999d);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapExpToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        double double51 = arrayRealVector47.dotProduct(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector42.add(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector42.mapUlpToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        double double65 = arrayRealVector61.dotProduct(arrayRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector56.add(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix69 = arrayRealVector42.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector66);
        java.lang.String str70 = arrayRealVector42.toString();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector73.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapExpToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        double double82 = arrayRealVector78.dotProduct(arrayRealVector81);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector73.add(arrayRealVector81);
        double[] doubleArray84 = arrayRealVector83.getDataRef();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector42.subtract(doubleArray84);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector86 = openMapRealVector13.projection(doubleArray84);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector47 and openMapRealVector2.", arrayRealVector47.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector47));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        openMapRealVector14.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector14.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = openMapRealVector21.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector18.add(openMapRealVector21);
        int int24 = openMapRealVector21.getDimension();
        double double25 = openMapRealVector21.getSparcity();
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector21.mapUlp();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor27 = openMapRealVector21.sparseIterator();
        double double28 = openMapRealVector11.dotProduct(openMapRealVector21);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector14.", arrayRealVector2.equals(openMapRealVector14) == openMapRealVector14.equals(arrayRealVector2));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapTanhToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapCbrt();
        boolean boolean26 = arrayRealVector16.equals((java.lang.Object) arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector22.mapLog1p();
        int int28 = arrayRealVector22.getDimension();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapCoshToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAbsToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector32.subtract(realVector37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector32.mapSqrt();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAbsToSelf();
        double double44 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = arrayRealVector32.add(arrayRealVector42);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector42.subtract(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector22.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector52);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector56.mapExpToSelf();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        double double65 = arrayRealVector61.dotProduct(arrayRealVector64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = arrayRealVector56.add(arrayRealVector64);
        double[] doubleArray67 = arrayRealVector66.getDataRef();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector66.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector66.mapDivide((double) (short) -1);
        double[] doubleArray72 = arrayRealVector66.getDataRef();
        double double73 = arrayRealVector52.getLInfDistance(doubleArray72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray72, (double) '#');
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector78.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapExpToSelf();
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        double double87 = arrayRealVector83.dotProduct(arrayRealVector86);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = arrayRealVector78.add(arrayRealVector86);
        double[] doubleArray89 = arrayRealVector88.getDataRef();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector88.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector91 = openMapRealVector75.projection((org.apache.commons.math.linear.RealVector) arrayRealVector88);
        org.apache.commons.math.linear.RealMatrix realMatrix92 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector88);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector66 and openMapRealVector75.", arrayRealVector66.equals(openMapRealVector75) == openMapRealVector75.equals(arrayRealVector66));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        double double33 = arrayRealVector24.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector31);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector42.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector38.subtract(realVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector38.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector38.ebeDivide(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = arrayRealVector35.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector35);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector56.mapRintToSelf();
        openMapRealVector56.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector59.unitVector();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62);
        openMapRealVector63.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector63.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector70.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector67.add(openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector70.mapAddToSelf((double) 100L);
        double[] doubleArray76 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = openMapRealVector74.outerProduct(doubleArray76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector80 = openMapRealVector60.append(doubleArray76);
        double double81 = arrayRealVector35.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector60);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector63.", arrayRealVector7.equals(openMapRealVector63) == openMapRealVector63.equals(arrayRealVector7));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlp();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAbsToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector17.subtract(realVector22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector17.mapSqrt();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        double double29 = arrayRealVector27.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector17.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector27.mapLogToSelf();
        arrayRealVector27.set(1.0d);
        double[] doubleArray35 = new double[] {};
        double[] doubleArray37 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35, doubleArray37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapSubtract(10.0d);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAbsToSelf();
        double double45 = arrayRealVector43.getNorm();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapAtan();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAbsToSelf();
        double double51 = arrayRealVector49.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.mapAtan();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAbsToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector55.subtract(realVector60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector55.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector55.mapAsinToSelf();
        double double65 = arrayRealVector49.getLInfDistance(arrayRealVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector43, (org.apache.commons.math.linear.RealVector) arrayRealVector55);
        double[] doubleArray67 = arrayRealVector55.toArray();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector38.add(doubleArray67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAbsToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector71.subtract(realVector76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector71.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67, arrayRealVector71);
        arrayRealVector27.setSubVector((int) (byte) 0, doubleArray67);
        double double81 = openMapRealVector9.getLInfDistance(doubleArray67);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector2.", arrayRealVector17.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector17));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapPow((double) 10.0f);
        double[] doubleArray17 = arrayRealVector9.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, 13.35414242816297d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        openMapRealVector24.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector24.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector31.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector28.add(openMapRealVector31);
        int int34 = openMapRealVector31.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.copy();
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        openMapRealVector39.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector39.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector46.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector43.add(openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector48.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector35.subtract(openMapRealVector48);
        double double51 = openMapRealVector21.getL1Distance(openMapRealVector50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector19.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector50);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector6 and openMapRealVector31.", realVector6.equals(openMapRealVector31) == openMapRealVector31.equals(realVector6));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38, (double) '#');
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapLogToSelf();
        double double48 = arrayRealVector44.getL1Norm();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        double double53 = arrayRealVector44.getL1Distance(arrayRealVector52);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector56.subtract(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector56.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector56.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector56.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(realVector66);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector70.mapSubtractToSelf((double) '4');
        double double73 = arrayRealVector70.getNorm();
        double double74 = arrayRealVector67.getL1Distance(arrayRealVector70);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = arrayRealVector44.add(arrayRealVector70);
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector41.add((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = openMapRealVector36.append((org.apache.commons.math.linear.RealVector) openMapRealVector41);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector39 and openMapRealVector2.", arrayRealVector39.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector39));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(0, (double) (byte) 10);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4, (double) 10L);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector10.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector10.mapSinh();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector10.mapCeil();
        boolean boolean25 = openMapRealVector7.equals((java.lang.Object) arrayRealVector10);
        double double26 = openMapRealVector2.getL1Distance(openMapRealVector7);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAtanToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        double double38 = arrayRealVector29.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector36.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector7.projection((org.apache.commons.math.linear.RealVector) arrayRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(realVector40);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector5 and openMapRealVector7.", arrayRealVector5.equals(openMapRealVector7) == openMapRealVector7.equals(arrayRealVector5));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCos();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.subtract(arrayRealVector8);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapLog1pToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        double[] doubleArray40 = arrayRealVector39.toArray();
        double double41 = arrayRealVector23.getLInfDistance(doubleArray40);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector15.projection(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector2.append(doubleArray40);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector8 and openMapRealVector42.", arrayRealVector8.equals(openMapRealVector42) == openMapRealVector42.equals(arrayRealVector8));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        double double28 = arrayRealVector19.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector15.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector15.mapAcosToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor36 = openMapRealVector35.sparseIterator();
        double[] doubleArray37 = openMapRealVector35.getData();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector15.ebeMultiply(doubleArray37);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector35.", arrayRealVector2.equals(openMapRealVector35) == openMapRealVector35.equals(arrayRealVector2));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        int int29 = openMapRealVector26.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.unitVector();
        double[] doubleArray34 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, true);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        openMapRealVector39.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector39.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector46.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector43.add(openMapRealVector46);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector46.mapAddToSelf((double) 100L);
        double[] doubleArray52 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix53 = openMapRealVector50.outerProduct(doubleArray52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34, doubleArray52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector31.append(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector58 = openMapRealVector31.mapRint();
        org.apache.commons.math.linear.RealMatrix realMatrix59 = arrayRealVector12.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector31);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector19.", arrayRealVector7.equals(openMapRealVector19) == openMapRealVector19.equals(arrayRealVector7));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector9.add(realVector22);
        double[] doubleArray24 = arrayRealVector9.getData();
        openMapRealVector4.setSubVector((int) (short) 0, doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        int int38 = openMapRealVector35.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.copy();
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector43.mapCos();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapExpm1();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector58.mapAddToSelf((double) 100L);
        double[] doubleArray64 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix65 = openMapRealVector62.outerProduct(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector43.add(doubleArray64);
        org.apache.commons.math.linear.RealMatrix realMatrix67 = openMapRealVector39.outerProduct(doubleArray64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64, false);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector4.ebeDivide(realVector71);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector28.", arrayRealVector2.equals(openMapRealVector28) == openMapRealVector28.equals(arrayRealVector2));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        double[] doubleArray33 = arrayRealVector32.getDataRef();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.add(arrayRealVector48);
        double double51 = arrayRealVector40.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector32.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector32.mapAbs();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector18.ebeDivide(realVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector((int) '4');
        double double57 = openMapRealVector18.getDistance(openMapRealVector56);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector54.", arrayRealVector32.equals(openMapRealVector54) == openMapRealVector54.equals(arrayRealVector32));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        openMapRealVector17.unitize();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapExp();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector24.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector24.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(realVector34);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapSubtractToSelf((double) '4');
        double double41 = arrayRealVector38.getNorm();
        double double42 = arrayRealVector35.getL1Distance(arrayRealVector38);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector38.mapFloorToSelf();
        java.lang.String str44 = arrayRealVector38.toString();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector17, arrayRealVector38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector2.", arrayRealVector32.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector32));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector26.mapAddToSelf((double) 100L);
        double[] doubleArray32 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix33 = openMapRealVector30.outerProduct(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.append(doubleArray32);
        double[] doubleArray37 = openMapRealVector13.getData();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37, true);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37, 0.0d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector39 and openMapRealVector9.", arrayRealVector39.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector39));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector12.mapAdd((double) ' ');
        double[] doubleArray18 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, true);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapCos();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector23.mapExpm1();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAddToSelf((double) 100L);
        double[] doubleArray44 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = openMapRealVector42.outerProduct(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector23.add(doubleArray44);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20, doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector15.subtract(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector2.append(doubleArray44);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector31.", arrayRealVector2.equals(openMapRealVector31) == openMapRealVector31.equals(arrayRealVector2));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1p();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapSubtractToSelf((double) '4');
        double double23 = arrayRealVector20.getNorm();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector20.append(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector20.mapExp();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector20.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector20.mapExpm1ToSelf();
        double double51 = openMapRealVector13.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector26 and openMapRealVector2.", arrayRealVector26.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector26));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapCoshToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector11.append(openMapRealVector17);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector16 and openMapRealVector2.", arrayRealVector16.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector16));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        boolean boolean18 = openMapRealVector17.isInfinite();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector17.mapTan();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector22.copy();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapLogToSelf();
        double double44 = arrayRealVector40.getL1Norm();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double49 = arrayRealVector40.getL1Distance(arrayRealVector48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector52.subtract(realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector52.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector52.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector52.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(realVector62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapSubtractToSelf((double) '4');
        double double69 = arrayRealVector66.getNorm();
        double double70 = arrayRealVector63.getL1Distance(arrayRealVector66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = arrayRealVector40.add(arrayRealVector66);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        double double76 = arrayRealVector66.dotProduct(realVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector33.add(arrayRealVector66);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector80.mapExpToSelf();
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        double double89 = arrayRealVector85.dotProduct(arrayRealVector88);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = arrayRealVector80.add(arrayRealVector88);
        double[] doubleArray91 = arrayRealVector90.getDataRef();
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector66.subtract(doubleArray91);
        double double93 = openMapRealVector22.getLInfDistance(doubleArray91);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector95 = openMapRealVector22.mapAddToSelf((double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector96 = openMapRealVector17.append(openMapRealVector95);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector30 and openMapRealVector2.", arrayRealVector30.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector30));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector11.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector11.mapSinh();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapLogToSelf();
        double double26 = arrayRealVector22.getL1Norm();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double31 = arrayRealVector22.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapTan();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector30.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector30.mapTanhToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector11.subtract(realVector35);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector29 and openMapRealVector2.", arrayRealVector29.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector29));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapLogToSelf();
        double double27 = arrayRealVector23.getL1Norm();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double32 = arrayRealVector23.getL1Distance(arrayRealVector31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector35.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(realVector45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapSubtractToSelf((double) '4');
        double double52 = arrayRealVector49.getNorm();
        double double53 = arrayRealVector46.getL1Distance(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector23.add(arrayRealVector49);
        double double55 = arrayRealVector49.getL1Norm();
        double[] doubleArray56 = arrayRealVector49.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector57 = openMapRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector49);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector30 and openMapRealVector7.", arrayRealVector30.equals(openMapRealVector7) == openMapRealVector7.equals(arrayRealVector30));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray4);
        openMapRealVector5.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector5.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.add(openMapRealVector12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAddToSelf((double) 100L);
        double[] doubleArray18 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix19 = openMapRealVector16.outerProduct(doubleArray18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, (org.apache.commons.math.linear.RealVector) openMapRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector27.mapLog1pToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix30 = arrayRealVector2.outerProduct(arrayRealVector27);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(realVector21);
        double[] doubleArray23 = openMapRealVector22.getData();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector12.append(doubleArray23);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector21 and openMapRealVector22.", realVector21.equals(openMapRealVector22) == openMapRealVector22.equals(realVector21));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCosh();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12, 9.0d);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapInv();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector2.projection(realVector17);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector13 and openMapRealVector16.", arrayRealVector13.equals(openMapRealVector16) == openMapRealVector16.equals(arrayRealVector13));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (-6.853169696133174d));
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        openMapRealVector8.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector8.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector12.add(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAddToSelf((double) 100L);
        double[] doubleArray21 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix22 = openMapRealVector19.outerProduct(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector5.ebeMultiply(doubleArray21);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector8.", arrayRealVector2.equals(openMapRealVector8) == openMapRealVector8.equals(arrayRealVector2));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector2.ebeDivide(doubleArray49);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = openMapRealVector55.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor57 = openMapRealVector55.sparseIterator();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapSubtractToSelf((double) '4');
        double double63 = arrayRealVector60.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector55.append((org.apache.commons.math.linear.RealVector) arrayRealVector60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector55.mapAdd((double) (short) -1);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor67 = openMapRealVector66.iterator();
        double double68 = openMapRealVector2.dotProduct(openMapRealVector66);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector43 and openMapRealVector52.", arrayRealVector43.equals(openMapRealVector52) == openMapRealVector52.equals(arrayRealVector43));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        arrayRealVector26.unitize();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapSqrt();
        double[] doubleArray42 = arrayRealVector34.getData();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector31.ebeDivide(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        openMapRealVector46.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector46.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector51 = openMapRealVector50.mapAcos();
        boolean boolean52 = openMapRealVector50.isNaN();
        boolean boolean53 = arrayRealVector31.equals((java.lang.Object) boolean52);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector46.", arrayRealVector7.equals(openMapRealVector46) == openMapRealVector46.equals(arrayRealVector7));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapFloorToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        openMapRealVector27.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector31.add(openMapRealVector34);
        int int37 = openMapRealVector34.getDimension();
        double double38 = openMapRealVector34.getSparcity();
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector34.mapUlpToSelf();
        double double40 = openMapRealVector22.getDistance(openMapRealVector34);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector43.mapPow((double) 0);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector43.append((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector34.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        double double55 = arrayRealVector12.getDistance(arrayRealVector50);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector22.", arrayRealVector2.equals(openMapRealVector22) == openMapRealVector22.equals(arrayRealVector2));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector10.set(1.4711276743037347d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        openMapRealVector15.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector19.add(openMapRealVector22);
        int int25 = openMapRealVector22.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.copy();
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector10.append(realVector27);
        boolean boolean29 = openMapRealVector10.isNaN();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapSqrt();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAbsToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector39.subtract(realVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector39.mapCeilToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector49.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector39.add(realVector52);
        double[] doubleArray54 = arrayRealVector39.getData();
        openMapRealVector34.setSubVector((int) (short) 0, doubleArray54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector10.ebeDivide(doubleArray54);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector32 and openMapRealVector2.", arrayRealVector32.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector32));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector15.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(realVector25);
        double[] doubleArray27 = arrayRealVector26.toArray();
        double double28 = arrayRealVector10.getLInfDistance(doubleArray27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector2.projection(doubleArray27);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        openMapRealVector32.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector39.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector36.add(openMapRealVector39);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector41.unitVector();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector45.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector41.append(openMapRealVector45);
        boolean boolean48 = openMapRealVector47.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector47.mapAdd(1.6329299089739802d);
        boolean boolean51 = openMapRealVector29.equals((java.lang.Object) openMapRealVector47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector2.", arrayRealVector7.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector7));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, 99.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector69.unitVector();
        double[] doubleArray71 = openMapRealVector70.toArray();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector69.", arrayRealVector60.equals(openMapRealVector69) == openMapRealVector69.equals(arrayRealVector60));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapInv();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapFloor();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector22.mapCbrtToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector27.mapAdd((double) 1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector27.add(openMapRealVector32);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector37.mapSqrtToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapExpToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double62 = arrayRealVector58.dotProduct(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector53.add(arrayRealVector61);
        double[] doubleArray64 = arrayRealVector63.getDataRef();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector63.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector63.mapDivide((double) (short) -1);
        double[] doubleArray69 = arrayRealVector63.getDataRef();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector37.add(doubleArray69);
        org.apache.commons.math.linear.RealMatrix realMatrix71 = openMapRealVector27.outerProduct(doubleArray69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector22.ebeDivide(doubleArray69);
        double double73 = arrayRealVector12.getDistance(doubleArray69);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector63 and openMapRealVector72.", arrayRealVector63.equals(openMapRealVector72) == openMapRealVector72.equals(arrayRealVector63));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector37.mapAdd((double) 1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector42.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector37.add(openMapRealVector42);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapExpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        double double56 = arrayRealVector52.dotProduct(arrayRealVector55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector47.add(arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector47.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector47.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector47.mapSqrtToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapExpToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        double double72 = arrayRealVector68.dotProduct(arrayRealVector71);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = arrayRealVector63.add(arrayRealVector71);
        double[] doubleArray74 = arrayRealVector73.getDataRef();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector73.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector73.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector73.mapDivide((double) (short) -1);
        double[] doubleArray79 = arrayRealVector73.getDataRef();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector47.add(doubleArray79);
        org.apache.commons.math.linear.RealMatrix realMatrix81 = openMapRealVector37.outerProduct(doubleArray79);
        double double82 = arrayRealVector30.getLInfDistance((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector27 and openMapRealVector42.", realVector27.equals(openMapRealVector42) == openMapRealVector42.equals(realVector27));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        double double31 = arrayRealVector20.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector20);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        openMapRealVector35.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector42.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector39.add(openMapRealVector42);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAddToSelf((double) 100L);
        double[] doubleArray48 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix49 = openMapRealVector46.outerProduct(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        openMapRealVector52.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector59.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector56.add(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector59.mapAddToSelf((double) 100L);
        double[] doubleArray65 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = openMapRealVector63.outerProduct(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector46.append(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65, false);
        double double72 = arrayRealVector12.dotProduct(doubleArray65);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector35.", arrayRealVector7.equals(openMapRealVector35) == openMapRealVector35.equals(arrayRealVector7));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector6.mapExpToSelf();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double15 = arrayRealVector11.dotProduct(arrayRealVector14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = arrayRealVector6.add(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector6.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector6.mapAtanToSelf();
        double double19 = arrayRealVector2.getLInfDistance(arrayRealVector6);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.copy();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector33.mapRintToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapCos();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector37.mapExpm1();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        openMapRealVector45.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector52.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector49.add(openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAddToSelf((double) 100L);
        double[] doubleArray58 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = openMapRealVector56.outerProduct(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector37.add(doubleArray58);
        org.apache.commons.math.linear.RealMatrix realMatrix61 = openMapRealVector33.outerProduct(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6, doubleArray58);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector11 and openMapRealVector22.", arrayRealVector11.equals(openMapRealVector22) == openMapRealVector22.equals(arrayRealVector11));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector24.add(openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector29.unitVector();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector33.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector29.append(openMapRealVector33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector35.mapAdd(42.0d);
        double[] doubleArray38 = openMapRealVector35.toArray();
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector35.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector41.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector35.append((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double[] doubleArray46 = arrayRealVector41.toArray();
        double double47 = arrayRealVector12.dotProduct(doubleArray46);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector20.", arrayRealVector7.equals(openMapRealVector20) == openMapRealVector20.equals(arrayRealVector7));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        arrayRealVector34.set(1713659.1765230843d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector33 and openMapRealVector30.", arrayRealVector33.equals(openMapRealVector30) == openMapRealVector30.equals(arrayRealVector33));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeil();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector2.mapSin();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        java.lang.String str31 = arrayRealVector30.toString();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.add(arrayRealVector48);
        double[] doubleArray51 = arrayRealVector50.getDataRef();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector50.mapDivide((double) (short) -1);
        double[] doubleArray56 = arrayRealVector50.getDataRef();
        double double57 = openMapRealVector36.getL1Distance(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector2.append(doubleArray56);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector36.", arrayRealVector7.equals(openMapRealVector36) == openMapRealVector36.equals(arrayRealVector7));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor29 = openMapRealVector13.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector13.mapInv();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        openMapRealVector33.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector33.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector40.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector37.add(openMapRealVector40);
        org.apache.commons.math.linear.RealVector realVector43 = openMapRealVector37.mapLog1pToSelf();
        double double44 = openMapRealVector13.dotProduct((org.apache.commons.math.linear.RealVector) openMapRealVector37);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(realVector50);
        double[] doubleArray52 = openMapRealVector51.getData();
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector13.add(doubleArray52);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector47 and openMapRealVector2.", arrayRealVector47.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector47));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        double double23 = openMapRealVector22.getL1Norm();
        double double24 = openMapRealVector17.dotProduct(openMapRealVector22);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapLog1pToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector35.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(realVector45);
        double[] doubleArray47 = arrayRealVector46.toArray();
        double double48 = arrayRealVector30.getLInfDistance(doubleArray47);
        double double49 = openMapRealVector22.getDistance(doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector9.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector22);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector2.", arrayRealVector20.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector20));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector4.mapSqrt();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector9.subtract(realVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector9.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector9.add(realVector22);
        double[] doubleArray24 = arrayRealVector9.getData();
        openMapRealVector4.setSubVector((int) (short) 0, doubleArray24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) '#');
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapSqrt();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector15.add(realVector28);
        double[] doubleArray30 = arrayRealVector15.getData();
        openMapRealVector10.setSubVector((int) (short) 0, doubleArray30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector5.ebeDivide(doubleArray30);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector10.", arrayRealVector2.equals(openMapRealVector10) == openMapRealVector10.equals(arrayRealVector2));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector5.unitVector();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        openMapRealVector9.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = openMapRealVector13.add(openMapRealVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAddToSelf((double) 100L);
        double[] doubleArray22 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix23 = openMapRealVector20.outerProduct(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector6.append(doubleArray22);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        openMapRealVector29.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector36.dotProduct(arrayRealVector39);
        double double41 = openMapRealVector29.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector39);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, arrayRealVector39);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector36 and openMapRealVector9.", arrayRealVector36.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector36));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapFloorToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        double double21 = openMapRealVector20.getSparcity();
        boolean boolean22 = openMapRealVector20.isInfinite();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray41);
        openMapRealVector42.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector42.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector49.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector46.add(openMapRealVector49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector49.mapAddToSelf((double) 100L);
        double[] doubleArray55 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix56 = openMapRealVector53.outerProduct(doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector36.append(doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector20.append(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector9.subtract(doubleArray55);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector6 and openMapRealVector16.", arrayRealVector6.equals(openMapRealVector16) == openMapRealVector16.equals(arrayRealVector6));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        double[] doubleArray7 = openMapRealVector6.toArray();
        openMapRealVector6.set((double) (short) 0);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector6.mapAcos();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector20.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector17.add(openMapRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAddToSelf((double) 100L);
        double[] doubleArray26 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix27 = openMapRealVector24.outerProduct(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        openMapRealVector30.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector34.add(openMapRealVector37);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAddToSelf((double) 100L);
        double[] doubleArray43 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix44 = openMapRealVector41.outerProduct(doubleArray43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector24.append(doubleArray43);
        double double48 = openMapRealVector6.getL1Distance(openMapRealVector47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector13.", arrayRealVector2.equals(openMapRealVector13) == openMapRealVector13.equals(arrayRealVector2));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        int int22 = arrayRealVector16.getDimension();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapCoshToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapSqrt();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        double double38 = arrayRealVector36.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector26.add(arrayRealVector36);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = arrayRealVector36.subtract(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector16.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector46);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        double[] doubleArray61 = arrayRealVector60.getDataRef();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector60.mapDivide((double) (short) -1);
        double[] doubleArray66 = arrayRealVector60.getDataRef();
        double double67 = arrayRealVector46.getLInfDistance(doubleArray66);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray66, 99.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = openMapRealVector69.unitVector();
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector69.mapAdd(42.0d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector70.", arrayRealVector60.equals(openMapRealVector70) == openMapRealVector70.equals(arrayRealVector60));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector7 = arrayRealVector5.copy();
        double[] doubleArray8 = arrayRealVector5.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector9.append((double) 10L);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapCosToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector5 and openMapRealVector9.", arrayRealVector5.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector5));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector6.mapLog1pToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapCos();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapExpm1();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector30.mapAddToSelf((double) 100L);
        double[] doubleArray36 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix37 = openMapRealVector34.outerProduct(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector15.add(doubleArray36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector6.ebeDivide(realVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector39.append(59.39696961966999d);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector39.mapCeilToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor43 = openMapRealVector39.sparseIterator();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector15 and openMapRealVector39.", arrayRealVector15.equals(openMapRealVector39) == openMapRealVector39.equals(arrayRealVector15));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        double[] doubleArray8 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, true);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector13.mapCos();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector13.mapExpm1();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAddToSelf((double) 100L);
        double[] doubleArray34 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = openMapRealVector32.outerProduct(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector13.add(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector5.subtract(doubleArray34);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapLog1pToSelf();
        boolean boolean47 = arrayRealVector44.isInfinite();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector58.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector44.ebeDivide(realVector61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector44.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector44.mapSubtract(0.3141504231237282d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector38.ebeMultiply(realVector65);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector41 and openMapRealVector21.", arrayRealVector41.equals(openMapRealVector21) == openMapRealVector21.equals(arrayRealVector41));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapLog10ToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAddToSelf((double) 100L);
        double[] doubleArray29 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = openMapRealVector27.outerProduct(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.mapCeil();
        boolean boolean32 = openMapRealVector11.equals((java.lang.Object) openMapRealVector27);
        double[] doubleArray33 = new double[] {};
        double[] doubleArray35 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33, doubleArray35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35, (double) 10);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        double double46 = arrayRealVector41.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector38.add((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        double double54 = arrayRealVector50.dotProduct(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapLog1pToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAbsToSelf();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector62.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector58.subtract(realVector63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector58.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector58.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector58.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(realVector68);
        double[] doubleArray70 = arrayRealVector69.toArray();
        double double71 = arrayRealVector53.getLInfDistance(doubleArray70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector38.ebeDivide(doubleArray70);
        double double73 = openMapRealVector27.getDistance(openMapRealVector38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector41 and openMapRealVector2.", arrayRealVector41.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector41));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector23.ebeDivide(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapTanh();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector40.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(realVector50);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapSubtractToSelf((double) '4');
        double double57 = arrayRealVector54.getNorm();
        double double58 = arrayRealVector51.getL1Distance(arrayRealVector54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapCoshToSelf();
        double[] doubleArray61 = arrayRealVector59.getData();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector36.append(doubleArray61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector9.ebeDivide(doubleArray61);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector23 and openMapRealVector2.", arrayRealVector23.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector23));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, 1.6853169696133175d);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapTanhToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector19.mapCbrt();
        boolean boolean23 = arrayRealVector13.equals((java.lang.Object) arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector13.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector13);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        openMapRealVector45.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector52.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector49.add(openMapRealVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAddToSelf((double) 100L);
        double[] doubleArray58 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix59 = openMapRealVector56.outerProduct(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector39.append(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector2.ebeMultiply(doubleArray58);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector28.", arrayRealVector10.equals(openMapRealVector28) == openMapRealVector28.equals(arrayRealVector10));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        openMapRealVector35.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        double double47 = openMapRealVector35.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector35.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = openMapRealVector35.mapDivideToSelf(14.355979641962135d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(1, (double) 100.0f);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapSignumToSelf();
        double double55 = openMapRealVector35.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector53);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector26.append((org.apache.commons.math.linear.RealVector) arrayRealVector53);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector42 and openMapRealVector2.", arrayRealVector42.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector42));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        double double6 = arrayRealVector2.getL1Norm();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double11 = arrayRealVector2.getL1Distance(arrayRealVector10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapSubtractToSelf((double) '4');
        double double31 = arrayRealVector28.getNorm();
        double double32 = arrayRealVector25.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector2.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapSin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector37.mapAtanToSelf();
        double double50 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector33.ebeDivide(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector33.mapRint();
        double[] doubleArray53 = new double[] {};
        double[] doubleArray55 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, doubleArray55);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray55, (double) 10);
        double double59 = arrayRealVector33.getDistance(doubleArray55);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector56 and openMapRealVector58.", arrayRealVector56.equals(openMapRealVector58) == openMapRealVector58.equals(arrayRealVector56));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapExpToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector26.add(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector23.append(realVector37);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = arrayRealVector16.subtract(arrayRealVector23);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector31 and openMapRealVector2.", arrayRealVector31.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector31));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector4.copy();
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapCbrt();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (-6.853169696133174d));
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector8.mapPow((double) 0);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector8.append((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapLog1p();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector15.append(arrayRealVector20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector5.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector36.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapExpm1ToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor52 = arrayRealVector48.iterator();
        boolean boolean53 = openMapRealVector33.equals((java.lang.Object) arrayRealVector48);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapLogToSelf();
        arrayRealVector12.set(1.0d);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector21.mapExpToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double30 = arrayRealVector26.dotProduct(arrayRealVector29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = arrayRealVector21.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapMultiply((double) 10L);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapFloor();
        double double36 = arrayRealVector12.getLInfDistance(arrayRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapSqrt();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        double double52 = arrayRealVector50.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector40.add(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector50.unitVector();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector50);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector12 and openMapRealVector37.", arrayRealVector12.equals(openMapRealVector37) == openMapRealVector37.equals(arrayRealVector12));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapSubtractToSelf((double) '4');
        double double21 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = arrayRealVector12.subtract(arrayRealVector18);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double33 = arrayRealVector29.dotProduct(arrayRealVector32);
        double double34 = arrayRealVector25.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector32);
        double double35 = arrayRealVector18.getLInfDistance(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector25.mapInv();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector25.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector25.mapCeilToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = openMapRealVector41.mapAdd((double) ' ');
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector47.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapAcosToSelf();
        double[] doubleArray51 = arrayRealVector47.getDataRef();
        double double52 = openMapRealVector44.getDistance(doubleArray51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51, (-6.853169696133174d));
        double double55 = arrayRealVector25.getDistance(doubleArray51);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector47 and openMapRealVector54.", arrayRealVector47.equals(openMapRealVector54) == openMapRealVector54.equals(arrayRealVector47));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        org.apache.commons.math.linear.RealVector realVector9 = openMapRealVector6.mapSinh();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapSqrt();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        double double24 = arrayRealVector22.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector12.add(arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.getSubVector((int) (short) 1, 0);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector25.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector25.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector6.projection(realVector30);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector12 and openMapRealVector2.", arrayRealVector12.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector12));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.append(4.122307273313197E-9d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapLogToSelf();
        double double27 = arrayRealVector23.getL1Norm();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double32 = arrayRealVector23.getL1Distance(arrayRealVector31);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        double double44 = arrayRealVector35.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector23.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        double double46 = arrayRealVector17.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector42);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector49.mapPow((double) 0);
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector49.append((org.apache.commons.math.linear.RealVector) arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector56.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector56.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector64.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector64.mapAcosToSelf();
        double[] doubleArray68 = arrayRealVector64.getDataRef();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector56.ebeDivide(doubleArray68);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray68);
        double double71 = arrayRealVector42.getLInfDistance(doubleArray68);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector64 and openMapRealVector70.", arrayRealVector64.equals(openMapRealVector70) == openMapRealVector70.equals(arrayRealVector64));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapSqrt();
        double[] doubleArray22 = arrayRealVector14.toArray();
        double double23 = openMapRealVector11.getL1Distance(doubleArray22);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector11.copy();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        openMapRealVector27.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        double double38 = arrayRealVector34.dotProduct(arrayRealVector37);
        double double39 = openMapRealVector27.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector40 = openMapRealVector27.mapTanToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector24.append((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector8 and openMapRealVector11.", arrayRealVector8.equals(openMapRealVector11) == openMapRealVector11.equals(arrayRealVector8));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapSqrt();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        double double14 = openMapRealVector9.getSparcity();
        double[] doubleArray15 = new double[] {};
        double[] doubleArray17 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17, (double) 10);
        double double21 = openMapRealVector20.getL1Norm();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        double double30 = arrayRealVector28.getNorm();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapAtan();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        double double36 = arrayRealVector34.getNorm();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector34.mapAtan();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector40.mapAsinToSelf();
        double double50 = arrayRealVector34.getLInfDistance(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28, (org.apache.commons.math.linear.RealVector) arrayRealVector40);
        double[] doubleArray52 = arrayRealVector40.toArray();
        double double53 = arrayRealVector24.getDistance(doubleArray52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector20.append(doubleArray52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector9.append(openMapRealVector20);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector28 and openMapRealVector2.", arrayRealVector28.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector28));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, false);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapCeilToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        double double35 = arrayRealVector31.dotProduct(arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector21.projection((org.apache.commons.math.linear.RealVector) arrayRealVector34);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector34.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector18.append(realVector38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector21 and openMapRealVector2.", arrayRealVector21.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector21));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapCbrtToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(realVector11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector12.unitVector();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        double double27 = arrayRealVector16.getLInfNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapSinToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector45.mapPow((double) 0);
        double double50 = arrayRealVector35.getLInfDistance(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector35.mapCbrtToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(realVector32, arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector16.add(arrayRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector13.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector12.", arrayRealVector10.equals(openMapRealVector12) == openMapRealVector12.equals(arrayRealVector10));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapExpToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        double double62 = arrayRealVector58.dotProduct(arrayRealVector61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = arrayRealVector53.add(arrayRealVector61);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector53.mapUlpToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapExpToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        double double76 = arrayRealVector72.dotProduct(arrayRealVector75);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = arrayRealVector67.add(arrayRealVector75);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector77.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix80 = arrayRealVector53.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector77);
        java.lang.String str81 = arrayRealVector53.toString();
        java.lang.Double[] doubleArray83 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray83);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector84.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector84.mapExpToSelf();
        java.lang.Double[] doubleArray88 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray88);
        java.lang.Double[] doubleArray91 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray91);
        double double93 = arrayRealVector89.dotProduct(arrayRealVector92);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector94 = arrayRealVector84.add(arrayRealVector92);
        double[] doubleArray95 = arrayRealVector94.getDataRef();
        org.apache.commons.math.linear.RealVector realVector96 = arrayRealVector53.subtract(doubleArray95);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector97 = openMapRealVector29.projection(doubleArray95);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector58 and openMapRealVector2.", arrayRealVector58.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector58));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15, false);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAcosToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector22.mapUlpToSelf();
        double[] doubleArray34 = arrayRealVector22.toArray();
        double double35 = arrayRealVector18.getDistance(doubleArray34);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector27 and openMapRealVector2.", arrayRealVector27.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector27));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAbsToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.subtract(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector16.mapSqrt();
        double[] doubleArray24 = arrayRealVector16.toArray();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector2.subtract(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapExpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        double double37 = arrayRealVector33.dotProduct(arrayRealVector36);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = arrayRealVector28.add(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector28.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector28.mapSqrtToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapExpToSelf();
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        double double53 = arrayRealVector49.dotProduct(arrayRealVector52);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector44.add(arrayRealVector52);
        double[] doubleArray55 = arrayRealVector54.getDataRef();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector54.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector54.mapDivide((double) (short) -1);
        double[] doubleArray60 = arrayRealVector54.getDataRef();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector28.add(doubleArray60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24, doubleArray60);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector54 and openMapRealVector62.", arrayRealVector54.equals(openMapRealVector62) == openMapRealVector62.equals(arrayRealVector54));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        openMapRealVector13.set(43.47112767430374d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector22.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector22.mapAdd((double) ' ');
        double[] doubleArray28 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28, true);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapCos();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector33.mapExpm1();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        openMapRealVector41.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector48.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector45.add(openMapRealVector48);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector48.mapAddToSelf((double) 100L);
        double[] doubleArray54 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix55 = openMapRealVector52.outerProduct(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector33.add(doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30, doubleArray54);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector25.subtract(doubleArray54);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector61.mapAdd((double) 1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector58.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector61);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector13.append(openMapRealVector61);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector33 and openMapRealVector58.", arrayRealVector33.equals(openMapRealVector58) == openMapRealVector58.equals(arrayRealVector33));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        boolean boolean36 = openMapRealVector14.isNaN();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector14.mapExp();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector37 and openMapRealVector14.", arrayRealVector37.equals(openMapRealVector14) == openMapRealVector14.equals(arrayRealVector37));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector9.mapPowToSelf(5.64585757183703d);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        double[] doubleArray21 = arrayRealVector17.getDataRef();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector9.ebeDivide(doubleArray21);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21, true);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector23.", arrayRealVector17.equals(openMapRealVector23) == openMapRealVector23.equals(arrayRealVector17));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapLog10ToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAddToSelf((double) 100L);
        double[] doubleArray29 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix30 = openMapRealVector27.outerProduct(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector27.mapCeil();
        boolean boolean32 = openMapRealVector11.equals((java.lang.Object) openMapRealVector27);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector27.mapSin();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector36.mapRintToSelf();
        openMapRealVector36.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray46);
        openMapRealVector47.set(10.0d);
        openMapRealVector47.unitize();
        double double51 = openMapRealVector36.getL1Distance(openMapRealVector47);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector54.mapExpToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        double double63 = arrayRealVector59.dotProduct(arrayRealVector62);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector54.add(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector62.mapTanhToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapCbrt();
        boolean boolean72 = arrayRealVector62.equals((java.lang.Object) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector68.mapSubtract(1.0d);
        double double75 = openMapRealVector47.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector68.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector68.mapTanToSelf();
        double double78 = openMapRealVector27.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector59 and openMapRealVector2.", arrayRealVector59.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector59));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, false);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector46.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector46.mapAdd((double) ' ');
        double[] doubleArray52 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52, true);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector57.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector57.mapCos();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector57.mapExpm1();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray64);
        openMapRealVector65.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = openMapRealVector65.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = openMapRealVector72.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector69.add(openMapRealVector72);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector76 = openMapRealVector72.mapAddToSelf((double) 100L);
        double[] doubleArray78 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix79 = openMapRealVector76.outerProduct(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector57.add(doubleArray78);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54, doubleArray78);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector82 = openMapRealVector49.subtract(doubleArray78);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector43.add(doubleArray78);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector82.", arrayRealVector17.equals(openMapRealVector82) == openMapRealVector82.equals(arrayRealVector17));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector15 = arrayRealVector10.copy();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        openMapRealVector18.set(10.0d);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        int int33 = openMapRealVector30.getDimension();
        double double34 = openMapRealVector30.getSparcity();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector30.mapUlpToSelf();
        double double36 = openMapRealVector18.getDistance(openMapRealVector30);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector39.mapCbrt();
        double double43 = openMapRealVector30.getDistance(realVector42);
        double[] doubleArray46 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46, true);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector30.add(doubleArray46);
        double[] doubleArray50 = openMapRealVector30.getData();
        double double51 = arrayRealVector10.dotProduct(doubleArray50);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector18.", arrayRealVector7.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector7));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector5.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapExpToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        double double14 = arrayRealVector10.dotProduct(arrayRealVector13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector5.add(arrayRealVector13);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTanhToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        double double29 = arrayRealVector25.dotProduct(arrayRealVector28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = arrayRealVector20.add(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector20.mapUlpToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapExpToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        double double43 = arrayRealVector39.dotProduct(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector34.add(arrayRealVector42);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = arrayRealVector20.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector50.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector50.mapCos();
        boolean boolean55 = arrayRealVector44.equals((java.lang.Object) arrayRealVector50);
        double double56 = arrayRealVector15.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapLogToSelf();
        double double63 = arrayRealVector59.getL1Norm();
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        double double68 = arrayRealVector59.getL1Distance(arrayRealVector67);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAbsToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector71.subtract(realVector76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector71.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector71.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector71.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(realVector81);
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapSubtractToSelf((double) '4');
        double double88 = arrayRealVector85.getNorm();
        double double89 = arrayRealVector82.getL1Distance(arrayRealVector85);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = arrayRealVector59.add(arrayRealVector85);
        double double91 = arrayRealVector85.getL1Norm();
        double[] doubleArray92 = arrayRealVector85.toArray();
        org.apache.commons.math.linear.RealVector realVector93 = arrayRealVector85.mapRint();
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector44.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector85);
        arrayRealVector44.set(11.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector97 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2, arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector98 = arrayRealVector44.mapTan();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector1.", arrayRealVector2.equals(openMapRealVector1) == openMapRealVector1.equals(arrayRealVector2));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 9.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector5.", arrayRealVector2.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector2));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAddToSelf((double) (short) 100);
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapFloorToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapExpToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = arrayRealVector10.add(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapTanhToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector24.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapCbrt();
        boolean boolean28 = arrayRealVector18.equals((java.lang.Object) arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector24.mapLog1p();
        int int30 = arrayRealVector24.getDimension();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCoshToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAbsToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector34.subtract(realVector39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector34.mapSqrt();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        double double46 = arrayRealVector44.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector34.add(arrayRealVector44);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapSubtractToSelf((double) '4');
        double double53 = arrayRealVector50.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector44.subtract(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector24.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector58.mapExpToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        double double67 = arrayRealVector63.dotProduct(arrayRealVector66);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector58.add(arrayRealVector66);
        double[] doubleArray69 = arrayRealVector68.getDataRef();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector68.mapDivide((double) (short) -1);
        double[] doubleArray74 = arrayRealVector68.getDataRef();
        double double75 = arrayRealVector54.getLInfDistance(doubleArray74);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray74, (double) '#');
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector80.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector80.mapExpToSelf();
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        double double89 = arrayRealVector85.dotProduct(arrayRealVector88);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector90 = arrayRealVector80.add(arrayRealVector88);
        double[] doubleArray91 = arrayRealVector90.getDataRef();
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector90.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector93 = openMapRealVector77.projection((org.apache.commons.math.linear.RealVector) arrayRealVector90);
        double double94 = arrayRealVector7.getL1Distance(arrayRealVector90);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector68 and openMapRealVector77.", arrayRealVector68.equals(openMapRealVector77) == openMapRealVector77.equals(arrayRealVector68));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapSignum();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        double double24 = openMapRealVector23.getL1Norm();
        double double25 = openMapRealVector18.dotProduct(openMapRealVector23);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapLog1pToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector36);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector36.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector36.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(realVector46);
        double[] doubleArray48 = arrayRealVector47.toArray();
        double double49 = arrayRealVector31.getLInfDistance(doubleArray48);
        double double50 = openMapRealVector23.getDistance(doubleArray48);
        openMapRealVector13.setSubVector((int) (short) 0, doubleArray48);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector21 and openMapRealVector2.", arrayRealVector21.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector21));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1p();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        double double32 = openMapRealVector20.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector20.mapTanToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector20.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector13.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector34);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector27 and openMapRealVector2.", arrayRealVector27.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector27));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAcosToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector33 and openMapRealVector30.", arrayRealVector33.equals(openMapRealVector30) == openMapRealVector30.equals(arrayRealVector33));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        java.lang.Double[] doubleArray0 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector1 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray0);
        java.lang.Double[] doubleArray3 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray3);
        openMapRealVector4.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = openMapRealVector4.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector8.add(openMapRealVector11);
        int int14 = openMapRealVector11.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.copy();
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        openMapRealVector19.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector26.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.add(openMapRealVector26);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector28.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector15.subtract(openMapRealVector28);
        double double31 = openMapRealVector1.getL1Distance(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector1.append(1.749534445339284d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector33.mapAdd(1.6329299089739802d);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        int int48 = openMapRealVector45.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector35.subtract((org.apache.commons.math.linear.RealVector) openMapRealVector49);
        int int51 = openMapRealVector35.getDimension();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray53);
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray56);
        double double60 = openMapRealVector59.getL1Norm();
        double double61 = openMapRealVector54.dotProduct(openMapRealVector59);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        double double68 = arrayRealVector64.dotProduct(arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector67.mapLog1pToSelf();
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAbsToSelf();
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector76.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector72.subtract(realVector77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector72.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector72);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector72.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector72.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(realVector82);
        double[] doubleArray84 = arrayRealVector83.toArray();
        double double85 = arrayRealVector67.getLInfDistance(doubleArray84);
        double double86 = openMapRealVector59.getDistance(doubleArray84);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector35.subtract(openMapRealVector59);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector57 and openMapRealVector4.", arrayRealVector57.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector57));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapCbrt();
        boolean boolean20 = arrayRealVector10.equals((java.lang.Object) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapLog1p();
        double double22 = arrayRealVector16.getL1Norm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector16);
        double double24 = arrayRealVector16.getLInfNorm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        openMapRealVector27.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector27);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector30.unitVector();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = openMapRealVector41.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = openMapRealVector38.add(openMapRealVector41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector41.mapAddToSelf((double) 100L);
        double[] doubleArray47 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix48 = openMapRealVector45.outerProduct(doubleArray47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector31.append(doubleArray47);
        org.apache.commons.math.linear.RealMatrix realMatrix52 = arrayRealVector16.outerProduct(doubleArray47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector34.", arrayRealVector7.equals(openMapRealVector34) == openMapRealVector34.equals(arrayRealVector7));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCos();
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAcosToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        double double17 = arrayRealVector9.dotProduct(realVector16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(realVector16);
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapSqrt();
        double[] doubleArray29 = arrayRealVector21.toArray();
        double double30 = openMapRealVector18.getL1Distance(doubleArray29);
        arrayRealVector2.setSubVector((int) (short) 0, doubleArray29);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector18.", arrayRealVector2.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector2));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        double double31 = arrayRealVector27.dotProduct(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector22.add(arrayRealVector30);
        double[] doubleArray33 = arrayRealVector32.getDataRef();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector32.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector32.mapDivide((double) (short) -1);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector40.mapExpToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        double double49 = arrayRealVector45.dotProduct(arrayRealVector48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector40.add(arrayRealVector48);
        double double51 = arrayRealVector40.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector32.ebeMultiply((org.apache.commons.math.linear.RealVector) arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector32.mapAbs();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector18.ebeDivide(realVector53);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector54.mapLog();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector18.", arrayRealVector7.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector7));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        openMapRealVector13.set(43.47112767430374d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        openMapRealVector23.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = openMapRealVector30.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.add(openMapRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector32.unitVector();
        double double34 = openMapRealVector13.dotProduct(openMapRealVector32);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapTanhToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapCbrt();
        boolean boolean55 = arrayRealVector45.equals((java.lang.Object) arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.mapSubtract(1.0d);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector64.mapExpToSelf();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        double double73 = arrayRealVector69.dotProduct(arrayRealVector72);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = arrayRealVector64.add(arrayRealVector72);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector64.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector64.mapAtanToSelf();
        double double77 = arrayRealVector60.getLInfDistance(arrayRealVector64);
        double double78 = arrayRealVector51.getL1Distance(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector79 = openMapRealVector13.add((org.apache.commons.math.linear.RealVector) arrayRealVector60);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector42 and openMapRealVector23.", arrayRealVector42.equals(openMapRealVector23) == openMapRealVector23.equals(arrayRealVector42));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.4711276743037347d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector3.", arrayRealVector2.equals(openMapRealVector3) == openMapRealVector3.equals(arrayRealVector2));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapSqrtToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapExpToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = arrayRealVector18.add(arrayRealVector26);
        double[] doubleArray29 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector28.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapDivide((double) (short) -1);
        double[] doubleArray34 = arrayRealVector28.getDataRef();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.add(doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector28 and openMapRealVector36.", arrayRealVector28.equals(openMapRealVector36) == openMapRealVector36.equals(arrayRealVector28));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector34.mapSubtractToSelf(5.64585757183703d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector33 and openMapRealVector30.", arrayRealVector33.equals(openMapRealVector30) == openMapRealVector30.equals(arrayRealVector33));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor5 = openMapRealVector4.sparseIterator();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapLogToSelf();
        double double12 = arrayRealVector8.getL1Norm();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double17 = arrayRealVector8.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapTan();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAsin();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector4.ebeMultiply(realVector21);
        org.apache.commons.math.linear.RealVector realVector23 = openMapRealVector4.mapCosToSelf();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector21 and openMapRealVector22.", realVector21.equals(openMapRealVector22) == openMapRealVector22.equals(realVector21));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        double double13 = openMapRealVector9.getSparcity();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        double double17 = openMapRealVector9.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector9.mapCbrt();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector16 and openMapRealVector9.", arrayRealVector16.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector16));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, 1.0E-12d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector2.dotProduct(realVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(realVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector11.mapSinhToSelf();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector15.subtract(realVector20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector15.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(realVector25);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapSubtractToSelf((double) '4');
        double double32 = arrayRealVector29.getNorm();
        double double33 = arrayRealVector26.getL1Distance(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.mapPowToSelf(0.0d);
        double[] doubleArray36 = arrayRealVector29.getDataRef();
        double double37 = openMapRealVector11.getLInfDistance(doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray39);
        openMapRealVector40.set(10.0d);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        openMapRealVector45.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = openMapRealVector52.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector49.add(openMapRealVector52);
        int int55 = openMapRealVector52.getDimension();
        double double56 = openMapRealVector52.getSparcity();
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector52.mapUlpToSelf();
        double double58 = openMapRealVector40.getDistance(openMapRealVector52);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector61.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector61.mapCbrt();
        double double65 = openMapRealVector52.getDistance(realVector64);
        double[] doubleArray68 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68, true);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector52.add(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector72 = openMapRealVector52.mapAtan();
        double[] doubleArray73 = openMapRealVector52.toArray();
        double double74 = openMapRealVector11.getDistance(doubleArray73);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector8 and openMapRealVector40.", arrayRealVector8.equals(openMapRealVector40) == openMapRealVector40.equals(arrayRealVector8));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector4.copy();
        double[] doubleArray6 = new double[] {};
        double[] doubleArray8 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6, doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8, (double) 10);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        double double19 = arrayRealVector14.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector11.add((org.apache.commons.math.linear.RealVector) arrayRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        double double27 = arrayRealVector23.dotProduct(arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapLog1pToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector31.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector31.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(realVector41);
        double[] doubleArray43 = arrayRealVector42.toArray();
        double double44 = arrayRealVector26.getLInfDistance(doubleArray43);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector11.ebeDivide(doubleArray43);
        double double46 = openMapRealVector5.dotProduct(openMapRealVector45);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector11.mapLog10ToSelf();
        double[] doubleArray14 = new double[] {};
        double[] doubleArray16 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14, doubleArray16);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16, (double) 10);
        double[] doubleArray20 = openMapRealVector19.getData();
        double double21 = openMapRealVector11.getDistance(doubleArray20);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector19.", arrayRealVector17.equals(openMapRealVector19) == openMapRealVector19.equals(arrayRealVector17));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        openMapRealVector36.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = openMapRealVector43.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector40.add(openMapRealVector43);
        int int46 = openMapRealVector43.getDimension();
        double double47 = openMapRealVector43.getSparcity();
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector43.mapUlpToSelf();
        double double49 = openMapRealVector31.getDistance(openMapRealVector43);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapCbrt();
        double double56 = openMapRealVector43.getDistance(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = openMapRealVector13.add((org.apache.commons.math.linear.RealVector) openMapRealVector43);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector60.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapPow((double) 0);
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector60.append((org.apache.commons.math.linear.RealVector) arrayRealVector67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector67.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector67.mapPowToSelf(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector67.mapPow((double) 10.0f);
        double[] doubleArray75 = arrayRealVector67.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector77 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray75, 13.35414242816297d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector78 = openMapRealVector13.projection(doubleArray75);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector64 and openMapRealVector9.", realVector64.equals(openMapRealVector9) == openMapRealVector9.equals(realVector64));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapCbrt();
        double[] doubleArray7 = new double[] {};
        double[] doubleArray9 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7, doubleArray9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapSubtract(10.0d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAbsToSelf();
        double double17 = arrayRealVector15.getNorm();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAtan();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        double double23 = arrayRealVector21.getNorm();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector21.mapAtan();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector27.mapAsinToSelf();
        double double37 = arrayRealVector21.getLInfDistance(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15, (org.apache.commons.math.linear.RealVector) arrayRealVector27);
        double[] doubleArray39 = arrayRealVector27.toArray();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector10.add(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector43.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapExpToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        double double52 = arrayRealVector48.dotProduct(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector43.add(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector53.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapDivideToSelf((double) (byte) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = arrayRealVector10.ebeMultiply(arrayRealVector53);
        double double59 = arrayRealVector10.getNorm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector5.append((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector63.mapPowToSelf((double) 10.0f);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector77.mapAbsToSelf();
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector81.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector77.subtract(realVector82);
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector77.mapSqrt();
        double[] doubleArray85 = arrayRealVector77.toArray();
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector63.subtract(doubleArray85);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector87 = openMapRealVector5.subtract(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector88 = openMapRealVector5.mapFloor();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector12 and openMapRealVector87.", realVector12.equals(openMapRealVector87) == openMapRealVector87.equals(realVector12));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector5);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector7 = arrayRealVector5.copy();
        double[] doubleArray8 = arrayRealVector5.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector9.append((double) 10L);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector14.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(realVector24);
        double[] doubleArray26 = arrayRealVector25.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26, true);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector11.append(doubleArray26);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector5 and openMapRealVector9.", arrayRealVector5.equals(openMapRealVector9) == openMapRealVector9.equals(arrayRealVector5));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapLog();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector8.dotProduct(realVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(realVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapSqrt();
        double[] doubleArray28 = arrayRealVector20.toArray();
        double double29 = openMapRealVector17.getL1Distance(doubleArray28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector2.subtract(doubleArray28);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector14 and openMapRealVector17.", arrayRealVector14.equals(openMapRealVector17) == openMapRealVector17.equals(arrayRealVector14));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapLogToSelf();
        double double41 = arrayRealVector37.getL1Norm();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double46 = arrayRealVector37.getL1Distance(arrayRealVector45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapAbsToSelf();
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector49.subtract(realVector54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector49.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector49);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector49.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector49.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(realVector59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapSubtractToSelf((double) '4');
        double double66 = arrayRealVector63.getNorm();
        double double67 = arrayRealVector60.getL1Distance(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = arrayRealVector37.add(arrayRealVector63);
        java.lang.Double[] doubleArray70 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector71.mapAtanToSelf();
        double double73 = arrayRealVector63.dotProduct(realVector72);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector63.mapUlpToSelf();
        double[] doubleArray75 = arrayRealVector63.toArray();
        org.apache.commons.math.linear.RealVector realVector76 = openMapRealVector14.add(doubleArray75);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector44 and openMapRealVector2.", arrayRealVector44.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector44));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.String str13 = arrayRealVector12.toString();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15, (double) 10L);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector12.mapCosh();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector18.", arrayRealVector7.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector7));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        double[] doubleArray8 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8, true);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector13.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector13.mapCos();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector13.mapExpm1();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray20);
        openMapRealVector21.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector21.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = openMapRealVector28.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.add(openMapRealVector28);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAddToSelf((double) 100L);
        double[] doubleArray34 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix35 = openMapRealVector32.outerProduct(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector13.add(doubleArray34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector10, doubleArray34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector5.subtract(doubleArray34);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector41.mapExpToSelf();
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48);
        double double50 = arrayRealVector46.dotProduct(arrayRealVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector41.add(arrayRealVector49);
        boolean boolean52 = arrayRealVector49.isInfinite();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapLogToSelf();
        double double59 = arrayRealVector55.getL1Norm();
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        double double64 = arrayRealVector55.getL1Distance(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapTan();
        double double66 = arrayRealVector49.getDistance(arrayRealVector63);
        double[] doubleArray67 = arrayRealVector63.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector68 = openMapRealVector5.ebeMultiply(doubleArray67);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector13 and openMapRealVector38.", arrayRealVector13.equals(openMapRealVector38) == openMapRealVector38.equals(arrayRealVector13));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        double[] doubleArray18 = arrayRealVector15.getDataRef();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector21.mapAbsToSelf();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector21.subtract(realVector26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector21.mapAtanToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        double double33 = arrayRealVector31.getNorm();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector31.mapAtan();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector37.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix42 = arrayRealVector31.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector37);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector45.mapSubtractToSelf((double) '4');
        double double48 = arrayRealVector45.getNorm();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector45.mapDivide((double) (byte) -1);
        double[] doubleArray51 = arrayRealVector45.getData();
        double double52 = arrayRealVector37.dotProduct(doubleArray51);
        double double53 = arrayRealVector21.dotProduct(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18, doubleArray51);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector2.ebeMultiply(doubleArray51);
        double[] doubleArray58 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58, true);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62);
        openMapRealVector63.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector63.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector70 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = openMapRealVector70.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector67.add(openMapRealVector70);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector74 = openMapRealVector70.mapAddToSelf((double) 100L);
        double[] doubleArray76 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix77 = openMapRealVector74.outerProduct(doubleArray76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58, doubleArray76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, doubleArray58);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector10 and openMapRealVector63.", arrayRealVector10.equals(openMapRealVector63) == openMapRealVector63.equals(arrayRealVector10));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        boolean boolean36 = openMapRealVector14.isNaN();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapDivideToSelf((double) 100);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapMultiplyToSelf((double) (-1.0f));
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector41 and openMapRealVector14.", realVector41.equals(openMapRealVector14) == openMapRealVector14.equals(realVector41));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector13);
        double double16 = openMapRealVector15.getSparcity();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector19.mapAdd((double) ' ');
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapAcosToSelf();
        double[] doubleArray29 = arrayRealVector25.getDataRef();
        double double30 = openMapRealVector22.getDistance(doubleArray29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29, (-6.853169696133174d));
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector15.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector32);
        boolean boolean34 = openMapRealVector32.isInfinite();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector25 and openMapRealVector33.", arrayRealVector25.equals(openMapRealVector33) == openMapRealVector33.equals(arrayRealVector25));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector9.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector14.unitVector();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        openMapRealVector18.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector22.add(openMapRealVector25);
        int int28 = openMapRealVector25.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = openMapRealVector25.unitVector();
        double[] doubleArray33 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33, true);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAddToSelf((double) 100L);
        double[] doubleArray51 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = openMapRealVector49.outerProduct(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33, doubleArray51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector30.append(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51, 0, (int) (byte) 0);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector14.ebeMultiply(doubleArray51);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector14.unitVector();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector54 and openMapRealVector60.", arrayRealVector54.equals(openMapRealVector60) == openMapRealVector60.equals(arrayRealVector54));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector49.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector49.mapSignumToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray53);
        openMapRealVector54.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = openMapRealVector54.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector54.mapRintToSelf();
        openMapRealVector54.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray64);
        openMapRealVector65.set(10.0d);
        openMapRealVector65.unitize();
        double double69 = openMapRealVector54.getL1Distance(openMapRealVector65);
        java.lang.Double[] doubleArray71 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector72.mapExpToSelf();
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        double double81 = arrayRealVector77.dotProduct(arrayRealVector80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = arrayRealVector72.add(arrayRealVector80);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector80.mapTanhToSelf();
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector86.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector86.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector86.mapCbrt();
        boolean boolean90 = arrayRealVector80.equals((java.lang.Object) arrayRealVector86);
        org.apache.commons.math.linear.RealVector realVector92 = arrayRealVector86.mapSubtract(1.0d);
        double double93 = openMapRealVector65.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector86);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector86.mapAsin();
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector86.mapExp();
        org.apache.commons.math.linear.RealVector realVector96 = arrayRealVector86.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector97 = arrayRealVector86.mapLog1pToSelf();
        double double98 = arrayRealVector49.getL1Distance(arrayRealVector86);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector49 and openMapRealVector65.", arrayRealVector49.equals(openMapRealVector65) == openMapRealVector65.equals(arrayRealVector49));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        double double15 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapDivide((double) 10L);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapSqrt();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        double double32 = arrayRealVector30.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.add(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector30.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(realVector17, arrayRealVector30);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        openMapRealVector38.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = openMapRealVector45.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector47 = openMapRealVector42.add(openMapRealVector45);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = openMapRealVector45.mapAddToSelf((double) 100L);
        double[] doubleArray51 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix52 = openMapRealVector49.outerProduct(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray54);
        openMapRealVector55.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = openMapRealVector55.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray61);
        org.apache.commons.math.linear.RealVector realVector63 = openMapRealVector62.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector64 = openMapRealVector59.add(openMapRealVector62);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector62.mapAddToSelf((double) 100L);
        double[] doubleArray68 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix69 = openMapRealVector66.outerProduct(doubleArray68);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector72 = openMapRealVector49.append(doubleArray68);
        double[] doubleArray73 = openMapRealVector49.getData();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector75 = openMapRealVector49.append(59.39696961966999d);
        boolean boolean76 = arrayRealVector35.equals((java.lang.Object) openMapRealVector49);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector38.", arrayRealVector7.equals(openMapRealVector38) == openMapRealVector38.equals(arrayRealVector7));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector43 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector42);
        double[] doubleArray44 = openMapRealVector43.getData();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector17 and openMapRealVector42.", arrayRealVector17.equals(openMapRealVector42) == openMapRealVector42.equals(arrayRealVector17));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = openMapRealVector2.mapCbrtToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = openMapRealVector7.mapAdd((double) 1);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = openMapRealVector12.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = openMapRealVector7.add(openMapRealVector12);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        double double26 = arrayRealVector22.dotProduct(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector17.add(arrayRealVector25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector17.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector17.mapSqrtToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        double[] doubleArray44 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector43.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector43.mapDivide((double) (short) -1);
        double[] doubleArray49 = arrayRealVector43.getDataRef();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector17.add(doubleArray49);
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector7.outerProduct(doubleArray49);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = openMapRealVector2.ebeDivide(doubleArray49);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double64 = arrayRealVector60.dotProduct(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector55.add(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapCbrt();
        double double68 = arrayRealVector65.getNorm();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector65.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector65.mapAddToSelf((double) 100);
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector74.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector74.mapExpToSelf();
        java.lang.Double[] doubleArray78 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray78);
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        double double83 = arrayRealVector79.dotProduct(arrayRealVector82);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = arrayRealVector74.add(arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector82.mapTanhToSelf();
        java.lang.Double[] doubleArray87 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector88 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray87);
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector88.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector88.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector88.mapCbrt();
        boolean boolean92 = arrayRealVector82.equals((java.lang.Object) arrayRealVector88);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector88.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector95 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector65, arrayRealVector88);
        double[] doubleArray96 = arrayRealVector95.getDataRef();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector97 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49, doubleArray96);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector43 and openMapRealVector52.", arrayRealVector43.equals(openMapRealVector52) == openMapRealVector52.equals(arrayRealVector43));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector24.add(openMapRealVector27);
        int int30 = openMapRealVector27.getDimension();
        double double31 = openMapRealVector27.getSparcity();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector27.mapUlp();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor33 = openMapRealVector27.sparseIterator();
        org.apache.commons.math.linear.RealMatrix realMatrix34 = openMapRealVector17.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector27);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapTanhToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapCbrt();
        boolean boolean55 = arrayRealVector45.equals((java.lang.Object) arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector51.mapAcosToSelf();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector59.subtract(realVector64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector59.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector59.mapSinToSelf();
        double[] doubleArray69 = arrayRealVector59.getDataRef();
        double double70 = arrayRealVector51.getDistance(doubleArray69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector71 = openMapRealVector27.subtract(doubleArray69);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector42 and openMapRealVector2.", arrayRealVector42.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector42));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector26.mapAdd((double) (-1));
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapSqrt();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        double double49 = arrayRealVector47.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = arrayRealVector37.add(arrayRealVector47);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector51 = arrayRealVector47.copy();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapSqrt();
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        double double66 = arrayRealVector64.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector54.add(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector64.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector47.append((org.apache.commons.math.linear.RealVector) arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector47.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector47.mapCoshToSelf();
        double double73 = openMapRealVector34.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector37 and openMapRealVector2.", arrayRealVector37.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector37));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector14.mapAtan();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector14.mapSin();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector38.mapUlpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = arrayRealVector38.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        java.lang.String str66 = arrayRealVector38.toString();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector79 = arrayRealVector69.add(arrayRealVector77);
        double[] doubleArray80 = arrayRealVector79.getDataRef();
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector38.subtract(doubleArray80);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector84 = openMapRealVector14.ebeDivide(doubleArray80);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector43 and openMapRealVector2.", arrayRealVector43.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector43));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector13.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector13.mapAdd((-32.0d));
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapLog1pToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector32.mapExpToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        double double41 = arrayRealVector37.dotProduct(arrayRealVector40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = arrayRealVector32.add(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector40.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector20.add(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector20.mapMultiplyToSelf(10.0d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor47 = arrayRealVector20.sparseIterator();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray49);
        openMapRealVector50.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector50.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector55 = openMapRealVector50.mapRintToSelf();
        openMapRealVector50.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray60);
        openMapRealVector61.set(10.0d);
        openMapRealVector61.unitize();
        double double65 = openMapRealVector50.getL1Distance(openMapRealVector61);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapExpToSelf();
        java.lang.Double[] doubleArray72 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray72);
        java.lang.Double[] doubleArray75 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray75);
        double double77 = arrayRealVector73.dotProduct(arrayRealVector76);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = arrayRealVector68.add(arrayRealVector76);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector76.mapTanhToSelf();
        java.lang.Double[] doubleArray81 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector82 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray81);
        org.apache.commons.math.linear.RealVector realVector83 = arrayRealVector82.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector84 = arrayRealVector82.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector85 = arrayRealVector82.mapCbrt();
        boolean boolean86 = arrayRealVector76.equals((java.lang.Object) arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector82.mapSubtract(1.0d);
        double double89 = openMapRealVector61.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector82);
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector82.mapAsin();
        double double91 = arrayRealVector82.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = arrayRealVector20.subtract(arrayRealVector82);
        double double93 = openMapRealVector13.getL1Distance((org.apache.commons.math.linear.RealVector) arrayRealVector92);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector28 and openMapRealVector2.", arrayRealVector28.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector28));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.mapAdd((double) (short) -1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector20.mapLog1pToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCos();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector29.mapExpm1();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        openMapRealVector37.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector37.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector44 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = openMapRealVector44.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector41.add(openMapRealVector44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector44.mapAddToSelf((double) 100L);
        double[] doubleArray50 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix51 = openMapRealVector48.outerProduct(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector29.add(doubleArray50);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector20.ebeDivide(realVector52);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector53.append(59.39696961966999d);
        double double56 = openMapRealVector2.getDistance(openMapRealVector55);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector29 and openMapRealVector53.", arrayRealVector29.equals(openMapRealVector53) == openMapRealVector53.equals(arrayRealVector29));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = openMapRealVector2.mapAdd((double) ' ');
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double16 = arrayRealVector12.dotProduct(arrayRealVector15);
        double double17 = arrayRealVector8.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.subtract(realVector27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector22.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector22);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = arrayRealVector22.ebeDivide(arrayRealVector34);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = arrayRealVector19.add(arrayRealVector35);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector39.mapExpToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        double double48 = arrayRealVector44.dotProduct(arrayRealVector47);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector39.add(arrayRealVector47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector47.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector47.mapMultiply((double) 10L);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector55.mapExpToSelf();
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        double double64 = arrayRealVector60.dotProduct(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector55.add(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector63.mapTanhToSelf();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector69.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector69.mapCbrt();
        boolean boolean73 = arrayRealVector63.equals((java.lang.Object) arrayRealVector69);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector69.mapSubtract(1.0d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(realVector52, arrayRealVector69);
        double[] doubleArray77 = arrayRealVector69.getDataRef();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector36.append(doubleArray77);
        double double79 = openMapRealVector5.getL1Distance(doubleArray77);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector35 and openMapRealVector2.", arrayRealVector35.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector35));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector23.mapAddToSelf(59.39696961966999d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector33 and openMapRealVector30.", arrayRealVector33.equals(openMapRealVector30) == openMapRealVector30.equals(arrayRealVector33));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector14.mapExpToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector30.ebeDivide(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = arrayRealVector19.subtract(arrayRealVector42);
        double[] doubleArray45 = arrayRealVector44.getData();
        boolean boolean46 = arrayRealVector44.isInfinite();
        boolean boolean47 = arrayRealVector14.equals((java.lang.Object) boolean46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray50);
        openMapRealVector51.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector55 = openMapRealVector51.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector58 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector58.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector55.add(openMapRealVector58);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector62 = openMapRealVector58.mapAddToSelf((double) 100L);
        double[] doubleArray64 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix65 = openMapRealVector62.outerProduct(doubleArray64);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector14.subtract(doubleArray64);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector51.", arrayRealVector2.equals(openMapRealVector51) == openMapRealVector51.equals(arrayRealVector2));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector35.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(realVector45);
        double[] doubleArray47 = arrayRealVector46.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47, true);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector26.append(doubleArray47);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector35 and openMapRealVector26.", arrayRealVector35.equals(openMapRealVector26) == openMapRealVector26.equals(arrayRealVector35));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapPow((double) 0);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.append((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapUlpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector14.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor35 = openMapRealVector14.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector14.mapAdd((double) 1.0f);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector40.ebeDivide(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapExpm1ToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor56 = arrayRealVector52.iterator();
        double[] doubleArray57 = arrayRealVector52.getDataRef();
        org.apache.commons.math.linear.RealMatrix realMatrix58 = openMapRealVector14.outerProduct(doubleArray57);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on realVector27 and openMapRealVector37.", realVector27.equals(openMapRealVector37) == openMapRealVector37.equals(realVector27));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector8 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray7);
        openMapRealVector8.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector8.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = openMapRealVector15.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector12.add(openMapRealVector15);
        int int18 = openMapRealVector15.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector15.copy();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapCos();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector23.mapExpm1();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = openMapRealVector38.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector35.add(openMapRealVector38);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector42 = openMapRealVector38.mapAddToSelf((double) 100L);
        double[] doubleArray44 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix45 = openMapRealVector42.outerProduct(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector23.add(doubleArray44);
        org.apache.commons.math.linear.RealMatrix realMatrix47 = openMapRealVector19.outerProduct(doubleArray44);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector48 = openMapRealVector5.ebeMultiply(doubleArray44);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        double double53 = arrayRealVector51.getNorm();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapAtan();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        double double59 = arrayRealVector57.getNorm();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector57.mapAtan();
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector63.mapAbsToSelf();
        java.lang.Double[] doubleArray66 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray66);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector67.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector63.subtract(realVector68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector63.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector63.mapAsinToSelf();
        double double73 = arrayRealVector57.getLInfDistance(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51, (org.apache.commons.math.linear.RealVector) arrayRealVector63);
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector51.mapSignumToSelf();
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector79 = arrayRealVector78.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector78.mapPow((double) 0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor83 = arrayRealVector78.iterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector84 = arrayRealVector51.ebeDivide(arrayRealVector78);
        double double85 = openMapRealVector5.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector78);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector23 and openMapRealVector48.", arrayRealVector23.equals(openMapRealVector48) == openMapRealVector48.equals(arrayRealVector23));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        double double12 = arrayRealVector8.dotProduct(arrayRealVector11);
        double double13 = arrayRealVector8.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector5.add((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = openMapRealVector17.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector17);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapLogToSelf();
        double double26 = arrayRealVector22.getL1Norm();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        double double31 = arrayRealVector22.getL1Distance(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapTan();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapSin();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector19.add((org.apache.commons.math.linear.RealVector) arrayRealVector30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector5.append(openMapRealVector19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector19);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector3 and openMapRealVector5.", arrayRealVector3.equals(openMapRealVector5) == openMapRealVector5.equals(arrayRealVector3));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = openMapRealVector7.mapRintToSelf();
        openMapRealVector7.unitize();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector10.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector4.ebeDivide((org.apache.commons.math.linear.RealVector) openMapRealVector11);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = arrayRealVector15.add(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector15.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector15.mapSinh();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector15.mapCeil();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector15.mapSin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector15);
        double[] doubleArray32 = arrayRealVector31.getDataRef();
        double double33 = openMapRealVector11.getL1Distance(doubleArray32);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor5 = openMapRealVector4.sparseIterator();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapLogToSelf();
        double double12 = arrayRealVector8.getL1Norm();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        double double17 = arrayRealVector8.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapTan();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector16.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapAsin();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector4.ebeMultiply(realVector21);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector22.mapSubtract((double) '#');
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector4.", arrayRealVector2.equals(openMapRealVector4) == openMapRealVector4.equals(arrayRealVector2));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.subtract(realVector17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.projection(realVector19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector23.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector23.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(realVector33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapSubtractToSelf((double) '4');
        double double40 = arrayRealVector37.getNorm();
        double double41 = arrayRealVector34.getL1Distance(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.mapPowToSelf(0.0d);
        double[] doubleArray44 = arrayRealVector37.getDataRef();
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector2.ebeMultiply(doubleArray44);
        java.lang.Double[] doubleArray48 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector49 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray48);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray48, (int) (byte) 0, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector52);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector54 = arrayRealVector52.copy();
        double[] doubleArray55 = arrayRealVector52.toArray();
        arrayRealVector2.setSubVector(0, doubleArray55);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector37 and openMapRealVector49.", arrayRealVector37.equals(openMapRealVector49) == openMapRealVector49.equals(arrayRealVector37));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector9.projection((org.apache.commons.math.linear.RealVector) arrayRealVector16);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAcosToSelf();
        double[] doubleArray27 = arrayRealVector23.getDataRef();
        double double28 = openMapRealVector9.dotProduct(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30, 1.0E-12d);
        boolean boolean34 = openMapRealVector33.isInfinite();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector33.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector9.append(openMapRealVector33);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector31 and openMapRealVector2.", arrayRealVector31.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector31));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector15.mapInvToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector12, arrayRealVector15);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapSubtractToSelf((double) '4');
        double double26 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector23.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector12.add((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] {};
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector30 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray29);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29, (int) (byte) -1, (int) (short) 0);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, arrayRealVector33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = openMapRealVector37.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector37.mapAdd((double) ' ');
        double[] doubleArray43 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43, true);
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapCos();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector48.mapExpm1();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray55);
        openMapRealVector56.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector60 = openMapRealVector56.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector64 = openMapRealVector63.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector65 = openMapRealVector60.add(openMapRealVector63);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector67 = openMapRealVector63.mapAddToSelf((double) 100L);
        double[] doubleArray69 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix70 = openMapRealVector67.outerProduct(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector48.add(doubleArray69);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector45, doubleArray69);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector73 = openMapRealVector40.subtract(doubleArray69);
        double double74 = arrayRealVector34.getDistance(doubleArray69);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector56.", arrayRealVector7.equals(openMapRealVector56) == openMapRealVector56.equals(arrayRealVector7));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector10 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector11 = openMapRealVector10.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector10.copy();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) openMapRealVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector16.mapRintToSelf();
        openMapRealVector16.unitize();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector16.mapTan();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector16.mapSubtract((double) (short) 100);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector16.mapAdd((double) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector16.mapAbs();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAbsToSelf();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector27.subtract(realVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector27.mapSqrt();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        double double39 = arrayRealVector37.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = arrayRealVector27.add(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector37.mapLogToSelf();
        arrayRealVector37.set(1.0d);
        double[] doubleArray45 = new double[] {};
        double[] doubleArray47 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, doubleArray47);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapSubtract(10.0d);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector53.mapAbsToSelf();
        double double55 = arrayRealVector53.getNorm();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapAtan();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapAbsToSelf();
        double double61 = arrayRealVector59.getNorm();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapAtan();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAbsToSelf();
        java.lang.Double[] doubleArray68 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray68);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector69.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector65.subtract(realVector70);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector65.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector73 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector65.mapAsinToSelf();
        double double75 = arrayRealVector59.getLInfDistance(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector53, (org.apache.commons.math.linear.RealVector) arrayRealVector65);
        double[] doubleArray77 = arrayRealVector65.toArray();
        org.apache.commons.math.linear.RealVector realVector78 = arrayRealVector48.add(doubleArray77);
        java.lang.Double[] doubleArray80 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector81 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray80);
        org.apache.commons.math.linear.RealVector realVector82 = arrayRealVector81.mapAbsToSelf();
        java.lang.Double[] doubleArray84 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray84);
        org.apache.commons.math.linear.RealVector realVector86 = arrayRealVector85.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector81.subtract(realVector86);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector81.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector89 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77, arrayRealVector81);
        arrayRealVector37.setSubVector((int) (byte) 0, doubleArray77);
        double[] doubleArray91 = arrayRealVector37.toArray();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector92 = openMapRealVector16.ebeDivide(doubleArray91);
        double double93 = openMapRealVector12.getDistance((org.apache.commons.math.linear.RealVector) openMapRealVector16);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector13 and openMapRealVector10.", arrayRealVector13.equals(openMapRealVector10) == openMapRealVector10.equals(arrayRealVector13));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        double double25 = arrayRealVector23.getNorm();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapAtan();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector29.mapAtan();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAbsToSelf();
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector39.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector35.subtract(realVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector35.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector35);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector35.mapAsinToSelf();
        double double45 = arrayRealVector29.getLInfDistance(arrayRealVector35);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector23, (org.apache.commons.math.linear.RealVector) arrayRealVector35);
        double[] doubleArray47 = arrayRealVector35.toArray();
        double double48 = arrayRealVector19.getDistance(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector6.subtract(doubleArray47);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray47, 13.35414242816297d);
        org.apache.commons.math.linear.RealVector realVector52 = openMapRealVector51.mapTanh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector53 = openMapRealVector51.copy();
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector6 and realVector52.", arrayRealVector6.equals(realVector52) == realVector52.equals(arrayRealVector6));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(realVector5);
        double[] doubleArray7 = openMapRealVector6.toArray();
        openMapRealVector6.set((double) (short) 0);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11);
        openMapRealVector12.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector12.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = openMapRealVector19.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector16.add(openMapRealVector19);
        int int22 = openMapRealVector19.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = openMapRealVector19.copy();
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        openMapRealVector27.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector34.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector31.add(openMapRealVector34);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector36.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector23.subtract(openMapRealVector36);
        boolean boolean39 = openMapRealVector36.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor40 = openMapRealVector36.sparseIterator();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector41 = openMapRealVector6.append(openMapRealVector36);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector12.", arrayRealVector2.equals(openMapRealVector12) == openMapRealVector12.equals(arrayRealVector2));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrt();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealMatrix realMatrix20 = arrayRealVector12.outerProduct((org.apache.commons.math.linear.RealVector) openMapRealVector19);
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector12.append(4.624972813284271d);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector19.", arrayRealVector7.equals(openMapRealVector19) == openMapRealVector19.equals(arrayRealVector7));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector3.mapSubtract(10.0d);
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAbsToSelf();
        double double10 = arrayRealVector8.getNorm();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAtan();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        double double16 = arrayRealVector14.getNorm();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector14.mapAtan();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        double double30 = arrayRealVector14.getLInfDistance(arrayRealVector20);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector8, (org.apache.commons.math.linear.RealVector) arrayRealVector20);
        double[] doubleArray32 = arrayRealVector20.toArray();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector3.add(doubleArray32);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAbsToSelf();
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector36.subtract(realVector41);
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector36.mapCosh();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32, arrayRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray32);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector20 and openMapRealVector45.", arrayRealVector20.equals(openMapRealVector45) == openMapRealVector45.equals(arrayRealVector20));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector21 = openMapRealVector17.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector21.add(openMapRealVector24);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector26.unitVector();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector13.subtract(openMapRealVector26);
        boolean boolean29 = openMapRealVector26.isInfinite();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor30 = openMapRealVector26.sparseIterator();
        org.apache.commons.math.linear.RealVector realVector32 = openMapRealVector26.mapPowToSelf(Double.NaN);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector26.mapAsin();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector37.mapAtanToSelf();
        double[] doubleArray48 = arrayRealVector37.getDataRef();
        openMapRealVector26.setSubVector((int) (byte) 0, doubleArray48);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector37 and openMapRealVector26.", arrayRealVector37.equals(openMapRealVector26) == openMapRealVector26.equals(arrayRealVector37));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector7 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray6);
        openMapRealVector7.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector7.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector14.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector11.add(openMapRealVector14);
        int int17 = openMapRealVector14.getDimension();
        double double18 = openMapRealVector14.getSparcity();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector14.mapUlpToSelf();
        double double20 = openMapRealVector2.getDistance(openMapRealVector14);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapCbrt();
        double double27 = openMapRealVector14.getDistance(realVector26);
        double[] doubleArray30 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30, true);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector14.add(doubleArray30);
        double[] doubleArray34 = openMapRealVector14.getData();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector37.mapExpToSelf();
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        double double46 = arrayRealVector42.dotProduct(arrayRealVector45);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector37.add(arrayRealVector45);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector45.mapTanhToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector51.mapCbrt();
        boolean boolean55 = arrayRealVector45.equals((java.lang.Object) arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector51.mapLog1p();
        double double57 = arrayRealVector51.getL1Norm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        org.apache.commons.math.linear.RealVector realVector59 = openMapRealVector14.projection((org.apache.commons.math.linear.RealVector) arrayRealVector51);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector42 and openMapRealVector2.", arrayRealVector42.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector42));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double24 = arrayRealVector20.dotProduct(arrayRealVector23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17, arrayRealVector23);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        openMapRealVector29.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector29.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = openMapRealVector36.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector33.add(openMapRealVector36);
        int int39 = openMapRealVector36.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector40 = openMapRealVector36.copy();
        org.apache.commons.math.linear.RealVector realVector41 = openMapRealVector40.mapRintToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector44.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector44.mapCos();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector44.mapExpm1();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector52 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray51);
        openMapRealVector52.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector56 = openMapRealVector52.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector59 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray58);
        org.apache.commons.math.linear.RealVector realVector60 = openMapRealVector59.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector61 = openMapRealVector56.add(openMapRealVector59);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector63 = openMapRealVector59.mapAddToSelf((double) 100L);
        double[] doubleArray65 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix66 = openMapRealVector63.outerProduct(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector44.add(doubleArray65);
        org.apache.commons.math.linear.RealMatrix realMatrix68 = openMapRealVector40.outerProduct(doubleArray65);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector69 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector23.subtract(doubleArray65);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector29.", arrayRealVector2.equals(openMapRealVector29) == openMapRealVector29.equals(arrayRealVector2));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapInvToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapSubtract(0.0d);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        openMapRealVector18.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector22.add(openMapRealVector25);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector27.unitVector();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector31.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector27.append(openMapRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector27.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector27.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector27.append((double) 100);
        double[] doubleArray38 = openMapRealVector27.toArray();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        double double40 = arrayRealVector10.getL1Distance(doubleArray38);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector7 and openMapRealVector18.", arrayRealVector7.equals(openMapRealVector18) == openMapRealVector18.equals(arrayRealVector7));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTan();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSin();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector27 = openMapRealVector22.mapRintToSelf();
        openMapRealVector22.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAbsToSelf();
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector33.subtract(realVector38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector33.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector33.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector33.mapAcosToSelf();
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector47);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector47.ebeDivide(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector59.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapExpm1ToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor63 = arrayRealVector59.iterator();
        double[] doubleArray64 = arrayRealVector59.getDataRef();
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector33.projection(doubleArray64);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector66 = openMapRealVector22.ebeDivide(doubleArray64);
        boolean boolean67 = arrayRealVector15.equals((java.lang.Object) doubleArray64);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector60 and openMapRealVector2.", arrayRealVector60.equals(openMapRealVector2) == openMapRealVector2.equals(arrayRealVector60));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.add(realVector15);
        double[] doubleArray17 = arrayRealVector2.getData();
        double double18 = arrayRealVector2.getLInfNorm();
        double double19 = arrayRealVector2.getL1Norm();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector2.mapSinh();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        // This assertion (symmetry of equals) fails
        org.junit.Assert.assertTrue("Contract failed: equals-symmetric on arrayRealVector2 and openMapRealVector22.", arrayRealVector2.equals(openMapRealVector22) == openMapRealVector22.equals(arrayRealVector2));
    }
}


import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest3 {

    public static boolean debug = false;

    @Test
    public void test1501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1501");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapInvToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1502");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        arrayRealVector26.unitize();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector26.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapPowToSelf(1.0E-12d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1503");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.mapTanhToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 0, (int) (byte) -1, 1.6853169696133175d);
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray14);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        double double19 = arrayRealVector15.dotProduct(arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector18.mapLog1pToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAbsToSelf();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector27.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector23.subtract(realVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector23.mapCeilToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector33.mapPow((double) 0);
        double double38 = arrayRealVector23.getLInfDistance(arrayRealVector33);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector41.subtract(realVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector41.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector41);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = arrayRealVector41.ebeDivide(arrayRealVector53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapTanh();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector23.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector54);
        double double57 = arrayRealVector18.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double double58 = arrayRealVector18.getL1Norm();
        java.lang.Double[] doubleArray60 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray60);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector61.mapAtanToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        double double69 = arrayRealVector65.dotProduct(arrayRealVector68);
        double double70 = arrayRealVector61.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapCbrt();
        double double74 = arrayRealVector18.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector72);
        arrayRealVector18.set((double) (byte) -1);
        boolean boolean77 = openMapRealVector12.equals((java.lang.Object) arrayRealVector18);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2, arrayRealVector18);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapSubtract((double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 100.0d + "'", double19 == 100.0d);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertTrue("'" + double38 + "' != '" + 5.64585757183703d + "'", double38 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(arrayRealVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 7.602104727201629d + "'", double57 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double58 + "' != '" + 2.3978952727983707d + "'", double58 == 2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 100.0d + "'", double69 == 100.0d);
        org.junit.Assert.assertTrue("'" + double70 + "' != '" + 8.528872325696266d + "'", double70 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertTrue("'" + double74 + "' != '" + 23.978952727983707d + "'", double74 == 23.978952727983707d);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(realVector80);
    }

    @Test
    public void test1504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1504");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector12.mapLog1pToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapUlp();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
    }

    @Test
    public void test1505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1505");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAbsToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector6.subtract(realVector11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector6.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector6.mapAsinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, arrayRealVector6);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapCoshToSelf();
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
    }

    @Test
    public void test1506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1506");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        java.lang.Double[] doubleArray20 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray20);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        double double25 = arrayRealVector21.dotProduct(arrayRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector16.add(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix29 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector26);
        arrayRealVector26.unitize();
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector26.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.mapSignum();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 100.0d + "'", double25 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realMatrix29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
    }

    @Test
    public void test1507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1507");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector12 = openMapRealVector11.unitVector();
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray14);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = openMapRealVector15.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector11.append(openMapRealVector15);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector19 = openMapRealVector17.mapAdd(42.0d);
        double[] doubleArray20 = openMapRealVector17.toArray();
        org.apache.commons.math.linear.RealVector realVector21 = openMapRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector23.mapSinToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector17.append((org.apache.commons.math.linear.RealVector) arrayRealVector23);
        double[] doubleArray28 = openMapRealVector17.getData();
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector31.mapAbsToSelf();
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector35 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector35.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector31.subtract(realVector36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector31.mapCeilToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAbsToSelf();
        java.lang.Double[] doubleArray44 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray44);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector45.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector41.subtract(realVector46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector41.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector31.projection(realVector48);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAbsToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector56.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector52.subtract(realVector57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector52.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector52.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector52.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(realVector62);
        java.lang.Double[] doubleArray65 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector66 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector66.mapSubtractToSelf((double) '4');
        double double69 = arrayRealVector66.getNorm();
        double double70 = arrayRealVector63.getL1Distance(arrayRealVector66);
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector66.mapPowToSelf(0.0d);
        double[] doubleArray73 = arrayRealVector66.getDataRef();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector31.ebeMultiply(doubleArray73);
        // The following exception was thrown during execution in test generation
        try {
            double double75 = openMapRealVector17.getL1Distance(doubleArray73);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(openMapRealVector16);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(openMapRealVector19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 1.0]");
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[NaN, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + double69 + "' != '" + 42.0d + "'", double69 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double70));
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray73), "[1.0]");
        org.junit.Assert.assertNotNull(realVector74);
    }

    @Test
    public void test1508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1508");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapMultiply(5.64585757183703d);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = arrayRealVector12.sparseIterator();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapAtan();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector24.subtract(realVector29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector24.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector24);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector24.mapAsinToSelf();
        double double34 = arrayRealVector18.getLInfDistance(arrayRealVector24);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapLog1pToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector24.ebeMultiply(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector12.subtract((org.apache.commons.math.linear.RealVector) arrayRealVector47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapExpToSelf();
        java.lang.Double[] doubleArray55 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray55);
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double60 = arrayRealVector56.dotProduct(arrayRealVector59);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = arrayRealVector51.add(arrayRealVector59);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector59.mapTanhToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector65.mapCbrt();
        boolean boolean69 = arrayRealVector59.equals((java.lang.Object) arrayRealVector65);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector65.mapLog1p();
        int int71 = arrayRealVector65.getDimension();
        org.apache.commons.math.linear.RealVector realVector72 = arrayRealVector65.mapAcosToSelf();
        java.lang.Double[] doubleArray74 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray74);
        org.apache.commons.math.linear.RealVector realVector76 = arrayRealVector75.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector77 = arrayRealVector75.mapExpToSelf();
        java.lang.Double[] doubleArray79 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector80 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray79);
        java.lang.Double[] doubleArray82 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray82);
        double double84 = arrayRealVector80.dotProduct(arrayRealVector83);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector85 = arrayRealVector75.add(arrayRealVector83);
        org.apache.commons.math.linear.RealVector realVector87 = arrayRealVector85.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector85.mapCosh();
        org.apache.commons.math.linear.RealVector realVector89 = arrayRealVector85.mapTanhToSelf();
        double[] doubleArray90 = new double[] {};
        double[] doubleArray92 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector93 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray90, doubleArray92);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector94 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector85, doubleArray90);
        org.apache.commons.math.linear.RealVector realVector95 = arrayRealVector85.mapExpToSelf();
        double[] doubleArray96 = arrayRealVector85.getDataRef();
        double double97 = arrayRealVector65.getL1Distance(doubleArray96);
        org.apache.commons.math.linear.RealVector realVector98 = arrayRealVector12.append(doubleArray96);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertTrue(Double.isNaN(double34));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double60 + "' != '" + 100.0d + "'", double60 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector61);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(realVector72);
        org.junit.Assert.assertNotNull(doubleArray74);
        org.junit.Assert.assertNotNull(realVector76);
        org.junit.Assert.assertNotNull(realVector77);
        org.junit.Assert.assertNotNull(doubleArray79);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertTrue("'" + double84 + "' != '" + 100.0d + "'", double84 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector85);
        org.junit.Assert.assertNotNull(realVector87);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertNotNull(realVector89);
        org.junit.Assert.assertNotNull(doubleArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray90), "[]");
        org.junit.Assert.assertNotNull(doubleArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray92), "[100.0]");
        org.junit.Assert.assertNotNull(realVector95);
        org.junit.Assert.assertNotNull(doubleArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray96), "[2.718281828457194]");
        org.junit.Assert.assertTrue(Double.isNaN(double97));
        org.junit.Assert.assertNotNull(realVector98);
    }

    @Test
    public void test1509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1509");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = openMapRealVector9.mapSinh();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector9);
        int int14 = openMapRealVector13.getDimension();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray16);
        openMapRealVector17.set(10.0d);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray21);
        openMapRealVector22.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector26 = openMapRealVector22.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector29.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector26.add(openMapRealVector29);
        int int32 = openMapRealVector29.getDimension();
        double double33 = openMapRealVector29.getSparcity();
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector29.mapUlpToSelf();
        double double35 = openMapRealVector17.getDistance(openMapRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapCbrt();
        double double42 = openMapRealVector29.getDistance(realVector41);
        double[] doubleArray45 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45, true);
        org.apache.commons.math.linear.RealVector realVector48 = openMapRealVector29.add(doubleArray45);
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector29.mapAtan();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector50 = openMapRealVector13.append(openMapRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector51 = openMapRealVector13.unitVector();
        openMapRealVector51.set(42.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector54 = openMapRealVector51.unitVector();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(openMapRealVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 1.0d + "'", double33 == 1.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 10.0d + "'", double35 == 10.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 1.6329299089739802d + "'", double42 == 1.6329299089739802d);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(openMapRealVector50);
        org.junit.Assert.assertNotNull(openMapRealVector51);
        org.junit.Assert.assertNotNull(openMapRealVector54);
    }

    @Test
    public void test1510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1510");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        double[] doubleArray13 = arrayRealVector12.getDataRef();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCbrt();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[NaN]");
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
    }

    @Test
    public void test1511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1511");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double28 = arrayRealVector24.dotProduct(arrayRealVector27);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = arrayRealVector19.add(arrayRealVector27);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector19.mapUlpToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector33.mapExpToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        double double42 = arrayRealVector38.dotProduct(arrayRealVector41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = arrayRealVector33.add(arrayRealVector41);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix46 = arrayRealVector19.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        arrayRealVector43.unitize();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapSqrt();
        double[] doubleArray59 = arrayRealVector51.getData();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector48.ebeDivide(doubleArray59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector2.append(doubleArray59);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 100.0d + "'", double28 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertTrue("'" + double42 + "' != '" + 100.0d + "'", double42 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realMatrix46);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray59), "[10.0]");
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
    }

    @Test
    public void test1512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1512");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.ebeDivide(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector15.mapTanh();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector19.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector19.mapAbsToSelf();
        double double30 = arrayRealVector15.getL1Distance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector19.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector19.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector19.mapCeilToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector19.mapExpToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertTrue(Double.isNaN(double30));
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
    }

    @Test
    public void test1513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1513");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapLogToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector2);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector9.mapExpToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        double double18 = arrayRealVector14.dotProduct(arrayRealVector17);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = arrayRealVector9.add(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapCbrt();
        double double22 = arrayRealVector19.getNorm();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector19.mapLog10ToSelf();
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAbsToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector26.subtract(realVector31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector26.mapCeilToSelf();
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector36.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector36.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector36.mapPow((double) 0);
        double double41 = arrayRealVector26.getLInfDistance(arrayRealVector36);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector44.subtract(realVector49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector44.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector44);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = arrayRealVector44.ebeDivide(arrayRealVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapTanh();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector26.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector57);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector19.ebeDivide(realVector59);
        double double61 = arrayRealVector6.getLInfDistance(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector6.mapDivideToSelf(0.6321205588285577d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 100.0d + "'", double18 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 14.35414242816297d + "'", double22 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertTrue("'" + double41 + "' != '" + 5.64585757183703d + "'", double41 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(arrayRealVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 0.3141504231237282d + "'", double61 == 0.3141504231237282d);
        org.junit.Assert.assertNotNull(realVector63);
    }

    @Test
    public void test1514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1514");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector4 = new org.apache.commons.math.linear.OpenMapRealVector(openMapRealVector2);
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector7.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector7.mapLogToSelf();
        double double11 = arrayRealVector7.getL1Norm();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        double double16 = arrayRealVector7.getL1Distance(arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector15.mapTan();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector15.mapSin();
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector4.add((org.apache.commons.math.linear.RealVector) arrayRealVector15);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector15.mapLogToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector15.mapMultiply(3.3541424281629704d);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector15.mapDivideToSelf(0.0d);
        double double25 = arrayRealVector15.getL1Norm();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.4711276743037347d + "'", double11 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 8.528872325696266d + "'", double16 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + Double.POSITIVE_INFINITY + "'", double25 == Double.POSITIVE_INFINITY);
    }

    @Test
    public void test1515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1515");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapDivideToSelf((double) (byte) 0);
        int int17 = arrayRealVector12.getDimension();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector20.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector20.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(realVector30);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray33);
        openMapRealVector34.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector34.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        double double45 = arrayRealVector41.dotProduct(arrayRealVector44);
        double double46 = openMapRealVector34.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector44);
        org.apache.commons.math.linear.RealVector realVector47 = openMapRealVector34.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector49 = openMapRealVector34.mapDivideToSelf(14.355979641962135d);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector31.append(realVector49);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = arrayRealVector12.ebeDivide(arrayRealVector31);
        org.apache.commons.math.analysis.UnivariateRealFunction univariateRealFunction52 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector12.mapToSelf(univariateRealFunction52);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(openMapRealVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 100.0d + "'", double45 == 100.0d);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 0.0d + "'", double46 == 0.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(arrayRealVector51);
    }

    @Test
    public void test1516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1516");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapSubtractToSelf((double) 0L);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        double double20 = arrayRealVector17.getL1Norm();
        double double21 = arrayRealVector10.getLInfDistance(arrayRealVector17);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector10.mapPowToSelf(26.0d);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector10.mapMultiplyToSelf(9.99999999999319E9d);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector10.mapPowToSelf(5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 42.0d + "'", double20 == 42.0d);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 52.0d + "'", double21 == 52.0d);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector27);
    }

    @Test
    public void test1517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1517");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAbsToSelf();
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector14.subtract(realVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector14.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector14);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector14.mapSinToSelf();
        double[] doubleArray24 = arrayRealVector14.getDataRef();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector7.ebeMultiply(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-0.5440211108893698]");
        org.junit.Assert.assertNotNull(realVector25);
    }

    @Test
    public void test1518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1518");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        double double4 = arrayRealVector2.getNorm();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAtan();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector8.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector8.mapCos();
        org.apache.commons.math.linear.RealMatrix realMatrix13 = arrayRealVector2.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector8);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapDivide((double) (byte) -1);
        double[] doubleArray22 = arrayRealVector16.getData();
        double double23 = arrayRealVector8.dotProduct(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector8.mapInv();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 10.0d + "'", double4 == 10.0d);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realMatrix13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[-42.0]");
        org.junit.Assert.assertTrue(Double.isNaN(double23));
        org.junit.Assert.assertNotNull(realVector24);
    }

    @Test
    public void test1519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1519");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector3 = openMapRealVector2.copy();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector6.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor8 = openMapRealVector6.sparseIterator();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector11 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector11.mapSubtractToSelf((double) '4');
        double double14 = arrayRealVector11.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector6.append((org.apache.commons.math.linear.RealVector) arrayRealVector11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector17 = openMapRealVector6.append(42.0d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        openMapRealVector20.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = openMapRealVector20.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray26);
        org.apache.commons.math.linear.RealVector realVector28 = openMapRealVector27.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector24.add(openMapRealVector27);
        int int30 = openMapRealVector27.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = openMapRealVector27.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector27.unitVector();
        double double33 = openMapRealVector6.getL1Distance(openMapRealVector27);
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector27.mapSignumToSelf();
        double double35 = openMapRealVector3.dotProduct(openMapRealVector27);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector48.mapCosh();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapTanhToSelf();
        double[] doubleArray53 = new double[] {};
        double[] doubleArray55 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53, doubleArray55);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector48, doubleArray53);
        // The following exception was thrown during execution in test generation
        try {
            double double58 = openMapRealVector27.getL1Distance(doubleArray53);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(entryItor8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 42.0d + "'", double14 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(openMapRealVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector24);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector31);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertTrue("'" + double33 + "' != '" + 0.0d + "'", double33 == 0.0d);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 1.0d + "'", double35 == 1.0d);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray53), "[]");
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[100.0]");
    }

    @Test
    public void test1520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1520");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector2.mapUlpToSelf();
        double[] doubleArray14 = arrayRealVector2.toArray();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector2.copy();
        org.apache.commons.math.linear.RealVector realVector17 = abstractRealVector16.mapSignumToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[8.881784197001252E-16]");
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(realVector17);
    }

    @Test
    public void test1521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1521");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        double double13 = arrayRealVector9.dotProduct(arrayRealVector12);
        double double14 = openMapRealVector2.getLInfDistance((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector15 = openMapRealVector2.mapCosToSelf();
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector2.mapDivideToSelf(14.355979641962135d);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector20.mapLogToSelf();
        double double24 = arrayRealVector20.getL1Norm();
        java.lang.Double[] doubleArray26 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray26);
        double double29 = arrayRealVector20.getL1Distance(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector28.mapTan();
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector28.mapDivideToSelf(6.0d);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector28.mapTanhToSelf();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector34 = arrayRealVector28.copy();
        org.apache.commons.math.linear.RealVector realVector35 = openMapRealVector2.add((org.apache.commons.math.linear.RealVector) arrayRealVector28);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAbsToSelf();
        double double40 = arrayRealVector38.getNorm();
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector38.mapAtan();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAbsToSelf();
        double double46 = arrayRealVector44.getNorm();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector44.mapAtan();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAbsToSelf();
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector50.subtract(realVector55);
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector50.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector50.mapAsinToSelf();
        double double60 = arrayRealVector44.getLInfDistance(arrayRealVector50);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector61 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector38, (org.apache.commons.math.linear.RealVector) arrayRealVector50);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector38.mapSignumToSelf();
        java.lang.Double[] doubleArray64 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray64);
        org.apache.commons.math.linear.RealVector realVector66 = arrayRealVector65.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector67 = arrayRealVector65.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector65.mapPow((double) 0);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor70 = arrayRealVector65.iterator();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector71 = arrayRealVector38.ebeDivide(arrayRealVector65);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector28.append(arrayRealVector71);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector72.mapTanToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 100.0d + "'", double13 == 100.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.0d + "'", double14 == 0.0d);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 1.4711276743037347d + "'", double24 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 8.528872325696266d + "'", double29 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(abstractRealVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue("'" + double40 + "' != '" + 10.0d + "'", double40 == 10.0d);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 10.0d + "'", double46 == 10.0d);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue(Double.isNaN(double60));
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(doubleArray64);
        org.junit.Assert.assertNotNull(realVector66);
        org.junit.Assert.assertNotNull(realVector67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(entryItor70);
        org.junit.Assert.assertNotNull(arrayRealVector71);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(realVector73);
    }

    @Test
    public void test1522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1522");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector2.mapRintToSelf();
        openMapRealVector2.setEntry(0, (double) 100.0f);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray12);
        openMapRealVector13.set(10.0d);
        openMapRealVector13.unitize();
        double double17 = openMapRealVector2.getL1Distance(openMapRealVector13);
        openMapRealVector13.set((double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 99.0d + "'", double17 == 99.0d);
    }

    @Test
    public void test1523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1523");
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector((int) ' ', 1713660.5254694945d);
    }

    @Test
    public void test1524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1524");
        double[] doubleArray0 = new double[] {};
        double[] doubleArray2 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector3 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray0, doubleArray2);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector5 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray2, (double) 10);
        org.apache.commons.math.linear.RealVector realVector6 = openMapRealVector5.mapExpm1ToSelf();
        org.apache.commons.math.linear.RealVector realVector7 = openMapRealVector5.mapUlpToSelf();
        // The following exception was thrown during execution in test generation
        try {
            double double9 = openMapRealVector5.getEntry((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index -1 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray0), "[]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0]");
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1525");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapCoshToSelf();
        double[] doubleArray21 = arrayRealVector17.toArray();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[1.2441656021018686]");
    }

    @Test
    public void test1526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1526");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.RealVector realVector5 = openMapRealVector2.mapCoshToSelf();
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector8 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector8.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector8.mapExpToSelf();
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        double double17 = arrayRealVector13.dotProduct(arrayRealVector16);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = arrayRealVector8.add(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapTanhToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector22.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector22.mapCbrt();
        boolean boolean26 = arrayRealVector16.equals((java.lang.Object) arrayRealVector22);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector22.mapSubtract(1.0d);
        arrayRealVector22.set((double) 0);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector22.mapTanhToSelf();
        double double32 = openMapRealVector2.getLInfDistance(realVector31);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 100.0d + "'", double17 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 11013.232920103324d + "'", double32 == 11013.232920103324d);
    }

    @Test
    public void test1527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1527");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double double7 = openMapRealVector6.getSparcity();
        boolean boolean8 = openMapRealVector6.isInfinite();
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray10);
        openMapRealVector11.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector15 = openMapRealVector11.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector18 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = openMapRealVector18.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector15.add(openMapRealVector18);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector18.mapAddToSelf((double) 100L);
        double[] doubleArray24 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix25 = openMapRealVector22.outerProduct(doubleArray24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray27);
        openMapRealVector28.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = openMapRealVector28.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray34 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray34);
        org.apache.commons.math.linear.RealVector realVector36 = openMapRealVector35.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector37 = openMapRealVector32.add(openMapRealVector35);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector39 = openMapRealVector35.mapAddToSelf((double) 100L);
        double[] doubleArray41 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix42 = openMapRealVector39.outerProduct(doubleArray41);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41, false);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector45 = openMapRealVector22.append(doubleArray41);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector46 = openMapRealVector6.append(doubleArray41);
        double[] doubleArray47 = openMapRealVector46.getData();
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector50.mapExpToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        double double59 = arrayRealVector55.dotProduct(arrayRealVector58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector50.add(arrayRealVector58);
        org.apache.commons.math.linear.RealVector realVector62 = arrayRealVector60.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector60.mapCosh();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector60.mapTanhToSelf();
        double[] doubleArray65 = new double[] {};
        double[] doubleArray67 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray65, doubleArray67);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector69 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector60, doubleArray65);
        // The following exception was thrown during execution in test generation
        try {
            org.apache.commons.math.linear.RealVector realVector70 = openMapRealVector46.add(doubleArray65);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 0");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(openMapRealVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(openMapRealVector32);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(openMapRealVector37);
        org.junit.Assert.assertNotNull(openMapRealVector39);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix42);
        org.junit.Assert.assertNotNull(openMapRealVector45);
        org.junit.Assert.assertNotNull(openMapRealVector46);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[9.0, NaN]");
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 100.0d + "'", double59 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(realVector62);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(doubleArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray65), "[]");
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[100.0]");
    }

    @Test
    public void test1528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1528");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapPow((double) 0);
        double double17 = arrayRealVector2.getLInfDistance(arrayRealVector12);
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAbsToSelf();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector20.subtract(realVector25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector20.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector20);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector20.ebeDivide(arrayRealVector32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapTanh();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector2.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapCbrt();
        double double51 = arrayRealVector48.getNorm();
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector48.mapLog10ToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector2.ebeDivide(arrayRealVector48);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector48.mapSinToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector48.mapSinhToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 5.64585757183703d + "'", double17 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 14.35414242816297d + "'", double51 == 14.35414242816297d);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
    }

    @Test
    public void test1529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1529");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapUlp();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector12.mapDivide(7.105427357601002E-15d);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector12.mapAsin();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector23.mapExpToSelf();
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray30);
        double double32 = arrayRealVector28.dotProduct(arrayRealVector31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = arrayRealVector23.add(arrayRealVector31);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector23.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector23.mapAtanToSelf();
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector38.mapUlpToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        java.lang.Double[] doubleArray59 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray59);
        double double61 = arrayRealVector57.dotProduct(arrayRealVector60);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = arrayRealVector52.add(arrayRealVector60);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector62.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.RealMatrix realMatrix65 = arrayRealVector38.outerProduct((org.apache.commons.math.linear.RealVector) arrayRealVector62);
        arrayRealVector62.unitize();
        org.apache.commons.math.linear.RealMatrix realMatrix67 = arrayRealVector23.outerProduct(arrayRealVector62);
        org.apache.commons.math.linear.RealVector realVector68 = arrayRealVector23.mapLog10ToSelf();
        // The following exception was thrown during execution in test generation
        try {
            arrayRealVector12.setSubVector((int) '4', (org.apache.commons.math.linear.RealVector) arrayRealVector23);
            org.junit.Assert.fail("Expected exception of type org.apache.commons.math.linear.MatrixIndexException; message: index 52 out of allowed range [0, 0]");
        } catch (org.apache.commons.math.linear.MatrixIndexException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 100.0d + "'", double32 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray59);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 100.0d + "'", double61 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector62);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertNotNull(realMatrix65);
        org.junit.Assert.assertNotNull(realMatrix67);
        org.junit.Assert.assertNotNull(realVector68);
    }

    @Test
    public void test1530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1530");
        double[] doubleArray2 = new double[] { (byte) -1, (byte) 100 };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector4 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray2, true);
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector4.unitVector();
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector6 = arrayRealVector4.copy();
        org.apache.commons.math.linear.RealVector realVector8 = abstractRealVector6.mapMultiplyToSelf(4.3541424281629695d);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0, 100.0]");
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertNotNull(abstractRealVector6);
        org.junit.Assert.assertNotNull(realVector8);
    }

    @Test
    public void test1531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1531");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector16.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapLogToSelf();
        double double20 = arrayRealVector16.getL1Norm();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        double double25 = arrayRealVector16.getL1Distance(arrayRealVector24);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector28.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector28.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(realVector38);
        java.lang.Double[] doubleArray41 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector42 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray41);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector42.mapSubtractToSelf((double) '4');
        double double45 = arrayRealVector42.getNorm();
        double double46 = arrayRealVector39.getL1Distance(arrayRealVector42);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = arrayRealVector16.add(arrayRealVector42);
        java.lang.Double[] doubleArray49 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector50 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray49);
        org.apache.commons.math.linear.RealVector realVector51 = arrayRealVector50.mapAtanToSelf();
        double double52 = arrayRealVector42.dotProduct(realVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector53 = arrayRealVector9.add(arrayRealVector42);
        double double55 = arrayRealVector53.getEntry(0);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector53.mapLog10ToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector53.mapExpm1();
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector53.mapExpm1();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 1.4711276743037347d + "'", double20 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 8.528872325696266d + "'", double25 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 42.0d + "'", double45 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double46));
        org.junit.Assert.assertNotNull(arrayRealVector47);
        org.junit.Assert.assertNotNull(doubleArray49);
        org.junit.Assert.assertNotNull(realVector51);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + (-61.787362320756856d) + "'", double52 == (-61.787362320756856d));
        org.junit.Assert.assertNotNull(arrayRealVector53);
        org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-32.0d) + "'", double55 == (-32.0d));
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
    }

    @Test
    public void test1532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1532");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        int int12 = openMapRealVector9.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.copy();
        org.apache.commons.math.linear.RealVector realVector14 = openMapRealVector13.mapRintToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapAcosToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector17.mapCos();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector17.mapExpm1();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        openMapRealVector25.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector29 = openMapRealVector25.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector32 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = openMapRealVector32.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector34 = openMapRealVector29.add(openMapRealVector32);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector32.mapAddToSelf((double) 100L);
        double[] doubleArray38 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix39 = openMapRealVector36.outerProduct(doubleArray38);
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector17.add(doubleArray38);
        org.apache.commons.math.linear.RealMatrix realMatrix41 = openMapRealVector13.outerProduct(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38, false);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapCosToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(openMapRealVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(openMapRealVector34);
        org.junit.Assert.assertNotNull(openMapRealVector36);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(realMatrix41);
        org.junit.Assert.assertNotNull(realVector45);
    }

    @Test
    public void test1533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1533");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        double[] doubleArray10 = new double[] {};
        double[] doubleArray12 = new double[] { 100.0f };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray10, doubleArray12);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector13.mapSubtract(10.0d);
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector18 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray17);
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector18.mapAbsToSelf();
        double double20 = arrayRealVector18.getNorm();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector18.mapAtan();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector24.mapAbsToSelf();
        double double26 = arrayRealVector24.getNorm();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector24.mapAtan();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector30.mapAbsToSelf();
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector34.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector30.subtract(realVector35);
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector30);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector30.mapAsinToSelf();
        double double40 = arrayRealVector24.getLInfDistance(arrayRealVector30);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector18, (org.apache.commons.math.linear.RealVector) arrayRealVector30);
        double[] doubleArray42 = arrayRealVector30.toArray();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector13.add(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector2.subtract(doubleArray42);
        java.lang.Double[] doubleArray46 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector47 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray46);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector47.mapAbsToSelf();
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector47.subtract(realVector52);
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector47.mapSqrt();
        java.lang.Double[] doubleArray56 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector57 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector57.mapAbsToSelf();
        double double59 = arrayRealVector57.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = arrayRealVector47.add(arrayRealVector57);
        java.lang.Double[] doubleArray62 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray62);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector63.mapSubtractToSelf((double) '4');
        double double66 = arrayRealVector63.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector57.subtract(arrayRealVector63);
        java.lang.Double[] doubleArray69 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector70 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector70.mapAtanToSelf();
        java.lang.Double[] doubleArray73 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector74 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray73);
        java.lang.Double[] doubleArray76 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector77 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray76);
        double double78 = arrayRealVector74.dotProduct(arrayRealVector77);
        double double79 = arrayRealVector70.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector77);
        double double80 = arrayRealVector63.getLInfDistance(arrayRealVector70);
        boolean boolean81 = arrayRealVector70.isInfinite();
        double[] doubleArray82 = arrayRealVector70.getData();
        org.apache.commons.math.linear.RealMatrix realMatrix83 = arrayRealVector2.outerProduct(doubleArray82);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[100.0]");
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 10.0d + "'", double20 == 10.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 10.0d + "'", double26 == 10.0d);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertTrue(Double.isNaN(double40));
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[NaN]");
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertTrue("'" + double59 + "' != '" + 10.0d + "'", double59 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector60);
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertTrue("'" + double66 + "' != '" + 42.0d + "'", double66 == 42.0d);
        org.junit.Assert.assertNotNull(arrayRealVector67);
        org.junit.Assert.assertNotNull(doubleArray69);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(doubleArray73);
        org.junit.Assert.assertNotNull(doubleArray76);
        org.junit.Assert.assertTrue("'" + double78 + "' != '" + 100.0d + "'", double78 == 100.0d);
        org.junit.Assert.assertTrue("'" + double79 + "' != '" + 8.528872325696266d + "'", double79 == 8.528872325696266d);
        org.junit.Assert.assertTrue("'" + double80 + "' != '" + 43.47112767430374d + "'", double80 == 43.47112767430374d);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertNotNull(doubleArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray82), "[1.4711276743037347]");
        org.junit.Assert.assertNotNull(realMatrix83);
    }

    @Test
    public void test1534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1534");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector6 = arrayRealVector2.mapPow((double) 0);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = arrayRealVector9.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapUlpToSelf();
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector9.mapSignumToSelf();
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector16.mapAcosToSelf();
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector22.mapAbsToSelf();
        double double24 = arrayRealVector16.dotProduct(realVector23);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(realVector23);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapSinhToSelf();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector33.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector29.subtract(realVector34);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector29.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector29.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector29.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(realVector39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapSubtractToSelf((double) '4');
        double double46 = arrayRealVector43.getNorm();
        double double47 = arrayRealVector40.getL1Distance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector43.mapPowToSelf(0.0d);
        double[] doubleArray50 = arrayRealVector43.getDataRef();
        double double51 = openMapRealVector25.getLInfDistance(doubleArray50);
        double double52 = arrayRealVector9.getL1Distance(doubleArray50);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(realVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertTrue(Double.isNaN(double24));
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + double46 + "' != '" + 42.0d + "'", double46 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double47));
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray50), "[1.0]");
        org.junit.Assert.assertTrue("'" + double51 + "' != '" + 11012.232874703393d + "'", double51 == 11012.232874703393d);
        org.junit.Assert.assertTrue("'" + double52 + "' != '" + 0.0d + "'", double52 == 0.0d);
    }

    @Test
    public void test1535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1535");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector9 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray8);
        double double10 = arrayRealVector6.dotProduct(arrayRealVector9);
        double double11 = arrayRealVector2.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector9.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector9);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        double double20 = arrayRealVector16.dotProduct(arrayRealVector19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapLog1pToSelf();
        boolean boolean22 = arrayRealVector19.isInfinite();
        double double23 = arrayRealVector13.getLInfDistance(arrayRealVector19);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector26.mapAtanToSelf();
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray32);
        double double34 = arrayRealVector30.dotProduct(arrayRealVector33);
        double double35 = arrayRealVector26.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector33.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector33);
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        double double44 = arrayRealVector40.dotProduct(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector43.mapLog1pToSelf();
        boolean boolean46 = arrayRealVector43.isInfinite();
        double double47 = arrayRealVector37.getLInfDistance(arrayRealVector43);
        org.apache.commons.math.linear.RealVector realVector48 = arrayRealVector37.mapSinhToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector49 = arrayRealVector13.add(arrayRealVector37);
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector52.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector54 = arrayRealVector52.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector52.mapLogToSelf();
        double double56 = arrayRealVector52.getL1Norm();
        java.lang.Double[] doubleArray58 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector60 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray58);
        double double61 = arrayRealVector52.getL1Distance(arrayRealVector60);
        java.lang.Double[] doubleArray63 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray63);
        org.apache.commons.math.linear.RealVector realVector65 = arrayRealVector64.mapAbsToSelf();
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector69 = arrayRealVector68.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector64.subtract(realVector69);
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector64.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector64);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector64.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector74 = arrayRealVector64.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector75 = new org.apache.commons.math.linear.ArrayRealVector(realVector74);
        java.lang.Double[] doubleArray77 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray77);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapSubtractToSelf((double) '4');
        double double81 = arrayRealVector78.getNorm();
        double double82 = arrayRealVector75.getL1Distance(arrayRealVector78);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector83 = arrayRealVector52.add(arrayRealVector78);
        java.lang.Double[] doubleArray85 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector86 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray85);
        org.apache.commons.math.linear.RealVector realVector88 = arrayRealVector86.mapSubtractToSelf((double) '4');
        double double89 = arrayRealVector86.getNorm();
        org.apache.commons.math.linear.RealVector realVector90 = arrayRealVector86.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector91 = arrayRealVector86.mapAbs();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector92 = arrayRealVector52.subtract(arrayRealVector86);
        double double93 = arrayRealVector37.getLInfDistance(arrayRealVector52);
        org.apache.commons.math.linear.RealVector realVector94 = arrayRealVector37.mapExpm1ToSelf();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 100.0d + "'", double10 == 100.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 8.528872325696266d + "'", double11 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 100.0d + "'", double20 == 100.0d);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 7.602104727201629d + "'", double23 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 100.0d + "'", double34 == 100.0d);
        org.junit.Assert.assertTrue("'" + double35 + "' != '" + 8.528872325696266d + "'", double35 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 100.0d + "'", double44 == 100.0d);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 7.602104727201629d + "'", double47 == 7.602104727201629d);
        org.junit.Assert.assertNotNull(realVector48);
        org.junit.Assert.assertNotNull(arrayRealVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertNotNull(realVector54);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 1.4711276743037347d + "'", double56 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 8.528872325696266d + "'", double61 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray63);
        org.junit.Assert.assertNotNull(realVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector69);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector74);
        org.junit.Assert.assertNotNull(doubleArray77);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertTrue("'" + double81 + "' != '" + 42.0d + "'", double81 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double82));
        org.junit.Assert.assertNotNull(arrayRealVector83);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertNotNull(realVector88);
        org.junit.Assert.assertTrue("'" + double89 + "' != '" + 42.0d + "'", double89 == 42.0d);
        org.junit.Assert.assertNotNull(realVector90);
        org.junit.Assert.assertNotNull(realVector91);
        org.junit.Assert.assertNotNull(arrayRealVector92);
        org.junit.Assert.assertTrue("'" + double93 + "' != '" + 11011.76174702909d + "'", double93 == 11011.76174702909d);
        org.junit.Assert.assertNotNull(realVector94);
    }

    @Test
    public void test1536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1536");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        java.lang.Double[] doubleArray4 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector5 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray4);
        double double6 = arrayRealVector2.dotProduct(arrayRealVector5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector5.mapLog1pToSelf();
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapAbsToSelf();
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector14 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray13);
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector14.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.subtract(realVector15);
        org.apache.commons.math.linear.RealVector realVector17 = arrayRealVector10.mapCeilToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector20 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray19);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector20.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector20.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector20.mapPow((double) 0);
        double double25 = arrayRealVector10.getLInfDistance(arrayRealVector20);
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector28 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray27);
        org.apache.commons.math.linear.RealVector realVector29 = arrayRealVector28.mapAbsToSelf();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector32.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector34 = arrayRealVector28.subtract(realVector33);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector28.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector36 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector28);
        java.lang.Double[] doubleArray38 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector39 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray38);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = arrayRealVector28.ebeDivide(arrayRealVector40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapTanh();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector10.ebeDivide((org.apache.commons.math.linear.RealVector) arrayRealVector41);
        double double44 = arrayRealVector5.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector10);
        double double45 = arrayRealVector5.getL1Norm();
        java.lang.Double[] doubleArray47 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray47);
        org.apache.commons.math.linear.RealVector realVector49 = arrayRealVector48.mapAtanToSelf();
        java.lang.Double[] doubleArray51 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector52 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray51);
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        double double56 = arrayRealVector52.dotProduct(arrayRealVector55);
        double double57 = arrayRealVector48.getDistance((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector55.mapAsin();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector55);
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector59.mapCbrt();
        double double61 = arrayRealVector5.dotProduct((org.apache.commons.math.linear.RealVector) arrayRealVector59);
        arrayRealVector5.set((double) (byte) -1);
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector5.mapRint();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 100.0d + "'", double6 == 100.0d);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + 5.64585757183703d + "'", double25 == 5.64585757183703d);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(realVector29);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertNotNull(arrayRealVector41);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertTrue("'" + double44 + "' != '" + 7.602104727201629d + "'", double44 == 7.602104727201629d);
        org.junit.Assert.assertTrue("'" + double45 + "' != '" + 2.3978952727983707d + "'", double45 == 2.3978952727983707d);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertNotNull(realVector49);
        org.junit.Assert.assertNotNull(doubleArray51);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertTrue("'" + double56 + "' != '" + 100.0d + "'", double56 == 100.0d);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 8.528872325696266d + "'", double57 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertTrue("'" + double61 + "' != '" + 23.978952727983707d + "'", double61 == 23.978952727983707d);
        org.junit.Assert.assertNotNull(realVector64);
    }

    @Test
    public void test1537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1537");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        java.lang.Double[] doubleArray12 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray12);
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector13.mapAbsToSelf();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector13.subtract(realVector18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector13.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector21 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector13);
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector24 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray23);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = arrayRealVector13.ebeDivide(arrayRealVector25);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector27 = arrayRealVector2.subtract(arrayRealVector25);
        java.lang.Double[] doubleArray29 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector30 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray29);
        org.apache.commons.math.linear.RealVector realVector32 = arrayRealVector30.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector30.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = arrayRealVector25.ebeDivide(arrayRealVector30);
        java.lang.String str35 = arrayRealVector30.toString();
        org.apache.commons.math.linear.RealVector realVector37 = arrayRealVector30.mapPowToSelf((-1.0d));
        java.lang.Double[] doubleArray39 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector40 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray39);
        org.apache.commons.math.linear.RealVector realVector41 = arrayRealVector40.mapAbsToSelf();
        java.lang.Double[] doubleArray43 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector44 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray43);
        org.apache.commons.math.linear.RealVector realVector45 = arrayRealVector44.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector40.subtract(realVector45);
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector40.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector40);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector52 = arrayRealVector51.mapAbsToSelf();
        java.lang.Double[] doubleArray54 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector55 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray54);
        org.apache.commons.math.linear.RealVector realVector56 = arrayRealVector55.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector57 = arrayRealVector51.subtract(realVector56);
        org.apache.commons.math.linear.RealVector realVector58 = arrayRealVector51.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector59 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector51);
        java.lang.Double[] doubleArray61 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector63 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray61);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector64 = arrayRealVector51.ebeDivide(arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = arrayRealVector40.subtract(arrayRealVector63);
        java.lang.Double[] doubleArray67 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector68 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray67);
        org.apache.commons.math.linear.RealVector realVector70 = arrayRealVector68.mapSubtractToSelf((double) '4');
        org.apache.commons.math.linear.RealVector realVector71 = arrayRealVector68.mapCos();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector72 = arrayRealVector63.ebeDivide(arrayRealVector68);
        org.apache.commons.math.linear.RealVector realVector73 = arrayRealVector63.mapSignumToSelf();
        org.apache.commons.math.linear.RealVector realVector75 = arrayRealVector63.mapSubtractToSelf((double) 0L);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector76 = new org.apache.commons.math.linear.ArrayRealVector(realVector37, arrayRealVector63);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector78 = new org.apache.commons.math.linear.ArrayRealVector((int) (byte) 1);
        org.apache.commons.math.linear.RealVector realVector80 = arrayRealVector78.mapAddToSelf(100.0d);
        org.apache.commons.math.linear.RealVector realVector81 = arrayRealVector78.mapCbrt();
        // The following exception was thrown during execution in test generation
        try {
            double double82 = arrayRealVector76.getL1Distance(arrayRealVector78);
            org.junit.Assert.fail("Expected anonymous exception");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
            if (!e.getClass().isAnonymousClass()) {
                org.junit.Assert.fail("Expected anonymous exception, got " + e.getClass().getCanonicalName());
            }
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(arrayRealVector26);
        org.junit.Assert.assertNotNull(arrayRealVector27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(realVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(arrayRealVector34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "{-42}" + "'", str35, "{-42}");
        org.junit.Assert.assertNotNull(realVector37);
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertNotNull(realVector41);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(realVector45);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertNotNull(realVector56);
        org.junit.Assert.assertNotNull(realVector57);
        org.junit.Assert.assertNotNull(realVector58);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(arrayRealVector64);
        org.junit.Assert.assertNotNull(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertNotNull(realVector70);
        org.junit.Assert.assertNotNull(realVector71);
        org.junit.Assert.assertNotNull(arrayRealVector72);
        org.junit.Assert.assertNotNull(realVector73);
        org.junit.Assert.assertNotNull(realVector75);
        org.junit.Assert.assertNotNull(realVector80);
        org.junit.Assert.assertNotNull(realVector81);
    }

    @Test
    public void test1538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1538");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        double[] doubleArray8 = new double[] { (byte) -1 };
        org.apache.commons.math.linear.RealMatrix realMatrix9 = openMapRealVector2.outerProduct(doubleArray8);
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector14 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray11, (double) 10L);
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor15 = openMapRealVector14.sparseIterator();
        double double16 = openMapRealVector2.getL1Distance((org.apache.commons.math.linear.RealVector) openMapRealVector14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(realMatrix9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(entryItor15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.0d + "'", double16 == 0.0d);
    }

    @Test
    public void test1539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1539");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapLog1p();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector12.mapCbrt();
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector12.mapSqrtToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector12.mapExpm1ToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector19.mapExpToSelf();
        double[] doubleArray22 = arrayRealVector19.getDataRef();
        org.apache.commons.math.linear.RealVector realVector23 = arrayRealVector12.ebeDivide(doubleArray22);
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector26 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray25);
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector26.mapSubtractToSelf((double) '4');
        double double29 = arrayRealVector26.getNorm();
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector26.mapAbsToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector31 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22, arrayRealVector26);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector31.mapPowToSelf(7.845565309968116d);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[4.35414242816297]");
        org.junit.Assert.assertNotNull(realVector23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 42.0d + "'", double29 == 42.0d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector33);
    }

    @Test
    public void test1540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1540");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector4 = arrayRealVector2.mapExpToSelf();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        java.lang.Double[] doubleArray9 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray9);
        double double11 = arrayRealVector7.dotProduct(arrayRealVector10);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = arrayRealVector2.add(arrayRealVector10);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector10.mapTanhToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapAsin();
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector17 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray16);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector17.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector19 = arrayRealVector17.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector17.mapLogToSelf();
        double double21 = arrayRealVector17.getL1Norm();
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector24 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray23);
        org.apache.commons.math.linear.RealVector realVector25 = openMapRealVector24.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor26 = openMapRealVector24.sparseIterator();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector31 = arrayRealVector29.mapSubtractToSelf((double) '4');
        double double32 = arrayRealVector29.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = openMapRealVector24.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector24.append(42.0d);
        org.apache.commons.math.linear.RealVector realVector36 = arrayRealVector17.append((org.apache.commons.math.linear.RealVector) openMapRealVector24);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = arrayRealVector10.ebeDivide(arrayRealVector17);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 100.0d + "'", double11 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector12);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertNotNull(realVector19);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.4711276743037347d + "'", double21 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(entryItor26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + 42.0d + "'", double32 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector33);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(realVector36);
        org.junit.Assert.assertNotNull(arrayRealVector37);
    }

    @Test
    public void test1541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1541");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = openMapRealVector2.mapRintToSelf();
        java.util.Iterator<org.apache.commons.math.linear.RealVector.Entry> entryItor4 = openMapRealVector2.sparseIterator();
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector7 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray6);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector7.mapSubtractToSelf((double) '4');
        double double10 = arrayRealVector7.getL1Norm();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector2.append((org.apache.commons.math.linear.RealVector) arrayRealVector7);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector2.append(42.0d);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector16 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray15);
        openMapRealVector16.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = openMapRealVector16.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector23 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = openMapRealVector23.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = openMapRealVector20.add(openMapRealVector23);
        int int26 = openMapRealVector23.getDimension();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector23.copy();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector28 = openMapRealVector23.unitVector();
        double double29 = openMapRealVector2.getL1Distance(openMapRealVector23);
        org.apache.commons.math.linear.RealVector realVector30 = openMapRealVector23.mapSignumToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector33 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 100, (int) 'a');
        org.apache.commons.math.linear.RealVector realVector34 = openMapRealVector33.mapTanhToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = new org.apache.commons.math.linear.OpenMapRealVector((int) (short) 100);
        double double37 = openMapRealVector33.getL1Distance(openMapRealVector36);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector38 = openMapRealVector23.append(openMapRealVector33);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(entryItor4);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 42.0d + "'", double10 == 42.0d);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(openMapRealVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(openMapRealVector25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertNotNull(openMapRealVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 0.0d + "'", double29 == 0.0d);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertNotNull(realVector34);
        org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.0d + "'", double37 == 0.0d);
        org.junit.Assert.assertNotNull(openMapRealVector38);
    }

    @Test
    public void test1542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1542");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapSqrt();
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector12 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray11);
        org.apache.commons.math.linear.RealVector realVector13 = arrayRealVector12.mapAbsToSelf();
        double double14 = arrayRealVector12.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector15 = arrayRealVector2.add(arrayRealVector12);
        org.apache.commons.math.linear.AbstractRealVector abstractRealVector16 = arrayRealVector12.copy();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        org.apache.commons.math.linear.RealVector realVector20 = arrayRealVector19.mapAbsToSelf();
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector23 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray22);
        org.apache.commons.math.linear.RealVector realVector24 = arrayRealVector23.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.subtract(realVector24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector19.mapSqrt();
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector29 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray28);
        org.apache.commons.math.linear.RealVector realVector30 = arrayRealVector29.mapAbsToSelf();
        double double31 = arrayRealVector29.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = arrayRealVector19.add(arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector33 = arrayRealVector29.mapCosToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector34 = new org.apache.commons.math.linear.ArrayRealVector((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        org.apache.commons.math.linear.RealVector realVector35 = arrayRealVector12.append((org.apache.commons.math.linear.RealVector) arrayRealVector29);
        java.lang.Double[] doubleArray37 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector38 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray37);
        org.apache.commons.math.linear.RealVector realVector39 = arrayRealVector38.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector40 = arrayRealVector38.mapExpToSelf();
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector43 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray42);
        java.lang.Double[] doubleArray45 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector46 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray45);
        double double47 = arrayRealVector43.dotProduct(arrayRealVector46);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = arrayRealVector38.add(arrayRealVector46);
        org.apache.commons.math.linear.RealVector realVector50 = arrayRealVector48.mapMultiply(5.64585757183703d);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector29, arrayRealVector48);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector54 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray53);
        org.apache.commons.math.linear.RealVector realVector55 = arrayRealVector54.mapAbsToSelf();
        java.lang.Double[] doubleArray57 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector58 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray57);
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector58.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector60 = arrayRealVector54.subtract(realVector59);
        org.apache.commons.math.linear.RealVector realVector61 = arrayRealVector54.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector62 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector54);
        org.apache.commons.math.linear.RealVector realVector63 = arrayRealVector54.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector64 = arrayRealVector54.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector65 = new org.apache.commons.math.linear.ArrayRealVector(realVector64);
        double double66 = arrayRealVector65.getNorm();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector67 = arrayRealVector48.subtract(arrayRealVector65);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(realVector13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 10.0d + "'", double14 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector15);
        org.junit.Assert.assertNotNull(abstractRealVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(realVector20);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(realVector24);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(realVector30);
        org.junit.Assert.assertTrue("'" + double31 + "' != '" + 10.0d + "'", double31 == 10.0d);
        org.junit.Assert.assertNotNull(arrayRealVector32);
        org.junit.Assert.assertNotNull(realVector33);
        org.junit.Assert.assertNotNull(realVector35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertNotNull(realVector39);
        org.junit.Assert.assertNotNull(realVector40);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertTrue("'" + double47 + "' != '" + 100.0d + "'", double47 == 100.0d);
        org.junit.Assert.assertNotNull(arrayRealVector48);
        org.junit.Assert.assertNotNull(realVector50);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(realVector55);
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertNotNull(realVector60);
        org.junit.Assert.assertNotNull(realVector61);
        org.junit.Assert.assertNotNull(realVector63);
        org.junit.Assert.assertNotNull(realVector64);
        org.junit.Assert.assertTrue(Double.isNaN(double66));
        org.junit.Assert.assertNotNull(arrayRealVector67);
    }

    @Test
    public void test1543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1543");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector10.mapTanToSelf();
        org.apache.commons.math.linear.RealVector realVector14 = arrayRealVector10.mapDivideToSelf((double) (-1.0f));
        org.apache.commons.math.linear.RealVector realVector15 = arrayRealVector10.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector16 = arrayRealVector10.mapSignumToSelf();
        java.lang.Double[] doubleArray18 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector19 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray18);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector22 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray21);
        double double23 = arrayRealVector19.dotProduct(arrayRealVector22);
        double double24 = arrayRealVector19.getLInfNorm();
        org.apache.commons.math.linear.RealVector realVector25 = arrayRealVector19.mapSin();
        double double26 = arrayRealVector10.getL1Distance(arrayRealVector19);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(realVector14);
        org.junit.Assert.assertNotNull(realVector15);
        org.junit.Assert.assertNotNull(realVector16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertTrue("'" + double23 + "' != '" + 100.0d + "'", double23 == 100.0d);
        org.junit.Assert.assertTrue("'" + double24 + "' != '" + 6.0d + "'", double24 == 6.0d);
        org.junit.Assert.assertNotNull(realVector25);
        org.junit.Assert.assertTrue("'" + double26 + "' != '" + 9.0d + "'", double26 == 9.0d);
    }

    @Test
    public void test1544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1544");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        org.apache.commons.math.linear.RealVector realVector5 = arrayRealVector2.mapAddToSelf((double) (short) 100);
        int int6 = arrayRealVector2.getDimension();
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector2.mapTan();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(realVector5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(realVector7);
    }

    @Test
    public void test1545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1545");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(1, 1.6853169696133175d);
        boolean boolean3 = openMapRealVector2.isInfinite();
        double double4 = openMapRealVector2.getSparcity();
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
    }

    @Test
    public void test1546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1546");
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector((int) (byte) 10, 23.92357071360495d);
    }

    @Test
    public void test1547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1547");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector2 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray1);
        org.apache.commons.math.linear.RealVector realVector3 = arrayRealVector2.mapAbsToSelf();
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector6 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray5);
        org.apache.commons.math.linear.RealVector realVector7 = arrayRealVector6.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector8 = arrayRealVector2.subtract(realVector7);
        org.apache.commons.math.linear.RealVector realVector9 = arrayRealVector2.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector10 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector2);
        org.apache.commons.math.linear.RealVector realVector11 = arrayRealVector2.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector12 = arrayRealVector2.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector13 = new org.apache.commons.math.linear.ArrayRealVector(realVector12);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector16 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector18 = arrayRealVector16.mapSubtractToSelf((double) '4');
        double double19 = arrayRealVector16.getNorm();
        double double20 = arrayRealVector13.getL1Distance(arrayRealVector16);
        org.apache.commons.math.linear.RealVector realVector21 = arrayRealVector16.mapFloorToSelf();
        org.apache.commons.math.linear.RealVector realVector22 = arrayRealVector16.mapLog();
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector25 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = arrayRealVector25.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector27 = arrayRealVector25.mapExpToSelf();
        org.apache.commons.math.linear.RealVector realVector28 = arrayRealVector25.mapLogToSelf();
        double double29 = arrayRealVector25.getL1Norm();
        java.lang.Double[] doubleArray31 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector32 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector33 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray31);
        double double34 = arrayRealVector25.getL1Distance(arrayRealVector33);
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector37 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray36);
        org.apache.commons.math.linear.RealVector realVector38 = arrayRealVector37.mapAbsToSelf();
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector41 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray40);
        org.apache.commons.math.linear.RealVector realVector42 = arrayRealVector41.mapAtanToSelf();
        org.apache.commons.math.linear.RealVector realVector43 = arrayRealVector37.subtract(realVector42);
        org.apache.commons.math.linear.RealVector realVector44 = arrayRealVector37.mapCeilToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector45 = new org.apache.commons.math.linear.ArrayRealVector(arrayRealVector37);
        org.apache.commons.math.linear.RealVector realVector46 = arrayRealVector37.mapAsinToSelf();
        org.apache.commons.math.linear.RealVector realVector47 = arrayRealVector37.mapSinToSelf();
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector48 = new org.apache.commons.math.linear.ArrayRealVector(realVector47);
        java.lang.Double[] doubleArray50 = new java.lang.Double[] { 10.0d };
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector51 = new org.apache.commons.math.linear.ArrayRealVector(doubleArray50);
        org.apache.commons.math.linear.RealVector realVector53 = arrayRealVector51.mapSubtractToSelf((double) '4');
        double double54 = arrayRealVector51.getNorm();
        double double55 = arrayRealVector48.getL1Distance(arrayRealVector51);
        org.apache.commons.math.linear.ArrayRealVector arrayRealVector56 = arrayRealVector25.add(arrayRealVector51);
        double double57 = arrayRealVector51.getL1Norm();
        double[] doubleArray58 = arrayRealVector51.toArray();
        org.apache.commons.math.linear.RealVector realVector59 = arrayRealVector16.projection(doubleArray58);
        int int60 = arrayRealVector16.getDimension();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(realVector3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(realVector7);
        org.junit.Assert.assertNotNull(realVector8);
        org.junit.Assert.assertNotNull(realVector9);
        org.junit.Assert.assertNotNull(realVector11);
        org.junit.Assert.assertNotNull(realVector12);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(realVector18);
        org.junit.Assert.assertTrue("'" + double19 + "' != '" + 42.0d + "'", double19 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double20));
        org.junit.Assert.assertNotNull(realVector21);
        org.junit.Assert.assertNotNull(realVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(realVector27);
        org.junit.Assert.assertNotNull(realVector28);
        org.junit.Assert.assertTrue("'" + double29 + "' != '" + 1.4711276743037347d + "'", double29 == 1.4711276743037347d);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertTrue("'" + double34 + "' != '" + 8.528872325696266d + "'", double34 == 8.528872325696266d);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(realVector38);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(realVector42);
        org.junit.Assert.assertNotNull(realVector43);
        org.junit.Assert.assertNotNull(realVector44);
        org.junit.Assert.assertNotNull(realVector46);
        org.junit.Assert.assertNotNull(realVector47);
        org.junit.Assert.assertNotNull(doubleArray50);
        org.junit.Assert.assertNotNull(realVector53);
        org.junit.Assert.assertTrue("'" + double54 + "' != '" + 42.0d + "'", double54 == 42.0d);
        org.junit.Assert.assertTrue(Double.isNaN(double55));
        org.junit.Assert.assertNotNull(arrayRealVector56);
        org.junit.Assert.assertTrue("'" + double57 + "' != '" + 42.0d + "'", double57 == 42.0d);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-42.0]");
        org.junit.Assert.assertNotNull(realVector59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
    }

    @Test
    public void test1548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest3.test1548");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector2 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray1);
        openMapRealVector2.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector6 = openMapRealVector2.mapAdd((double) (byte) -1);
        java.lang.Double[] doubleArray8 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector9 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray8);
        org.apache.commons.math.linear.RealVector realVector10 = openMapRealVector9.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector11 = openMapRealVector6.add(openMapRealVector9);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector13 = openMapRealVector9.mapAddToSelf((double) 100L);
        double[] doubleArray15 = new double[] { Double.NaN };
        org.apache.commons.math.linear.RealMatrix realMatrix16 = openMapRealVector13.outerProduct(doubleArray15);
        org.apache.commons.math.linear.RealVector realVector17 = openMapRealVector13.mapLog1pToSelf();
        java.lang.Double[] doubleArray19 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector20 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray19);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector22 = openMapRealVector20.mapAdd((double) 1);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector25 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray24);
        org.apache.commons.math.linear.RealVector realVector26 = openMapRealVector25.mapRintToSelf();
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector27 = openMapRealVector20.add(openMapRealVector25);
        double double28 = openMapRealVector13.getL1Distance(openMapRealVector25);
        java.lang.Double[] doubleArray30 = new java.lang.Double[] { 1.0d };
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector31 = new org.apache.commons.math.linear.OpenMapRealVector(doubleArray30);
        openMapRealVector31.set(10.0d);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector35 = openMapRealVector31.mapAdd((double) 0.0f);
        org.apache.commons.math.linear.OpenMapRealVector openMapRealVector36 = openMapRealVector13.ebeMultiply((org.apache.commons.math.linear.RealVector) openMapRealVector35);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(openMapRealVector6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(realVector10);
        org.junit.Assert.assertNotNull(openMapRealVector11);
        org.junit.Assert.assertNotNull(openMapRealVector13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[NaN]");
        org.junit.Assert.assertNotNull(realMatrix16);
        org.junit.Assert.assertNotNull(realVector17);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(openMapRealVector22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(realVector26);
        org.junit.Assert.assertNotNull(openMapRealVector27);
        org.junit.Assert.assertTrue("'" + double28 + "' != '" + 3.6249728132842707d + "'", double28 == 3.6249728132842707d);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertNotNull(openMapRealVector35);
        org.junit.Assert.assertNotNull(openMapRealVector36);
    }
}


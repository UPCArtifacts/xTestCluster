import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray40, (int) (byte) 1);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, false, true]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26, (long) 'a');
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray28);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[]");
        org.junit.Assert.assertNotNull(longArray29);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray8);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.add(charArray8, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#, 4]");
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray1);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3, 1.0d);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray3);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray6);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray6, 10.0d, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (short) 0);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (short) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray26 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray26);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) (byte) 0);
        short[] shortArray43 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray43, (short) (byte) 0, 2);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray43, (short) 100);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray26, (short) (byte) -1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray52);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray52, (short) (byte) 1);
        short[] shortArray59 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray59);
        short[] shortArray65 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray65, (short) (byte) 0, 2);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray59, shortArray65);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray65);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray65, 3, (int) '4');
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray73, (short) 100);
        short[] shortArray76 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray52, shortArray73);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray78 = org.apache.commons.lang3.ArrayUtils.remove(shortArray76, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[1]");
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[1]");
        org.junit.Assert.assertNotNull(shortArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray76), "[100, 10, 100, 1]");
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray8 = new char[] { '#' };
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.clone(charArray8);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.add(charArray10, 'a');
        char[] charArray19 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray19, '4', (int) (byte) 100);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray19, '#', 0);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.addAll(charArray10, charArray19);
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.add(charArray30, 'a');
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray30, charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.addAll(charArray26, charArray34);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray34);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray34, '#', 6);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray34, ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray44);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, a]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#, #]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[ , #]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , #]");
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (short) 0);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (byte) 10);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 2, 10, 0, -1]");
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray6, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, false);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray6, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.add(booleanArray6, (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2 + "'", int9 == 2);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray5, charArray12);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.add(charArray5, '4');
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.clone(charArray5);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray30);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray19, charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray30, '4');
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.add(charArray34, '#');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[#, a, 4]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, a]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, #]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#, #, #]");
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, 7, (float) 100L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.clone(floatArray5);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.remove(floatArray6, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0]");
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray21);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 3, (int) '4');
        java.lang.Double[] doubleArray25 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray25, (double) '#');
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.add(doubleArray27, (int) (short) 1, (double) 1.0f);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray30, (double) (short) -1);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray30);
        java.lang.Double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray33);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int36 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray35);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray34, (java.lang.Object) floatArray35);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray35, (float) '#');
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray35);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.clone(floatArray10);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray41);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0, 0]");
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        char[] charArray42 = new char[] { ' ' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray42, '#');
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray42, '#', (int) (short) 10);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.subarray(charArray42, (int) (short) -1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray50);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray38, (java.lang.Object) charArray50);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, '4');
        char[] charArray56 = new char[] { '#' };
        java.lang.Character[] charArray57 = org.apache.commons.lang3.ArrayUtils.toObject(charArray56);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.clone(charArray56);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.add(charArray58, 'a');
        java.lang.Character[] charArray61 = org.apache.commons.lang3.ArrayUtils.toObject(charArray58);
        char[] charArray62 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray61);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.clone(charArray62);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray54, charArray62);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , #]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#]");
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#, a]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray62), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray62), "[#]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) 'a');
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) (-1));
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray3, 4, 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray26 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray26);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray26, shortArray32);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray26, (short) (byte) 0);
        short[] shortArray43 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray43, (short) (byte) 0, 2);
        short[] shortArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray43, (short) 100);
        short[] shortArray49 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray26, shortArray48);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.clone(shortArray26);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray26, (short) (byte) -1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray52);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray52, (short) (byte) 1);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray52);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.add(shortArray57, (short) 0);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray57);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.clone(shortArray57);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray57, 100, 100);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.contains(shortArray64, (short) 0);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray52, shortArray64);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray49), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray47, (long) ' ');
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray52, (long) (-1), (int) '4');
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        byte[] byteArray43 = new byte[] { (byte) 100, (byte) 100 };
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray43, (byte) 10, 0);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray43, (byte) 1);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (int) (short) 0, (byte) 1);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) 10);
        java.lang.Byte[] byteArray56 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray56);
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray48, byteArray57);
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray38, (java.lang.Object) byteArray58);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#]");
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.subarray(intArray1, 100, (-1));
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray37, true, (int) (byte) 100);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray32, booleanArray37);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, false, 6);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray37, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, true, true, true, false, false, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) -1, 5);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) 1);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10, 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 1);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (int) (short) 0, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (byte) 10, 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray33, (byte) 0);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 10, 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray33, byteArray38);
        byte[] byteArray43 = null;
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray42, byteArray43);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.remove(byteArray42, 2);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray42);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (short) 100, 10);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray2, byteArray20);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.remove(byteArray20, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100, 100, 100, 1]");
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (-1.0f), (int) (short) 100);
        java.lang.Double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray43, (double) 'a');
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray45, (double) 9, (double) 10L);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 6 + "'", int48 == 6);
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray6);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.subarray(intArray6, 0, (int) (byte) 0);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.add(intArray19, 1);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) '#');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray23);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[1]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[35]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' ');
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7, ' ');
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 1, (int) ' ');
        int[] intArray21 = new int[] { (byte) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0, 1);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray21);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.clone(intArray21);
        java.lang.Integer[] intArray32 = org.apache.commons.lang3.ArrayUtils.toObject(intArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray31);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.add(intArray31, 3);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 3]");
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ', (double) 5);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray2, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int int61 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (byte) -1, (int) (short) 100);
        int[] intArray62 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        java.lang.Integer[] intArray63 = org.apache.commons.lang3.ArrayUtils.toObject(intArray62);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(intArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray62), "[0]");
        org.junit.Assert.assertNotNull(intArray63);
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray4, 10, (int) (short) 10);
        short[] shortArray16 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray16);
        short[] shortArray22 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray22, (short) (byte) 0, 2);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray22);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray22);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray22, (short) -1, (int) (byte) 1);
        short[] shortArray31 = null;
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray22, shortArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray32, (short) 0, 0);
        short[] shortArray40 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray40);
        short[] shortArray43 = org.apache.commons.lang3.ArrayUtils.remove(shortArray40, 0);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray32, shortArray43);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray32, (short) (byte) 10);
        java.lang.Class<?>[] wildcardClassArray47 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray51 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray51);
        short[] shortArray57 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray57, (short) (byte) 0, 2);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray51, shortArray57);
        int int63 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray51, (short) (byte) 0);
        short[] shortArray68 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int71 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray68, (short) (byte) 0, 2);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray68, (short) 100);
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray51, shortArray73);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray47, (java.lang.Object) shortArray74);
        short[] shortArray77 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray74, (short) (byte) 1);
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray32, shortArray77);
        short[] shortArray79 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray12, shortArray32);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray12);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray43), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(wildcardClassArray47);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(shortArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray77), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(shortArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray79), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray10, 1, 100);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray10, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false, false, true]");
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray33);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.clone(charArray37);
        char[] charArray41 = org.apache.commons.lang3.ArrayUtils.add(charArray39, 'a');
        java.lang.Character[] charArray42 = org.apache.commons.lang3.ArrayUtils.toObject(charArray39);
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray42);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.clone(charArray43);
        char[] charArray46 = new char[] { '#' };
        java.lang.Character[] charArray47 = org.apache.commons.lang3.ArrayUtils.toObject(charArray46);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray46);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.addAll(charArray44, charArray46);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray33, charArray49);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.clone(charArray49);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.subarray(charArray51, (int) (byte) 1, (int) (byte) 10);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray51, '4');
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray51, ' ', (int) (short) -1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, a]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#]");
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#, #]");
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, ' ');
        byte[] byteArray12 = new byte[] {};
        byte[] byteArray13 = new byte[] {};
        byte[] byteArray14 = new byte[] {};
        byte[] byteArray15 = new byte[] {};
        byte[][] byteArray16 = new byte[][] { byteArray12, byteArray13, byteArray14, byteArray15 };
        byte[][] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray16, 0, (int) '4');
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray9, (java.lang.Object) byteArray19, 4);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[#]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[]");
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[]");
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray12, 'a');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.add(charArray21, (int) (short) 0, 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray24);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "  #4#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "  #4#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[ ,  , #, 4, #, a]");
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, true);
        boolean[] booleanArray7 = new boolean[] { true, true, false, false };
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray7, false);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray7, true);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray2, booleanArray7);
        java.lang.Boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray2);
        boolean[] booleanArray18 = new boolean[] { true, true, false, false };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, false);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray18, true);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray18, true);
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, 0, true);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray27, true, 6);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray27, false);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray27, false);
        boolean[] booleanArray35 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray27, booleanArray35);
        boolean[] booleanArray41 = new boolean[] { true, true, false, true };
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray41, true, (int) '4');
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray41);
        java.lang.Boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46);
        java.lang.Boolean[] booleanArray53 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray53);
        java.lang.Boolean[] booleanArray55 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray54);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray54, false);
        boolean[] booleanArray59 = org.apache.commons.lang3.ArrayUtils.add(booleanArray54, false);
        boolean[] booleanArray60 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray47, booleanArray54);
        java.lang.Boolean[] booleanArray61 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray60);
        boolean[] booleanArray62 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray27, booleanArray60);
        boolean[] booleanArray67 = new boolean[] { true, true, false, true };
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray67, true, (int) '4');
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray67);
        java.lang.Boolean[] booleanArray72 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray67);
        boolean[] booleanArray73 = null;
        boolean[] booleanArray74 = new boolean[] {};
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, true);
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray73, booleanArray74);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray74);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray67, booleanArray74);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray67, false);
        boolean[] booleanArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray67, true);
        boolean[] booleanArray84 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray62, booleanArray67);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray2, booleanArray67);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray35), "[]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray53);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray55);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, false, false, true, false]");
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray61);
        org.junit.Assert.assertNotNull(booleanArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray62), "[true, true, true, false, false, true, true, false, true, true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(booleanArray72);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2 + "'", int81 == 2);
        org.junit.Assert.assertNotNull(booleanArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray83), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray84), "[true, true, true, false, false, true, true, false, true, true, true, false, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        java.lang.Float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray10, 1.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray10);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray10);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 0L);
        java.lang.Object[] objArray18 = null;
        float[] floatArray19 = new float[] {};
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray19, (float) 10L);
        float[] floatArray23 = new float[] { (byte) -1 };
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray23);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) (-1L));
        float[] floatArray27 = new float[] {};
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.add(floatArray27, (float) 10L);
        float[] floatArray31 = new float[] { (byte) -1 };
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray24, floatArray29);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray29);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray18, (java.lang.Object) floatArray34);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray34, (float) ' ');
        java.lang.Float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray37);
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray37);
        float[] floatArray40 = new float[] {};
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.add(floatArray40, (float) 10L);
        float[] floatArray44 = new float[] { (byte) -1 };
        float[] floatArray45 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray42, floatArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray45, (float) (-1L));
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray45, (int) (byte) 0, 0);
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.add(floatArray45, (float) (short) 10);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray37, (java.lang.Object) floatArray52);
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray7, (java.lang.Object) floatArray52);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray3, (int) (short) 1);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, (int) '#', (int) (short) 0);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) intArray20, "");
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.clone(intArray20);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{100,52}" + "'", str25, "{100,52}");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[100, 52]");
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) '4');
        java.lang.Integer[] intArray28 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 0);
        byte[] byteArray39 = new byte[] { (byte) 100, (byte) 100 };
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray39, (byte) 10, 0);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray34, byteArray39);
        byte[] byteArray44 = null;
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray43, byteArray44);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.remove(byteArray43, 2);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.clone(byteArray47);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray48, (byte) 0);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray28, (java.lang.Object) byteArray48, (int) (byte) 0);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray28);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.addAll(intArray19, intArray53);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.clone(intArray54);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 52]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0, 0, -1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[0, 0, -1, 2, -1, 2]");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, '#', (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray3);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, (int) 'a', 0);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        float[] floatArray22 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, (float) 10L);
        float[] floatArray26 = new float[] { (byte) -1 };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray27, (float) (-1L));
        float[] floatArray30 = new float[] {};
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, (float) 10L);
        float[] floatArray34 = new float[] { (byte) -1 };
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray34);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 1);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray27, floatArray32);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray32, 10, 0);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray41, (float) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray41);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray41);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (-1), (float) (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray15);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, 10, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray17);
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray10);
        char[] charArray15 = new char[] { '#' };
        java.lang.Character[] charArray16 = org.apache.commons.lang3.ArrayUtils.toObject(charArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray15);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray8, charArray15);
        java.lang.Character[] charArray19 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[#]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(charArray19);
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(charArray1, '#');
        java.lang.Character[] charArray5 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        java.lang.Double[] doubleArray42 = new java.lang.Double[] { 100.0d, 1.0d, 100.0d };
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray42);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray38, (java.lang.Object) doubleArray43, (int) (byte) 0);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.add(doubleArray43, (double) (-1L));
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[100.0, 1.0, 100.0, -1.0]");
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.remove(shortArray8, (int) (short) 0);
        java.lang.Class<?>[] wildcardClassArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray15 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray15);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray15, shortArray21);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray32, (short) 100);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray11, (java.lang.Object) shortArray38);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray38, (short) (byte) 1);
        short[] shortArray45 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray45);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray45, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray45, (short) (byte) 0);
        short[] shortArray62 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray62, (short) (byte) 0, 2);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray62, (short) 100);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray45, shortArray67);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray70);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.remove(shortArray70, (int) (short) 0);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray73, (short) 1);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[10, 100, -1, 1, 0, 0, 100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[100, -1, 1, 0, 0, 100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2 + "'", int75 == 2);
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, 10, 0);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0, 1);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, (int) (byte) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray11, (int) (byte) 10, 0);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray11);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray1);
        boolean[] booleanArray9 = new boolean[] { true, true, false, false };
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray9, false);
        boolean[] booleanArray16 = new boolean[] { true, true, false, true };
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray16, true, (int) 'a');
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray16, true, (int) '4');
        boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray1, booleanArray16);
        java.lang.Boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray16);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray28);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray29, 2, 7);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 3 + "'", int19 == 3);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[false, true]");
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 100L);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, (long) 100, (int) ' ');
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1, -1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray20 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) '4');
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.add(intArray14, 10);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, (int) '#', (int) (short) -1);
        int[] intArray31 = new int[] { (byte) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray31, 0);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.add(intArray31, 0);
        java.lang.Integer[] intArray36 = org.apache.commons.lang3.ArrayUtils.toObject(intArray35);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray36, (int) (byte) 10);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray38, (int) '4');
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray25, intArray38);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0, 0, 2, 10, 0, -1, 10]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, 0);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (short) 100);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 0]");
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray9, (-1L));
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.subarray(longArray11, (int) (byte) 10, (int) (short) 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        short[] shortArray3 = new short[] { (byte) 1, (short) 0, (byte) 100 };
        short[] shortArray7 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray7);
        short[] shortArray13 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray13, (short) (byte) 0, 2);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray7, shortArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray13);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray13, 3, (int) '4');
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.clone(shortArray24);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[1, 0, 100]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 0, 100, 1]");
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) (-1L));
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 0.0f);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray22, (float) (-1L), (int) '4');
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray22, 100.0f);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        java.lang.Float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) 1.0f, (double) (-1));
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) (byte) 0, (double) 0.0f);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) 100.0f);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 10L, 1);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, (int) '#', 0);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray10, (float) (short) 1);
        java.lang.Float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        java.lang.Object[] objArray24 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.Object[]) floatArray21, 7, (int) (short) 100);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray21);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertNotNull(objArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray24), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0]");
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray7, 4, (long) 100);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 6);
        java.lang.Long[] longArray72 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray72, (long) (-1));
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.add(longArray74, 0, (long) 1);
        int int80 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray74, (long) (-1), (int) (byte) 1);
        long[] longArray83 = org.apache.commons.lang3.ArrayUtils.subarray(longArray74, (int) 'a', (-1));
        int int86 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray74, (long) ' ', 7);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray65, longArray74);
        int int90 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray65, (long) (byte) 1, 2);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[0, 100, -1, -1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 2 + "'", int80 == 2);
        org.junit.Assert.assertNotNull(longArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray83), "[]");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + (-1) + "'", int86 == (-1));
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 1);
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray2, (long) 2);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, (long) (byte) 10, (int) (short) 1);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.subarray(longArray2, 10, 0);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, 0, (long) 1);
        java.lang.Long[] longArray29 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray29, (long) (-1));
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.add(longArray31, 0, (long) 1);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray31, 0L);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray22, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.add(longArray22, 10L);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray10, longArray39);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10, -1, 10, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[1, -1, 10, -1, 10, 1, 1, 10]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[1, -1, 10, -1, 10, 1, 1, 10]");
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray10);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray10);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray10, (float) 100L);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (short) -1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 0, (double) (short) -1);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray11, 0.0d);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray16, (double) 0.0f);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray19, 100.0d, (int) (byte) -1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true, (int) (byte) 10);
        boolean[] booleanArray7 = new boolean[] {};
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray7);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, true, (int) (byte) 10);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray0, booleanArray7);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7);
        boolean[] booleanArray20 = new boolean[] { true, true, false, true };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray20, true, (int) '4');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray20);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray20, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray7, booleanArray26);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray7, false);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, true, true]");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[]");
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0, 1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray18, "hi!");
        byte[] byteArray28 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray28, (byte) 0);
        byte[] byteArray33 = new byte[] { (byte) 100, (byte) 100 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray33, (byte) 10, 0);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray28, byteArray33);
        byte[] byteArray38 = null;
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray37, byteArray38);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.remove(byteArray37, 2);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.clone(byteArray41);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.add(byteArray41, (byte) -1);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray41, (byte) -1);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.clone(byteArray46);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray18, byteArray46);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,0,0,1,100,100}" + "'", str23, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 0, 1, 100, 100, -1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 0, 1, 100, 100, 0, 1, 100, 100]");
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18, (byte) 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray20, (byte) 1, 4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 0]");
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        java.lang.Integer[] intArray4 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray4);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.add(intArray5, (int) 'a');
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray20 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray14, intArray20);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray14, (int) '4');
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray14, (int) (byte) 100, 2);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray5, intArray14);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 2, -1, 2, 97]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 2, -1, 2, 0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[-1, 2, -1, 2, 0, 2, 10, 0, -1]");
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (-1.0f));
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) 1L);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) 0.0f);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, 0, (double) (byte) -1);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, -1.0, 100.0, 10.0]");
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray11);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 100L, 10, (double) 10.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.remove(longArray60, (int) (short) 0);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.add(longArray60, (int) (byte) 1, 0L);
        long[] longArray66 = org.apache.commons.lang3.ArrayUtils.clone(longArray65);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[0, 0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray66), "[0, 0, 100, -1, -1, 100, 100]");
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray15);
        java.lang.String str17 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) shortArray16);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "{10,100,-1,1,0,0}" + "'", str17, "{10,100,-1,1,0,0}");
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray19, (short) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 100, 10]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        short[] shortArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray0, (short) (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray13);
        boolean[] booleanArray17 = null;
        boolean[] booleanArray22 = new boolean[] { true, true, false, false };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, true);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray22, true);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.add(booleanArray22, 0, true);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray22);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray13, booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[false, false, true, true, true]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 3 + "'", int15 == 3);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[false, false, true, true, true, true, true, false, false]");
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray16, (int) (short) 0);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.remove(intArray20, (int) (byte) 0);
        int[] intArray24 = new int[] { (byte) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray24, 0);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.add(intArray24, 0);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray24, (int) (byte) 1, (int) ' ');
        int[] intArray33 = new int[] { (byte) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray33, 0);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray33, 10, 0);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray33, 0, 1);
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.addAll(intArray24, intArray33);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray42, 4);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray42, 0);
        int[] intArray47 = org.apache.commons.lang3.ArrayUtils.clone(intArray42);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray42);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[-1, -1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 10, 100, 0, 0, 0]");
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray16 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (-1));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) -1, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray18);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray18, (long) '#');
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray18, 6, 100L);
        java.lang.Long[] longArray36 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36, (long) (-1));
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.add(longArray38, 0, (long) 1);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray38, (long) (-1), (int) (byte) 1);
        long[] longArray45 = new long[] {};
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.contains(longArray45, (long) (short) 1);
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.addAll(longArray38, longArray45);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) 1, 3);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) '#');
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray48);
        java.lang.Class<?> wildcardClass55 = longArray18.getClass();
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1, 100]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2 + "'", int44 == 2);
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass55);
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(shortArray9, (short) 10);
        short[] shortArray19 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray19);
        short[] shortArray25 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray25, (short) (byte) 0, 2);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray25);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 0);
        short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0, 100, 10, 100]");
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        double[] doubleArray22 = new double[] { (byte) 10 };
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray17);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) 100, (double) (short) 1);
        java.lang.Double[] doubleArray35 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray35, (double) '#');
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) ' ', 100.0d);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray37);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) (short) 100, (double) (byte) 1);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, -1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[10.0]");
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d, 0.0d, (-1.0d), 100.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) 10);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 2, (int) (byte) 100, (double) 'a');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, 0.0d);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, (double) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, 0.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0, -1.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        boolean[] booleanArray43 = new boolean[] { true, true, false, false };
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray43, false);
        boolean[] booleanArray50 = new boolean[] { true, true, false, true };
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, true, (int) '4');
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray43, booleanArray50);
        boolean[] booleanArray59 = new boolean[] { true, true, false, false };
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray59, false);
        boolean[] booleanArray66 = new boolean[] { true, true, false, true };
        int int69 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray66, true, (int) '4');
        boolean boolean70 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray59, booleanArray66);
        boolean[] booleanArray71 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray50, booleanArray59);
        int int74 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, true, (int) (byte) 10);
        boolean[] booleanArray76 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray50, true);
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray50);
        boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray50);
        int int81 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray50, false, (int) (short) 100);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 3 + "'", int53 == 3);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(booleanArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray59), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(booleanArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray66), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 3 + "'", int69 == 3);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(booleanArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray71), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertNotNull(booleanArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray76), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[true, true, false, true, true, true, true, false, false, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.clone(longArray27);
        long[] longArray31 = new long[] { (byte) -1, 10 };
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.clone(longArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray32);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray27, longArray34);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) ' ', 0);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray27);
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray27);
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.add(longArray40, (long) (short) 1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, 10, -1, 10, 1, 1, 1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1, 10, -1, 10, 1, 1, 1, 1, 10, -1, 10, -1, 1]");
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, true);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.add(booleanArray20, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, false, true, false]");
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        boolean[] booleanArray22 = new boolean[] { true, true, false, false };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, true);
        boolean[] booleanArray31 = new boolean[] { true, true, false, true };
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray31, true, (int) '4');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray31);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray31, false);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray31);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray22, booleanArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray17, (java.lang.Object) booleanArray39);
        java.lang.Boolean[] booleanArray46 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray46);
        java.lang.Boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray47);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray47, false);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.add(booleanArray47, false);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray39, booleanArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray47);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[true, true, false, false, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2 + "'", int50 == 2);
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[true, true, false, false, true, false]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 10);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray7, (int) (byte) 10, 10);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        byte[] byteArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray30);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray29, 2);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray29);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray7);
        double[] doubleArray38 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray38);
        double[] doubleArray41 = new double[] { (byte) 10 };
        double[] doubleArray42 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray41);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray38, doubleArray41);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray41, (double) 2);
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) 'a', (double) (short) 1);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) byteArray7, (java.lang.Object) int48);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray42), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (short) 100);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray2, (java.lang.Object) intArray4);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(intArray12, (int) (byte) 100);
        int[] intArray16 = new int[] { (byte) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray16, 0);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray16, 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray16, (int) (byte) 1, (int) ' ');
        int[] intArray25 = new int[] { (byte) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray25, 0);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray25, 10, 0);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray25, 0, 1);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.addAll(intArray16, intArray25);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.clone(intArray25);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.subarray(intArray35, (int) '4', (int) 'a');
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray35, (int) (short) -1);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray35);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0, 0]");
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.add(booleanArray38, false);
        boolean[] booleanArray41 = null;
        boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray41);
        boolean[] booleanArray47 = new boolean[] { true, true, false, true };
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray47, true, (int) '4');
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray38, booleanArray47);
        boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true, true, true, true, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray42), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 3 + "'", int50 == 3);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[true, true, false, true, true, true, true, false, false, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray52), "[true, true, false, true]");
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        boolean boolean61 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray7);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.remove(intArray3, (int) (short) 1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray20);
        java.lang.Class<?> wildcardClass22 = intArray20.getClass();
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(wildcardClass22);
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) -1, (int) (short) 1);
        float[] floatArray24 = new float[] {};
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray24, (float) 10L);
        float[] floatArray28 = new float[] { (byte) -1 };
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray26, floatArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray29, (float) (-1L));
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray29, (float) 100L);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.clone(floatArray29);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray23, floatArray29);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, (float) ' ');
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray37, (float) (-1L));
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0, -1.0, 32.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 0L);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[1, -1, 10, -1, 10, 1, 1, 0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, (long) (short) 10);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray13, (long) (short) 1);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        long[] longArray31 = null;
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.addAll(longArray30, longArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray32, (-1L));
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.add(longArray19, 0, (long) 1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray19, (long) (-1), (int) (byte) 1);
        long[] longArray26 = new long[] {};
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(longArray26, (long) (short) 1);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray19, longArray26);
        java.lang.Long[] longArray36 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray36, (long) (-1));
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray38, (long) '#');
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.subarray(longArray38, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray50 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray50, (long) (-1));
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray52, (long) '#');
        long[] longArray55 = org.apache.commons.lang3.ArrayUtils.addAll(longArray43, longArray52);
        long[] longArray58 = new long[] { (byte) -1, 10 };
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.clone(longArray58);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray43, longArray58);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.addAll(longArray29, longArray58);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray58, (long) ' ');
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray58);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.add(longArray64, 6, (long) 3);
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.add(longArray67, (int) (byte) 1, (long) 4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(longArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray55), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray58), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[-1, 10, -1, 10, 1, 1, 3, -1, 10]");
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[-1, 4, 10, -1, 10, 1, 1, 3, -1, 10]");
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true, (int) 'a');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 'a');
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray12, (long) '#');
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.subarray(longArray12, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray24 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24, (long) (-1));
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray26, (long) '#');
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray17, longArray26);
        long[] longArray32 = new long[] { (byte) -1, 10 };
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.clone(longArray32);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray17, longArray32);
        long[] longArray35 = org.apache.commons.lang3.ArrayUtils.clone(longArray17);
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.subarray(longArray17, 3, (-1));
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray3, longArray17);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray39, (long) 5, 8);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray4, (int) (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray0, (java.lang.Object) intArray4);
        java.lang.Integer[] intArray17 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray17);
        int[] intArray24 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray18, intArray24);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray18, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray18);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.subarray(intArray18, 0, (int) (byte) 0);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray31, 5, 4);
        java.lang.Integer[] intArray36 = org.apache.commons.lang3.ArrayUtils.toObject(intArray31);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(intArray31, 2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        boolean[] booleanArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) ' ', false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray27, (byte) 10, 0);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray22, byteArray27);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray31, byteArray32);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.remove(byteArray31, 2);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.clone(byteArray35);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.add(byteArray36, (byte) 0);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray36);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 10);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray41, (byte) 10, 6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray27, 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray34);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray10);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) (short) 100);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 2, 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray5, (float) 100, (int) (byte) -1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        int[] intArray17 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray23 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray23);
        int[] intArray30 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray24, intArray30);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.addAll(intArray17, intArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray17);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray9, (java.lang.Object) intArray17);
        short[] shortArray38 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray38);
        short[] shortArray44 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) (byte) 0, 2);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray38, shortArray44);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray44);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray44, (short) -1, (int) (byte) 1);
        short[] shortArray53 = null;
        short[] shortArray54 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray44, shortArray53);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray54, (short) 0, 0);
        short[] shortArray61 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray61);
        short[] shortArray67 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray67, (short) (byte) 0, 2);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray61, shortArray67);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray61, (short) (byte) 0);
        short[] shortArray78 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray78, (short) (byte) 0, 2);
        short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray78, (short) 100);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray61, shortArray83);
        short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.clone(shortArray61);
        short[] shortArray87 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray61, (short) (byte) -1);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray54, shortArray87);
        short[] shortArray90 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray87, (short) (byte) 1);
        short[] shortArray92 = org.apache.commons.lang3.ArrayUtils.add(shortArray90, (short) (byte) 1);
        java.lang.Short[] shortArray93 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray90);
        short[] shortArray95 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray93, (short) (byte) -1);
        boolean boolean96 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) booleanArray9, (java.lang.Object[]) shortArray93);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[52, 10, 100]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(shortArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray54), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(shortArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray78), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray87), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(shortArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray90), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray92), "[100, 10, 100, 1]");
        org.junit.Assert.assertNotNull(shortArray93);
        org.junit.Assert.assertNotNull(shortArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray95), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        char[] charArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray0, 'a');
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (byte) 10);
        java.lang.String str12 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray11);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) 100);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) (short) 1);
        java.lang.Class<?> wildcardClass17 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "{-1.0,100.0,10.0}" + "'", str12, "{-1.0,100.0,10.0}");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (short) (byte) 1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (int) (short) 0, (short) (byte) 1);
        short[] shortArray41 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray41);
        short[] shortArray47 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray47, (short) (byte) 0, 2);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray41, shortArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray47);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.contains(shortArray47, (short) 1);
        short[] shortArray58 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray58);
        short[] shortArray64 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray64, (short) (byte) 0, 2);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray58, shortArray64);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray64);
        int int72 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray64, (short) -1, (int) (byte) 1);
        short[] shortArray73 = null;
        short[] shortArray74 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray64, shortArray73);
        boolean boolean75 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray47, shortArray64);
        java.lang.Short[] shortArray82 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray83 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray82);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray83);
        short[] shortArray85 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray64, shortArray83);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray37, shortArray83);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(shortArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray47), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(shortArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray74), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[0, 0, 1, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray85), "[0, 100, 10, 1, 0, 0, 1, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[1, 1, 1, 10, 0, 0, 1, -1, 100, 10]");
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        short[] shortArray0 = null;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray0, shortArray27);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.clone(shortArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(shortArray29);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        java.lang.Long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (short) 0);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray2, (long) '4');
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) 3);
        java.lang.Float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray8);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray8, 0, (int) (byte) 10);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) 100);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, 2.0, 6.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.add(intArray16, (int) (short) 0);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray16);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        float[] floatArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.remove(floatArray0, 7);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 1);
        java.lang.Long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toObject(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(longArray3);
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        long[] longArray2 = new long[] { (byte) -1, 10 };
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray12, (long) 5);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray3, longArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) ' ');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.add(longArray16, (long) (short) 0);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[1, 1, 10, -1, 10, -1, 5]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[1, 1, 10, -1, 10, -1, 5, 0]");
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 10);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, (int) (short) 0);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 5);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        long[][] longArray0 = new long[][] {};
        boolean[] booleanArray5 = new boolean[] { true, true, false, true };
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray5, true, (int) '4');
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray5);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray5);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        java.lang.Character[] charArray15 = new java.lang.Character[] { '4' };
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15, 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray10, (java.lang.Object) charArray18);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.subarray(charArray18, 3, (int) (short) 1);
        long[][] longArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (java.lang.Object) (short) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[4]");
        org.junit.Assert.assertNotNull(charArray18);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray18), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray18), "[4]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[]");
        org.junit.Assert.assertNotNull(longArray23);
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray5 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2, genericDeclarationArray3, genericDeclarationArray4 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray6 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray7 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray8 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray9 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray10 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray11 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray6, genericDeclarationArray7, genericDeclarationArray8, genericDeclarationArray9, genericDeclarationArray10 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray12 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray13 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray14 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray15 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray16 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray17 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray12, genericDeclarationArray13, genericDeclarationArray14, genericDeclarationArray15, genericDeclarationArray16 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray18 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray19 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray20 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray21 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray22 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray23 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray18, genericDeclarationArray19, genericDeclarationArray20, genericDeclarationArray21, genericDeclarationArray22 };
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray24 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray5, genericDeclarationArray11, genericDeclarationArray17, genericDeclarationArray23 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray25 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray26 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray27 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray28 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray29 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray25, genericDeclarationArray26, genericDeclarationArray27, genericDeclarationArray28 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray30 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray31 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray32 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray33 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray34 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray30, genericDeclarationArray31, genericDeclarationArray32, genericDeclarationArray33 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray35 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray36 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray37 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray38 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray39 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray35, genericDeclarationArray36, genericDeclarationArray37, genericDeclarationArray38 };
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray40 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray41 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray42 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray43 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray44 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray40, genericDeclarationArray41, genericDeclarationArray42, genericDeclarationArray43 };
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray45 = new java.lang.reflect.GenericDeclaration[][][] { genericDeclarationArray29, genericDeclarationArray34, genericDeclarationArray39, genericDeclarationArray44 };
        java.lang.reflect.GenericDeclaration[][][] genericDeclarationArray46 = org.apache.commons.lang3.ArrayUtils.addAll(genericDeclarationArray24, genericDeclarationArray45);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray5);
        org.junit.Assert.assertNotNull(genericDeclarationArray6);
        org.junit.Assert.assertNotNull(genericDeclarationArray7);
        org.junit.Assert.assertNotNull(genericDeclarationArray8);
        org.junit.Assert.assertNotNull(genericDeclarationArray9);
        org.junit.Assert.assertNotNull(genericDeclarationArray10);
        org.junit.Assert.assertNotNull(genericDeclarationArray11);
        org.junit.Assert.assertNotNull(genericDeclarationArray12);
        org.junit.Assert.assertNotNull(genericDeclarationArray13);
        org.junit.Assert.assertNotNull(genericDeclarationArray14);
        org.junit.Assert.assertNotNull(genericDeclarationArray15);
        org.junit.Assert.assertNotNull(genericDeclarationArray16);
        org.junit.Assert.assertNotNull(genericDeclarationArray17);
        org.junit.Assert.assertNotNull(genericDeclarationArray18);
        org.junit.Assert.assertNotNull(genericDeclarationArray19);
        org.junit.Assert.assertNotNull(genericDeclarationArray20);
        org.junit.Assert.assertNotNull(genericDeclarationArray21);
        org.junit.Assert.assertNotNull(genericDeclarationArray22);
        org.junit.Assert.assertNotNull(genericDeclarationArray23);
        org.junit.Assert.assertNotNull(genericDeclarationArray24);
        org.junit.Assert.assertNotNull(genericDeclarationArray25);
        org.junit.Assert.assertNotNull(genericDeclarationArray26);
        org.junit.Assert.assertNotNull(genericDeclarationArray27);
        org.junit.Assert.assertNotNull(genericDeclarationArray28);
        org.junit.Assert.assertNotNull(genericDeclarationArray29);
        org.junit.Assert.assertNotNull(genericDeclarationArray30);
        org.junit.Assert.assertNotNull(genericDeclarationArray31);
        org.junit.Assert.assertNotNull(genericDeclarationArray32);
        org.junit.Assert.assertNotNull(genericDeclarationArray33);
        org.junit.Assert.assertNotNull(genericDeclarationArray34);
        org.junit.Assert.assertNotNull(genericDeclarationArray35);
        org.junit.Assert.assertNotNull(genericDeclarationArray36);
        org.junit.Assert.assertNotNull(genericDeclarationArray37);
        org.junit.Assert.assertNotNull(genericDeclarationArray38);
        org.junit.Assert.assertNotNull(genericDeclarationArray39);
        org.junit.Assert.assertNotNull(genericDeclarationArray40);
        org.junit.Assert.assertNotNull(genericDeclarationArray41);
        org.junit.Assert.assertNotNull(genericDeclarationArray42);
        org.junit.Assert.assertNotNull(genericDeclarationArray43);
        org.junit.Assert.assertNotNull(genericDeclarationArray44);
        org.junit.Assert.assertNotNull(genericDeclarationArray45);
        org.junit.Assert.assertNotNull(genericDeclarationArray46);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true, (int) 'a');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, (int) '4');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) (short) -1, 1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (-1), 0);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.subarray(intArray24, (int) (byte) 100, (int) '4');
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 1);
        short[] shortArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[10, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray31), "[10, 1, 1, 1]");
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        java.lang.Character[] charArray3 = new java.lang.Character[] { ' ', '4', ' ' };
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray4, ' ');
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), " 4 ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), " 4 ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[ , 4,  ]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray7, floatArray19);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) (byte) 1);
        float[] floatArray30 = new float[] { '#' };
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, (float) (-1));
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.clone(floatArray30);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray33, 0, (int) (short) 100);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray33, (float) 4);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray28, floatArray33);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray28);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.remove(floatArray28, 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[1.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[35.0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[]");
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray7, floatArray19);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.clone(floatArray7);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray27, (float) 6, 4);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray11 = org.apache.commons.lang3.ArrayUtils.add(intArray8, 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 2");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) byteArray22, 2);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-1, 0, 0, 1]");
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        java.lang.Float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray19);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray19, (int) '#', 0);
        java.lang.Class<?>[] wildcardClassArray28 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray35 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray35, (long) (-1));
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.add(longArray37, 0, (long) 1);
        java.lang.Class<?> wildcardClass41 = longArray37.getClass();
        java.lang.Class<?>[] wildcardClassArray42 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray28, wildcardClass41);
        java.io.Serializable[] serializableArray45 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray42, (int) '4', (int) (byte) 100);
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, (float) 10L);
        float[] floatArray49 = new float[] {};
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray46, floatArray49);
        float[] floatArray51 = null;
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray49, floatArray51);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) (-1L), (int) '4');
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray42, (java.lang.Object) floatArray49);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray49);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray49);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray2);
        float[] floatArray61 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray2, 0.0f);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClassArray42);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[10.0]");
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray3, 10, 3);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[]");
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        boolean[] booleanArray22 = new boolean[] { true, true, false, false };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, true);
        boolean[] booleanArray31 = new boolean[] { true, true, false, true };
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray31, true, (int) '4');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray31);
        boolean[] booleanArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray31, false);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray31);
        boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray22, booleanArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray17, (java.lang.Object) booleanArray39);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray39, false, (int) (byte) 0);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray39, false);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 3 + "'", int34 == 3);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray39), "[true, true, false, false, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2 + "'", int43 == 2);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) (byte) -1);
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray0, (float) (short) 1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray10, (float) 1);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray10, 10, 0);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) (-1));
        // The following exception was thrown during execution in test generation
        try {
            int int22 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) int21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1, (double) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) 0L);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) (short) 0, 9);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        short[] shortArray20 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray20, (short) (byte) 0, 2);
        short[] shortArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray20, (short) 100);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray25);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(shortArray3, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) -1);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray6, (byte) 0);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-1, 1]");
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray19);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (int) (short) 0, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 100, 100, 100]");
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        double[] doubleArray7 = new double[] { (byte) 10 };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray7);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray7, (double) 0L);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) intArray7);
        java.lang.Long[] longArray9 = new java.lang.Long[] {};
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray7, (java.lang.Object) longArray12, (int) '4');
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7, (int) (byte) 10);
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) intArray16);
        int[] intArray18 = null;
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray16, intArray18);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 5 + "'", int17 == 5);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[-1, 0, 10, 2, 0]");
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) '#');
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) (short) 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.clone(intArray5);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 0]");
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Object[][] objArray34 = new java.lang.Object[][] { objArray32, objArray33 };
        java.lang.Object obj35 = null;
        java.lang.Object[][] objArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray34, obj35);
        char[] charArray38 = new char[] { '#' };
        java.lang.Character[] charArray39 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray34, (java.lang.Object[]) charArray39);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39, ' ');
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray27, charArray44);
        char[] charArray46 = org.apache.commons.lang3.ArrayUtils.clone(charArray44);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.subarray(charArray46, (int) (short) 1, 3);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.clone(charArray49);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray50, '#', (int) (byte) -1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, true, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        double[] doubleArray18 = new double[] { (-1), (byte) 100, 10L };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray18);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) (-1.0f));
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray14, (java.lang.Object) doubleArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 0);
        int[] intArray30 = new int[] { (byte) 0 };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray30, 0);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.add(intArray30, 0);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray30, (int) (byte) 1, (int) ' ');
        int[] intArray39 = new int[] { (byte) 0 };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray39, 0);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray39, 10, 0);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray39, 0, 1);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray39);
        int[] intArray49 = org.apache.commons.lang3.ArrayUtils.clone(intArray39);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray14, (java.lang.Object) intArray39);
        short[] shortArray52 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray39), "[0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(shortArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray52), "[1, 10, 100, 0]");
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray39, (double) 100L, (int) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) 'a');
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 10L, 7);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (int) (byte) 1, (float) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray16, 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 3, (int) (byte) -1);
        java.lang.Integer[] intArray26 = org.apache.commons.lang3.ArrayUtils.toObject(intArray20);
        int[] intArray30 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray36 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray36);
        int[] intArray43 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray37, intArray43);
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.addAll(intArray30, intArray43);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray30, (int) (byte) -1);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray30);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray20, 1, 2);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 10, 100, 100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 2, -1, -1, 10, 100]");
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18, (byte) 1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray18, (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap23 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) byteArray18);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '-1', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1, 100, 100]");
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.add(strArray6, strArray7);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 0, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray9, (java.lang.Object) floatArray17, (int) (byte) -1);
        java.lang.Comparable<java.lang.String>[][] strComparableArray20 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.Comparable<java.lang.String>[][]) strArray9);
        java.lang.String[] strArray21 = new java.lang.String[] {};
        java.lang.String[] strArray22 = new java.lang.String[] {};
        java.lang.String[] strArray23 = new java.lang.String[] {};
        java.lang.String[] strArray24 = new java.lang.String[] {};
        java.lang.String[] strArray25 = new java.lang.String[] {};
        java.lang.String[] strArray26 = new java.lang.String[] {};
        java.lang.String[][] strArray27 = new java.lang.String[][] { strArray21, strArray22, strArray23, strArray24, strArray25, strArray26 };
        java.lang.String[] strArray28 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray28);
        java.lang.String[][] strArray30 = org.apache.commons.lang3.ArrayUtils.add(strArray27, strArray28);
        float[] floatArray31 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.add(floatArray31, (float) 10L);
        float[] floatArray34 = new float[] {};
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray31, floatArray34);
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray35, (int) (byte) 0, (int) 'a');
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray30, (java.lang.Object) floatArray38, (int) (byte) -1);
        short[] shortArray45 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray45);
        short[] shortArray50 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray50);
        short[] shortArray56 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int59 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray56, (short) (byte) 0, 2);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray50, shortArray56);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray45, shortArray50);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray30, (java.lang.Object) shortArray45);
        java.lang.CharSequence[][] charSequenceArray63 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.CharSequence[][]) strArray9, (java.lang.CharSequence[][]) strArray30);
        byte[] byteArray68 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray68, (byte) 0);
        byte[] byteArray73 = new byte[] { (byte) 100, (byte) 100 };
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray73, (byte) 10, 0);
        byte[] byteArray77 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray68, byteArray73);
        byte[] byteArray78 = null;
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray77, byteArray78);
        byte[] byteArray81 = org.apache.commons.lang3.ArrayUtils.remove(byteArray77, 2);
        java.lang.Byte[] byteArray82 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray81);
        byte[] byteArray84 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray82, (byte) 1);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) strArray9, (java.lang.Object) (byte) 1);
        java.lang.String[] strArray86 = new java.lang.String[] {};
        java.lang.String[] strArray87 = new java.lang.String[] {};
        java.lang.String[] strArray88 = new java.lang.String[] {};
        java.lang.String[] strArray89 = new java.lang.String[] {};
        java.lang.String[] strArray90 = new java.lang.String[] {};
        java.lang.String[] strArray91 = new java.lang.String[] {};
        java.lang.String[][] strArray92 = new java.lang.String[][] { strArray86, strArray87, strArray88, strArray89, strArray90, strArray91 };
        java.lang.String[] strArray93 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray93);
        java.lang.String[][] strArray95 = org.apache.commons.lang3.ArrayUtils.add(strArray92, strArray93);
        java.lang.String str96 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) strArray95);
        java.lang.Comparable<java.lang.String>[][] strComparableArray97 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.Comparable<java.lang.String>[][]) strArray9, (java.lang.Comparable<java.lang.String>[][]) strArray95);
        boolean boolean98 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.Comparable<java.lang.String>[][]) strArray95);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(strComparableArray20);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertNotNull(strArray25);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertNotNull(strArray28);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(charSequenceArray63);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(byteArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray81), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertNotNull(byteArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray84), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(strArray86);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertNotNull(strArray89);
        org.junit.Assert.assertNotNull(strArray90);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertNotNull(strArray92);
        org.junit.Assert.assertNotNull(strArray93);
        org.junit.Assert.assertNotNull(strArray95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "{{},{},{},{},{},{},{}}" + "'", str96, "{{},{},{},{},{},{},{}}");
        org.junit.Assert.assertNotNull(strComparableArray97);
        org.junit.Assert.assertTrue("'" + boolean98 + "' != '" + false + "'", boolean98 == false);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        byte[][][] byteArray0 = new byte[][][] {};
        byte[][][] byteArray1 = org.apache.commons.lang3.ArrayUtils.toArray(byteArray0);
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray1);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.subarray(charArray9, 3, 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[]");
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, 6, 3);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        java.lang.Short[] shortArray35 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray35);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray35, (short) (byte) 10);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray35, (short) -1);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.add(shortArray40, (short) (byte) 100);
        int int45 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray42, (short) 0, 0);
        short[] shortArray46 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray42);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[0, 100, 10, 1, 100]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[0, 100, 10, 1, 0, 100, 10, 1, 100]");
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.add(shortArray10, 1, (short) 0);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray10, 4, (int) (short) 1);
        java.lang.Short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray16);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 0, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[]");
        org.junit.Assert.assertNotNull(shortArray17);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 4, 4, (-1) };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (byte) 0, 0);
        java.lang.Integer[] intArray13 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray4, intArray15);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray15, 3);
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray15);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 4, -1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray19);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (short) -1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 10.0]");
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        java.lang.Short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.add(shortArray24, (int) (byte) 100, (short) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray39);
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray9, '4', 3);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, ' ');
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a', (int) (byte) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(charArray9, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        short[] shortArray17 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray23 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 0, 2);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray17, shortArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray3, (int) (short) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray35 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray35);
        short[] shortArray41 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) (byte) 0, 2);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray35, shortArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray41);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray41, (short) -1, (int) (byte) 1);
        short[] shortArray50 = null;
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray41, shortArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray51, (short) 0, 0);
        short[] shortArray58 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray58);
        short[] shortArray64 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray64, (short) (byte) 0, 2);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray58, shortArray64);
        int int70 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray58, (short) (byte) 0);
        short[] shortArray75 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int78 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray75, (short) (byte) 0, 2);
        short[] shortArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray75, (short) 100);
        short[] shortArray81 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray58, shortArray80);
        short[] shortArray82 = org.apache.commons.lang3.ArrayUtils.clone(shortArray58);
        short[] shortArray84 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray58, (short) (byte) -1);
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray51, shortArray84);
        short[] shortArray88 = org.apache.commons.lang3.ArrayUtils.add(shortArray51, 1, (short) 100);
        boolean boolean89 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray88);
        short[] shortArray92 = org.apache.commons.lang3.ArrayUtils.add(shortArray3, (int) (short) 1, (short) 100);
        short[] shortArray93 = org.apache.commons.lang3.ArrayUtils.clone(shortArray3);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(shortArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray80), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray81), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray82), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray84), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertNotNull(shortArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray88), "[0, 100, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(shortArray92);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray92), "[100, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray93);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray93), "[100, 10, 100]");
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        java.lang.Float[] floatArray0 = null;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        org.junit.Assert.assertNull(floatArray1);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (-1L));
        java.lang.Long[] longArray9 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9, (long) (-1));
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.add(longArray11, 0, (long) 1);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray11, (long) (-1), (int) (byte) 1);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray11, (long) (-1));
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray19, (long) (-1));
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray21);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[10, 10, 1, 1]");
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 1);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 1, 1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 0);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 1);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.clone(byteArray38);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 10, (int) (short) 100);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.clone(byteArray38);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.contains(byteArray47, (byte) 100);
        byte[] byteArray54 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray54, (byte) 0);
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray59, (byte) 10, 0);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray54, byteArray59);
        byte[] byteArray64 = null;
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray63, byteArray64);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.remove(byteArray63, 2);
        java.lang.Byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray67);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray67, (int) (short) 0, 6);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray71);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray47, byteArray71);
        byte[] byteArray74 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray33, byteArray73);
        int int75 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray73);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 100, 100, -1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[-1, 0, 0, 1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[-1, 0, 100, 100, -1, 0, 0, 1, -1, 0, 0, 1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray14, false, (int) '4');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray4, '4');
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.addAll(charArray0, charArray6);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray7, (int) (short) -1, (int) (short) 0);
        char[] charArray11 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray11), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray11), "[]");
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        java.lang.Boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0, false);
        java.util.Map<java.lang.Object, java.lang.Object> objMap3 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray0);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray2), "[]");
        org.junit.Assert.assertNotNull(objMap3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        java.lang.Character[] charArray6 = new java.lang.Character[] { '4', ' ', '4', ' ', ' ', ' ' };
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        org.apache.commons.lang3.ArrayUtils.reverse(charArray7);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "   4 4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "   4 4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[ ,  ,  , 4,  , 4]");
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray1);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, 3, 2);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray6);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray16, (double) 0.0f);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, (int) '4', (int) ' ');
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) '#', (double) 10.0f);
        java.lang.Class<?> wildcardClass26 = doubleArray16.getClass();
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(wildcardClass26);
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray31, (long) 2);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.clone(longArray33);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[]");
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) -1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100, 3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 0);
        java.lang.Integer[] intArray9 = org.apache.commons.lang3.ArrayUtils.toObject(intArray1);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, 10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) (-1L));
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 0.0f);
        java.lang.Float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray22);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray23);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        char[] charArray42 = new char[] { ' ' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray42, '#');
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray42, '#', (int) (short) 10);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.subarray(charArray42, (int) (short) -1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray50);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray38, (java.lang.Object) charArray50);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, '4');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray54);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , #]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#]");
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray13, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray13, booleanArray21);
        java.lang.Boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        double[] doubleArray25 = new double[] { (byte) 10 };
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray26, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray26);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) booleanArray23, (java.lang.Object) doubleArray26, 4);
        boolean[] booleanArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray23);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray36 = org.apache.commons.lang3.ArrayUtils.add(booleanArray33, (int) '4', true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(booleanArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray33), "[]");
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.remove(byteArray7, (int) (short) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, 1, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, 1]");
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) 100);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(byteArray13, (byte) 100);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        byte[] byteArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray30);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray29, 2);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray33);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray33, (int) (short) 0, 6);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray37);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray37);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray37, (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.remove(byteArray37, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 100, 100]");
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray20 = org.apache.commons.lang3.ArrayUtils.add(longArray17, (int) '4', 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray38);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray38, ' ');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray47, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray47);
        char[] charArray52 = new char[] { '#' };
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.toObject(charArray52);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.clone(charArray52);
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.add(charArray54, 'a');
        char[] charArray58 = new char[] { '#' };
        java.lang.Character[] charArray59 = org.apache.commons.lang3.ArrayUtils.toObject(charArray58);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.clone(charArray58);
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.addAll(charArray54, charArray58);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.add(charArray58, '#');
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.addAll(charArray47, charArray58);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, a]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#, #]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#, #]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#, #]");
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) (byte) 1);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray19 = new boolean[] { true, true, false, true };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray19, true, (int) '4');
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray19);
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray19, false);
        boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray19);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray26, true);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray26, (int) (byte) 0, (int) '4');
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray32, 3);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, false, 10);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray26), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 7 + "'", int34 == 7);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, 0.0f, (int) ' ');
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray19, (java.lang.Object) floatArray30);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.clone(floatArray30);
        short[] shortArray37 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray37);
        short[] shortArray42 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray42);
        short[] shortArray48 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray48, (short) (byte) 0, 2);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray42, shortArray48);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray37, shortArray42);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) floatArray30, (java.lang.Object) shortArray37);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(shortArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray48), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        double[] doubleArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) '#', (double) 10);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 100);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 8);
        int[] intArray13 = org.apache.commons.lang3.ArrayUtils.clone(intArray12);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 8]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, 8]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray7 = new double[] { (-1), (byte) 100, 10L };
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray7, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray7);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray12, (double) (-1.0f));
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray12, (double) 1L);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray12, (double) 0.0f);
        double[] doubleArray20 = new double[] { (byte) 10 };
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray21, (double) ' ');
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray21);
        java.lang.Double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray21);
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray21);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray27, (-1.0d), 4, (double) 1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray27, (double) 0L);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray27);
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0, 5, (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, false);
        // The following exception was thrown during execution in test generation
        try {
            int int18 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) false);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        java.lang.reflect.Type[][][] typeArray0 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray1 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray2 = org.apache.commons.lang3.ArrayUtils.clone(typeArray1);
        float[] floatArray3 = new float[] {};
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) 10L);
        float[] floatArray7 = new float[] { (byte) -1 };
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray8, (float) (-1L));
        float[] floatArray11 = new float[] {};
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) 10L);
        float[] floatArray15 = new float[] { (byte) -1 };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray8, floatArray13);
        java.lang.Float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray13, (float) 3, (int) '4');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray1, (java.lang.Object) int21);
        java.lang.reflect.Type[][][] typeArray23 = org.apache.commons.lang3.ArrayUtils.add(typeArray0, typeArray1);
        java.lang.Object[][][] objArray24 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[][][]) typeArray0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[][][] typeArray26 = org.apache.commons.lang3.ArrayUtils.remove(typeArray0, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(typeArray0);
        org.junit.Assert.assertNotNull(typeArray1);
        org.junit.Assert.assertNotNull(typeArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(typeArray23);
        org.junit.Assert.assertNotNull(objArray24);
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray16 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray11, (int) (byte) 0, (int) '4');
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(booleanArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray16), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        int[] intArray54 = new int[] { (byte) 0 };
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray54, 0);
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.add(intArray54, 0);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.addAll(intArray50, intArray58);
        int[] intArray63 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray69 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray70 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray69);
        int[] intArray76 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean77 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray70, intArray76);
        int[] intArray78 = org.apache.commons.lang3.ArrayUtils.addAll(intArray63, intArray76);
        int[] intArray80 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray63, 2);
        int[] intArray82 = org.apache.commons.lang3.ArrayUtils.remove(intArray80, 1);
        int int84 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray82, (int) ' ');
        boolean boolean85 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray58, intArray82);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[100, 52, 0, 0]");
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray76);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray76), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray82), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[][] doubleArray28 = new java.lang.Double[][] { doubleArray15, doubleArray21, doubleArray27 };
        java.lang.Double[][] doubleArray29 = new java.lang.Double[][] {};
        java.lang.Double[][] doubleArray30 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray28, doubleArray29);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray9, (java.lang.Object) doubleArray28, (int) (short) 0);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, 'a');
        char[] charArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#]");
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        java.lang.Integer[] intArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_INTEGER_OBJECT_ARRAY;
        int[] intArray2 = new int[] { (byte) 0 };
        int int4 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray2, 0);
        java.lang.Integer[] intArray5 = org.apache.commons.lang3.ArrayUtils.toObject(intArray2);
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.clone(intArray2);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray0, (java.lang.Object) intArray2, 1);
        java.lang.Double[] doubleArray15 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) '#');
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.add(doubleArray17, (int) (short) 1, (double) 1.0f);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) -1);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray23);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int26 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray25);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray24, (java.lang.Object) floatArray25);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray25, (float) '#');
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, (int) (short) 0, (float) (short) 10);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, 0.0f);
        float[] floatArray35 = new float[] {};
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, (float) 10L);
        float[] floatArray38 = new float[] {};
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray35, floatArray38);
        float[] floatArray40 = null;
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray38, floatArray40);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray38, (float) (-1L), (int) '4');
        float[] floatArray46 = new float[] { '#' };
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, (float) (-1));
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.contains(floatArray46, (float) 6);
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray38, floatArray46);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray38);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) 1, (java.lang.Object) floatArray38);
        org.junit.Assert.assertNotNull(intArray0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[35.0]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 5);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray11, (double) 4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray18, (byte) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1, 100, 100, 0]");
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        java.lang.String str2 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 7, "{10.0,10.0,1.0,0.0,1.0,1.0,-1.0}");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "7" + "'", str2, "7");
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) doubleArray2, " ");
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 9, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "{10.0}" + "'", str8, "{10.0}");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        short[] shortArray17 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray17);
        short[] shortArray23 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) (byte) 0, 2);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray17, shortArray23);
        short[] shortArray28 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray3, shortArray23);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray3, (int) (short) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray30);
        short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (short) -1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(shortArray33, (short) (byte) -1);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) 1, 4);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.add(shortArray33, (short) (byte) 1);
        short[] shortArray46 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray46, shortArray51);
        short[] shortArray59 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray59);
        short[] shortArray65 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray65, (short) (byte) 0, 2);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray59, shortArray65);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray65);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray65, (short) -1, (int) (byte) 1);
        short[] shortArray74 = null;
        short[] shortArray75 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray65, shortArray74);
        boolean boolean76 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray46, shortArray65);
        int int78 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray65, (short) -1);
        short[] shortArray83 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray83);
        short[] shortArray86 = org.apache.commons.lang3.ArrayUtils.remove(shortArray83, 0);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray65, shortArray83);
        int int89 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray65, (short) (byte) 0);
        short[] shortArray90 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray40, shortArray65);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(shortArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray28), "[100, 10, 100, 1, 10, 100, 0]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[100, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 100, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray46), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(shortArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray65), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertNotNull(shortArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray75), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(shortArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray83), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray86), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertNotNull(shortArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray90), "[100, 100, -1, 1, 0, 100, 10, 1]");
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, 8, 8);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray16, (double) '4', (-1.0d));
        double[] doubleArray28 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray28, (double) (short) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray28, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray34, (double) 5);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray34, (int) (short) 0, 8);
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray16, doubleArray39);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.add(doubleArray39, (int) (short) 100, (double) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2 + "'", int30 == 2);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[10.0, 10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) -1);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(byteArray20, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1, 100, 100, -1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray10, 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0]");
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        int[] intArray64 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray70 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray70);
        int[] intArray77 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray71, intArray77);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.addAll(intArray64, intArray77);
        int[] intArray81 = org.apache.commons.lang3.ArrayUtils.remove(intArray64, (int) (short) 1);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray81, (int) (byte) -1);
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.clone(intArray81);
        int[] intArray85 = org.apache.commons.lang3.ArrayUtils.addAll(intArray60, intArray84);
        int[] intArray87 = org.apache.commons.lang3.ArrayUtils.remove(intArray85, (int) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray85);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[52, 100, 0]");
        org.junit.Assert.assertNotNull(intArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray87), "[0, 52]");
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray5 = new double[] { (byte) 10 };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 2);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 100L, (double) 4);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 'a');
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) (short) 1);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) 10L, 8, (double) 'a');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.clone(byteArray9);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray9);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100]");
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.remove(shortArray4, 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray7, (short) (byte) 1, (int) (byte) 100);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.add(shortArray7, (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[1, 1, 10, 1]");
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray38);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray38, ' ');
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray47, '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray47);
        char[] charArray51 = org.apache.commons.lang3.ArrayUtils.clone(charArray47);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray51);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray51), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray51), "[#]");
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        java.lang.Short[] shortArray33 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray33);
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        java.lang.Object[] objArray10 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[]) shortArray6);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[10, 100, -1, 1, 0, 0]");
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int[] intArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray47, (int) (byte) 100);
        int[] intArray59 = new int[] { (byte) 0 };
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray59, 0);
        int[] intArray63 = org.apache.commons.lang3.ArrayUtils.add(intArray59, 0);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray59, (int) (short) 100);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.contains(intArray59, (int) (short) 100);
        int[] intArray68 = org.apache.commons.lang3.ArrayUtils.clone(intArray59);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray47, intArray59);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray59, 10, (int) '#');
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(intArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray57), "[0]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(intArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(intArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray68), "[0]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, 1.0d, 2, (double) '4');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) 10.0f, (double) (short) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5, 0);
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.clone(intArray9);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(intArray10, 10);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 1);
        short[] shortArray35 = new short[] { (short) 0, (byte) 0, (byte) -1, (short) 100, (short) 10 };
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray35, shortArray40);
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray40, (short) -1, (int) (short) 0);
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray40, 2, (int) (byte) -1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray29, shortArray50);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[10, 1, 1]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[0, 0, -1, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 1);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray4 = org.apache.commons.lang3.ArrayUtils.remove(longArray2, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        java.lang.Integer[][][] intArray0 = null;
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 100 };
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 1, 100 };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 1, 100 };
        java.lang.Integer[][] intArray10 = new java.lang.Integer[][] { intArray3, intArray6, intArray9 };
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray10);
        java.lang.Object[] objArray14 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.Object[]) intArray10, 100, 1);
        java.lang.Integer[][][] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray0, intArray10);
        java.lang.Integer[][][] intArray16 = null;
        java.lang.Integer[] intArray19 = new java.lang.Integer[] { 1, 100 };
        java.lang.Integer[] intArray22 = new java.lang.Integer[] { 1, 100 };
        java.lang.Integer[] intArray25 = new java.lang.Integer[] { 1, 100 };
        java.lang.Integer[][] intArray26 = new java.lang.Integer[][] { intArray19, intArray22, intArray25 };
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray26);
        java.lang.Object[] objArray30 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.Object[]) intArray26, 100, 1);
        java.lang.Integer[][][] intArray31 = org.apache.commons.lang3.ArrayUtils.add(intArray16, intArray26);
        java.lang.Integer[][][] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray0, intArray26);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(objArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray30), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray30), "[]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertNotNull(intArray32);
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray9, (byte) 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 10);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 0);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10, 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray30);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray30, 0, (int) (byte) 10);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.add(byteArray30, (byte) 100);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.clone(byteArray39);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray40);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 100 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10, 0);
        byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.add(byteArray44, (byte) 1);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray44, (byte) 1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray40, byteArray44);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray44);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray44, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 10]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 100, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[100, 100]");
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = new long[] { (byte) -1, 10 };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        java.lang.Long[] longArray24 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24, (long) (-1));
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, 0, (long) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) (-1), (int) (byte) 1);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray26, (long) (-1));
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray26);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (int) (short) 0, 0L);
        java.lang.Long[] longArray46 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray46, (long) (-1));
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray39, longArray48);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray48);
        long[] longArray54 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) (byte) 10, 10);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(longArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray54), "[]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        double[] doubleArray0 = null;
        short[] shortArray5 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray10 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray15 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray20 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray25 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray30 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray31 = new short[][] { shortArray5, shortArray10, shortArray15, shortArray20, shortArray25, shortArray30 };
        java.lang.Long[] longArray38 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray38, (long) (-1));
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray40, (long) '#');
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.subarray(longArray40, (int) '4', (int) (byte) 10);
        short[][] shortArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray31, (java.lang.Object) longArray45);
        java.lang.Double[] doubleArray53 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray53, (double) '#');
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.add(doubleArray55, (int) (short) 1, (double) 1.0f);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray58, (double) (short) -1);
        double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray58);
        java.lang.Double[] doubleArray62 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray61);
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int64 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray63);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray62, (java.lang.Object) floatArray63);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray46, (java.lang.Object[]) doubleArray62);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray62, (double) (short) 100);
        char[] charArray70 = new char[] { '#' };
        java.lang.Character[] charArray71 = org.apache.commons.lang3.ArrayUtils.toObject(charArray70);
        char[] charArray72 = org.apache.commons.lang3.ArrayUtils.clone(charArray70);
        char[] charArray74 = org.apache.commons.lang3.ArrayUtils.add(charArray72, 'a');
        char[] charArray76 = new char[] { '#' };
        java.lang.Character[] charArray77 = org.apache.commons.lang3.ArrayUtils.toObject(charArray76);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.clone(charArray76);
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.addAll(charArray72, charArray76);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) doubleArray68, (java.lang.Object) charArray76);
        int int84 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray68, (double) 1, (int) '4', (double) 0);
        double[] doubleArray85 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray0, doubleArray68);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray88 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (int) ' ', (-1.0d));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 32, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray25), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray31);
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[]");
        org.junit.Assert.assertNotNull(shortArray46);
        org.junit.Assert.assertNotNull(doubleArray53);
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray61), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray62);
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#]");
        org.junit.Assert.assertNotNull(charArray71);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertNotNull(charArray74);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray74), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray74), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray74), "[#, a]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 4 + "'", int84 == 4);
        org.junit.Assert.assertNotNull(doubleArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray85), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray7, (byte) 100, (int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.remove(byteArray7, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 10, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13, (double) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap16 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) doubleArray13);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '10.0', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) '4');
        java.lang.Integer[] intArray24 = org.apache.commons.lang3.ArrayUtils.toObject(intArray19);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, (int) (byte) 0, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 52]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        java.lang.Class[][] classArray1 = new java.lang.Class[0][];
        @SuppressWarnings("unchecked")
        java.lang.Class<?>[][] wildcardClassArray2 = (java.lang.Class<?>[][]) classArray1;
        java.lang.Class<?>[] wildcardClassArray3 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.add(longArray12, 0, (long) 1);
        java.lang.Class<?> wildcardClass16 = longArray12.getClass();
        java.lang.Class<?>[] wildcardClassArray17 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray3, wildcardClass16);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray3);
        java.lang.Long[] longArray19 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        int[] intArray23 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray29 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray29);
        int[] intArray36 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray30, intArray36);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.addAll(intArray23, intArray36);
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray36, 1);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray19, (java.lang.Object) intArray36);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) wildcardClassArray3, (java.lang.Object[]) longArray19);
        java.lang.Class<?>[][] wildcardClassArray43 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray2, wildcardClassArray3);
        java.lang.Class<?>[][] wildcardClassArray44 = org.apache.commons.lang3.ArrayUtils.clone(wildcardClassArray2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.reflect.Type[][] typeArray46 = org.apache.commons.lang3.ArrayUtils.remove((java.lang.reflect.Type[][]) wildcardClassArray44, (int) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 52, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(classArray1);
        org.junit.Assert.assertNotNull(wildcardClassArray2);
        org.junit.Assert.assertNotNull(wildcardClassArray3);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass16);
        org.junit.Assert.assertNotNull(wildcardClassArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(wildcardClassArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray44);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        int[] intArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(intArray0, 5);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray7, 4, (long) 100);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) 6);
        long[] longArray67 = org.apache.commons.lang3.ArrayUtils.remove(longArray7, 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[0, 100, -1, -1, 100, 100, 100]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[100, -1, -1, 100, 100]");
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray7);
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray19, (float) 1);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray7, floatArray19);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray28);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[1.0]");
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.add(charArray27, 'a');
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray27);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.remove(charArray27, 0);
        char[] charArray38 = new char[] { '#' };
        java.lang.Character[] charArray39 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.clone(charArray38);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.add(charArray40, 'a');
        char[] charArray49 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray49, '4', (int) (byte) 100);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray42, charArray49);
        char[] charArray55 = org.apache.commons.lang3.ArrayUtils.add(charArray42, '4');
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.clone(charArray42);
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.clone(charArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray36, charArray57);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#, a]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#]");
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#, a]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "#a4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "#a4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#, a, 4]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#, a]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#, a]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray1, (int) (byte) -1, (int) (byte) 1);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        double[] doubleArray22 = new double[] { (byte) 10 };
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray22);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray17);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray14, (double) 100, (double) (short) 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) 1L);
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, (-1.0d));
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0, -1.0]");
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        double[] doubleArray13 = new double[] { (byte) 10 };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray14, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, (double) (byte) 0);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, 0.0d, (int) ' ');
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray14);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) (-1));
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) (-1), (int) (byte) 0, (double) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        double[] doubleArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray0, (double) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray6, (int) '4');
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (byte) 100, 2);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, (int) (short) 10);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray6, (int) (byte) 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        char[] charArray42 = new char[] { ' ' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray42, '#');
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray42, '#', (int) (short) 10);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.subarray(charArray42, (int) (short) -1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray50);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray38, (java.lang.Object) charArray50);
        char[] charArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, '4');
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray38, '#');
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , #]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#]");
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        short[] shortArray4 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 0, 2);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 100);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray4, 10, (int) (short) 10);
        java.lang.Short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray12);
        java.lang.Long[] longArray14 = new java.lang.Long[] {};
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray14, (java.lang.Object) byteArray29);
        byte[] byteArray35 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray35, (byte) 0);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray35, (byte) 1);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray35);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray29);
        java.lang.Long[] longArray42 = new java.lang.Long[] {};
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray42);
        byte[] byteArray48 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray48, (byte) 0);
        byte[] byteArray53 = new byte[] { (byte) 100, (byte) 100 };
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray53, (byte) 10, 0);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray48, byteArray53);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray42, (java.lang.Object) byteArray57);
        byte[] byteArray63 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray63, (byte) 0);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray63, (byte) 1);
        boolean boolean68 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray57, byteArray63);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray57);
        byte[] byteArray71 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray57, (byte) 10);
        boolean boolean72 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray71);
        byte[] byteArray73 = org.apache.commons.lang3.ArrayUtils.clone(byteArray71);
        int int75 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) shortArray13, (java.lang.Object) byteArray71, 10);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(byteArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray71), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(byteArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + (-1) + "'", int75 == (-1));
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = new long[] { (byte) -1, 10 };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        java.lang.Long[] longArray24 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24, (long) (-1));
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.add(longArray26, 0, (long) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray26, (long) (-1), (int) (byte) 1);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray26, (long) (-1));
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray26);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.add(longArray26, (int) (short) 0, 0L);
        java.lang.Long[] longArray46 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray46, (long) (-1));
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray39, longArray48);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray48);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.contains(longArray48, (long) (byte) 10);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray48, (long) (short) -1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2 + "'", int32 == 2);
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 2 + "'", int55 == 2);
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray20 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (short) -1);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        double[] doubleArray28 = new double[] { (byte) 10 };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray29);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray29, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray29, (double) (byte) 0);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray29, 0.0d, (int) ' ');
        double[] doubleArray40 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray29);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray40, 10.0d, (double) 1);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray40, 1.0d, (int) (short) 1);
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray11, doubleArray40);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray40, (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2 + "'", int22 == 2);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray40), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 52.0, -1.0, -1.0, 1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 4 + "'", int49 == 4);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, 0.0d);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, 0.0d, 6, (double) (byte) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 5, 10.0d);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) (-1L));
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 0.0f);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) 3);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0]");
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) (byte) 10);
        java.lang.Class<?>[] wildcardClassArray34 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray38 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray38);
        short[] shortArray44 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray44, (short) (byte) 0, 2);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray38, shortArray44);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray38, (short) (byte) 0);
        short[] shortArray55 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int58 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray55, (short) (byte) 0, 2);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray55, (short) 100);
        short[] shortArray61 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray60);
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray34, (java.lang.Object) shortArray61);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray61, (short) (byte) 1);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray64);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray64, (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.remove(shortArray64, (int) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
        org.junit.Assert.assertNotNull(wildcardClassArray34);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray44), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray61), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[100, 100, 10, 0]");
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        byte[] byteArray2 = new byte[] { (byte) 1, (byte) 10 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) -1);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 10]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        boolean[][] booleanArray0 = new boolean[][] {};
        boolean[][] booleanArray1 = new boolean[][] {};
        boolean[][] booleanArray2 = new boolean[][] {};
        boolean[][] booleanArray3 = new boolean[][] {};
        boolean[][] booleanArray4 = new boolean[][] {};
        boolean[][][] booleanArray5 = new boolean[][][] { booleanArray0, booleanArray1, booleanArray2, booleanArray3, booleanArray4 };
        boolean[][][] booleanArray6 = new boolean[][][] {};
        java.lang.Double[] doubleArray10 = new java.lang.Double[] { 100.0d, 1.0d, 100.0d };
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray10);
        double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.add(doubleArray11, (double) (byte) 0);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray13, 1, 0.0d);
        boolean[][][] booleanArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, (java.lang.Object) 1);
        boolean[][][] booleanArray18 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray5, booleanArray6);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertNotNull(booleanArray2);
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[100.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray13), "[100.0, 1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[100.0, 0.0, 1.0, 100.0, 0.0]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray13, (byte) 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (byte) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray8, (java.lang.Object) byteArray17, 4);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 10);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray20, (byte) 100);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(byteArray20, (byte) -1);
        byte[] byteArray29 = new byte[] { (byte) 100, (byte) 100 };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray29, (byte) 10, 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray29, (byte) 1);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.add(byteArray34, (int) (short) 0, (byte) 1);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray37, (byte) -1);
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.clone(byteArray37);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray40);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray40);
        byte[] byteArray45 = new byte[] { (byte) 100, (byte) 100 };
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray45, (byte) 10, 0);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.add(byteArray45, (byte) 1);
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.remove(byteArray50, (int) (short) 1);
        boolean boolean53 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray50);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1, 0, 10]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[100, 1]");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#', (int) 'a');
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, '4');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray38);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38);
        short[] shortArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) 10);
        java.lang.Short[] shortArray49 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray50 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49);
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49);
        short[] shortArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49, (short) 1);
        short[] shortArray55 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49, (short) 10);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray49);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray56, (short) (byte) 10);
        short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray42, shortArray58);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray42), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray49);
        org.junit.Assert.assertNotNull(shortArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray50), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray53), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray55), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray59), "[100, 10, 100, 100, -1, 1, 0, 0]");
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        java.lang.Integer[] intArray6 = org.apache.commons.lang3.ArrayUtils.toObject(intArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, 7);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray5, (int) (byte) -1);
        int[] intArray12 = org.apache.commons.lang3.ArrayUtils.add(intArray5, (int) (byte) 1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, 0, 1]");
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.CharSequence[]) strArray0);
        double[] doubleArray3 = new double[] { (byte) 10 };
        double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray3);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray4);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray4, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray11 = new double[] { (byte) 10 };
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        double[] doubleArray18 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray18, (double) (short) -1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray18);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray4, doubleArray18);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray4);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray4, (double) 100L, (int) '#', (double) (byte) 1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) strArray0, (java.lang.Object) doubleArray4);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) 1);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 1, 1);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray33, (byte) 0);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray33, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 100, 100, -1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        java.lang.Double[] doubleArray1 = new java.lang.Double[] { 10.0d };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray1);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 1L);
        double[] doubleArray14 = new double[] { (byte) 10 };
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray14);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray15);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray16, (double) 0.0f);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray16, (int) '4', (int) ' ');
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.add(doubleArray22, (-1.0d));
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray22, (int) '4', (int) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[]");
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (short) -1);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.clone(longArray10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[0, 100, -1, -1, 100, 100]");
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        java.lang.Character[] charArray14 = new java.lang.Character[] { '4' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray14, 'a');
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) booleanArray9, (java.lang.Object) charArray17);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray17, '4', 10);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray17, 'a');
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[4]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[4]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[4]");
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray15, (int) '#', 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray19, 10, (int) (byte) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[]");
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        short[] shortArray35 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray35);
        short[] shortArray41 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) (byte) 0, 2);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray35, shortArray41);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray41);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray41, (short) -1, (int) (byte) 1);
        short[] shortArray50 = null;
        short[] shortArray51 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray41, shortArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray19, (java.lang.Object) shortArray41);
        int int55 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray41, (short) (byte) 0, 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        java.lang.Character[] charArray4 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray9 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray14 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray19 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray24 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[] charArray29 = new java.lang.Character[] { '#', '#', '#', ' ' };
        java.lang.Character[][] charArray30 = new java.lang.Character[][] { charArray4, charArray9, charArray14, charArray19, charArray24, charArray29 };
        java.lang.Character[][] charArray31 = org.apache.commons.lang3.ArrayUtils.toArray(charArray30);
        java.lang.Byte[][] byteArray32 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray38 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray44 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray50 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray56 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray62 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray63 = new java.lang.Byte[][] { byteArray38, byteArray44, byteArray50, byteArray56, byteArray62 };
        java.lang.Byte[][] byteArray64 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray32, byteArray63);
        long[] longArray67 = new long[] { (byte) -1, 10 };
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.clone(longArray67);
        boolean boolean69 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray32, (java.lang.Object) longArray67);
        int int71 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray32, (java.lang.Object) '4');
        java.io.Serializable[][] serializableArray72 = org.apache.commons.lang3.ArrayUtils.addAll((java.io.Serializable[][]) charArray30, (java.io.Serializable[][]) byteArray32);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray77, (byte) 0);
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray82, (byte) 10, 0);
        byte[] byteArray87 = org.apache.commons.lang3.ArrayUtils.add(byteArray82, (byte) 1);
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray79, byteArray87);
        byte[] byteArray89 = org.apache.commons.lang3.ArrayUtils.clone(byteArray79);
        byte[] byteArray91 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray79, (byte) 0);
        int int92 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) serializableArray72, (java.lang.Object) byteArray91);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray62);
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertNotNull(longArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray67), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(serializableArray72);
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArray87);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray87), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertNotNull(byteArray89);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray89), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[-1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        java.lang.Byte[][] byteArray0 = new java.lang.Byte[][] {};
        java.lang.Byte[] byteArray6 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray12 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray18 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray24 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[] byteArray30 = new java.lang.Byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 1, (byte) 1 };
        java.lang.Byte[][] byteArray31 = new java.lang.Byte[][] { byteArray6, byteArray12, byteArray18, byteArray24, byteArray30 };
        java.lang.Byte[][] byteArray32 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray0, byteArray31);
        long[] longArray35 = new long[] { (byte) -1, 10 };
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.clone(longArray35);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) byteArray0, (java.lang.Object) longArray35);
        java.lang.Long[] longArray44 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray46 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray44, (long) (-1));
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.add(longArray46, 0, (long) 1);
        int int52 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray46, (long) (-1), (int) (byte) 1);
        long[] longArray53 = new long[] {};
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.contains(longArray53, (long) (short) 1);
        long[] longArray56 = org.apache.commons.lang3.ArrayUtils.addAll(longArray46, longArray53);
        java.lang.Long[] longArray63 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray63, (long) (-1));
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray65, (long) '#');
        long[] longArray70 = org.apache.commons.lang3.ArrayUtils.subarray(longArray65, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray77 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray79 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray77, (long) (-1));
        int int81 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray79, (long) '#');
        long[] longArray82 = org.apache.commons.lang3.ArrayUtils.addAll(longArray70, longArray79);
        long[] longArray85 = new long[] { (byte) -1, 10 };
        long[] longArray86 = org.apache.commons.lang3.ArrayUtils.clone(longArray85);
        boolean boolean87 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray70, longArray85);
        long[] longArray88 = org.apache.commons.lang3.ArrayUtils.addAll(longArray56, longArray85);
        long[] longArray90 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray85, (long) ' ');
        boolean boolean91 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray35, longArray90);
        int int93 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray90, 0L);
        long[] longArray95 = org.apache.commons.lang3.ArrayUtils.add(longArray90, (long) 7);
        int int98 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray90, 100L, (int) '#');
        org.junit.Assert.assertNotNull(byteArray0);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray35), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertNotNull(longArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray46), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 2 + "'", int52 == 2);
        org.junit.Assert.assertNotNull(longArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray53), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(longArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray56), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertNotNull(longArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray70), "[]");
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertNotNull(longArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray79), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + (-1) + "'", int81 == (-1));
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray85), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray86), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(longArray88);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray88), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray90), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + (-1) + "'", int93 == (-1));
        org.junit.Assert.assertNotNull(longArray95);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray95), "[-1, 10, 7]");
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + (-1) + "'", int98 == (-1));
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (float) (-1));
        java.lang.Float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray5);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0, -1.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        java.lang.Long[] longArray16 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (-1));
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray18, (long) (short) -1, 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) ' ');
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray18);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray18, (long) '#');
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.remove(longArray18, (int) (byte) 0);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray18);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray29);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray44, (long) (byte) -1);
        long[] longArray48 = null;
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.addAll(longArray44, longArray48);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray44, (long) (short) 1);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[]");
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        java.lang.String[] strArray0 = new java.lang.String[] {};
        java.lang.String[] strArray1 = new java.lang.String[] {};
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray0, strArray1, strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[] strArray7 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) strArray7);
        java.lang.String[][] strArray9 = org.apache.commons.lang3.ArrayUtils.add(strArray6, strArray7);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray14, (int) (byte) 0, (int) 'a');
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray9, (java.lang.Object) floatArray17, (int) (byte) -1);
        short[] shortArray24 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray24);
        short[] shortArray29 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray29);
        short[] shortArray35 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray35, (short) (byte) 0, 2);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray29, shortArray35);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray24, shortArray29);
        int int41 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) strArray9, (java.lang.Object) shortArray24);
        java.lang.String[][] strArray44 = org.apache.commons.lang3.ArrayUtils.subarray(strArray9, 7, (int) (byte) 10);
        java.lang.Comparable<java.lang.String>[][] strComparableArray45 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Comparable<java.lang.String>[][]) strArray44);
        java.lang.reflect.Type[][][] typeArray46 = new java.lang.reflect.Type[][][] {};
        java.lang.reflect.Type[][] typeArray47 = new java.lang.reflect.Type[][] {};
        java.lang.reflect.Type[][] typeArray48 = org.apache.commons.lang3.ArrayUtils.clone(typeArray47);
        float[] floatArray49 = new float[] {};
        float[] floatArray51 = org.apache.commons.lang3.ArrayUtils.add(floatArray49, (float) 10L);
        float[] floatArray53 = new float[] { (byte) -1 };
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray51, floatArray53);
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray54, (float) (-1L));
        float[] floatArray57 = new float[] {};
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.add(floatArray57, (float) 10L);
        float[] floatArray61 = new float[] { (byte) -1 };
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray59, floatArray61);
        boolean boolean63 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray54, floatArray59);
        java.lang.Float[] floatArray64 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray59);
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray59, (float) 3, (int) '4');
        int int68 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) typeArray47, (java.lang.Object) int67);
        java.lang.reflect.Type[][][] typeArray69 = org.apache.commons.lang3.ArrayUtils.add(typeArray46, typeArray47);
        java.lang.Object[][][] objArray70 = org.apache.commons.lang3.ArrayUtils.toArray((java.lang.Object[][][]) typeArray46);
        int int72 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strComparableArray45, (java.lang.Object) objArray70, 0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(shortArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray35), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(strArray44);
        org.junit.Assert.assertNotNull(strComparableArray45);
        org.junit.Assert.assertNotNull(typeArray46);
        org.junit.Assert.assertNotNull(typeArray47);
        org.junit.Assert.assertNotNull(typeArray48);
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray51), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray53), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray61), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(floatArray64);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(typeArray69);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (short) (byte) 1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (int) (short) 0, (short) (byte) 1);
        int int38 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) shortArray37);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.remove(longArray60, (int) (short) 0);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray62, (long) 1, (int) (byte) 0);
        long[] longArray68 = org.apache.commons.lang3.ArrayUtils.subarray(longArray62, (int) (short) 1, 4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(longArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray68), "[-1, -1, 100]");
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        java.lang.Byte[] byteArray0 = null;
        byte[] byteArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray0, (byte) 0);
        org.junit.Assert.assertNull(byteArray2);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        long[] longArray2 = new long[] { (byte) -1, 10 };
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray12);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.add(longArray12, (long) 5);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray3, longArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) (-1), 9);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[1, 1, 10, -1, 10, -1, 5]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 5 + "'", int20 == 5);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) (byte) 100);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100]");
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 1);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray19);
        byte[] byteArray25 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray25, (byte) 0);
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray30, (byte) 10, 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray30);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray30, 0, (int) (byte) 10);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray20, byteArray37);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        java.util.Map<java.lang.Object, java.lang.Object> objMap19 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertNotNull(objMap19);
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (-1.0f), (int) (short) 100);
        java.lang.Double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray43, (double) 'a');
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray43, (double) 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray45), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray5, 2);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) (byte) 1, 8);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, 'a', (int) (byte) 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray12 = org.apache.commons.lang3.ArrayUtils.remove(charArray3, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        char[] charArray0 = null;
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.subarray(charArray0, (int) '#', (int) '4');
        org.junit.Assert.assertNull(charArray3);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.subarray(intArray20, (int) '4', (int) 'a');
        java.lang.Integer[] intArray24 = org.apache.commons.lang3.ArrayUtils.toObject(intArray23);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[]");
        org.junit.Assert.assertNotNull(intArray24);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        double[] doubleArray2 = new double[] { (byte) 100, (-1.0d) };
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray2);
        double[] doubleArray5 = new double[] { (byte) 10 };
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray2, doubleArray5);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 2);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) 100L, (double) 4);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray5, (double) (byte) 100);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.add(doubleArray14, (double) 0.0f);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) (byte) 0, 5, (double) (byte) 100);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray16, (double) 10, (-1));
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[100.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0, 100.0, 0.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(doubleArray24);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0, 1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray18, "hi!");
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.remove(byteArray18, 4);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, 9, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,0,0,1,100,100}" + "'", str23, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1, 100]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        float[] floatArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, (float) (-1L));
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray16, 0.0f);
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.clone(floatArray22);
        java.lang.String str25 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray23, "{{},{},{},{},{},{},{}}");
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.add(floatArray26, (float) 100);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "{10.0}" + "'", str25, "{10.0}");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, 100.0]");
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        java.util.Map<java.lang.Object, java.lang.Object> objMap1 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) strArray0);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(objMap1);
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 100, (int) (short) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) (byte) 10, 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, 4, 8);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray15);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray16, (int) (short) 0, 100);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 10);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 0);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) ' ');
        int[] intArray58 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 10);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.clone(intArray1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 10]");
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) (-1.0f));
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) 1L);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) 0.0f);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray17);
        java.lang.Double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray17);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray17);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray17, 10.0d);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) (short) 10, (int) (byte) -1, (double) 1.0f);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[-1.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.lang.Class<?>[] wildcardClassArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray22 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray22, (long) (-1));
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray24, 0, (long) 1);
        java.lang.Class<?> wildcardClass28 = longArray24.getClass();
        java.lang.Class<?>[] wildcardClassArray29 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray15, wildcardClass28);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray30 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.AnnotatedElement[]) wildcardClassArray0, (java.lang.reflect.AnnotatedElement[]) wildcardClassArray29);
        java.lang.Boolean[] booleanArray37 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray37);
        java.lang.Boolean[] booleanArray39 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray38);
        boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.add(booleanArray38, true);
        java.lang.Boolean[] booleanArray42 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray41);
        boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray42);
        java.lang.Class<?> wildcardClass44 = booleanArray43.getClass();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.Class<?>[] wildcardClassArray45 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray29, 6, wildcardClass44);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 6, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(annotatedElementArray30);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray39);
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray41), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray42);
        org.junit.Assert.assertNotNull(booleanArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray43), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(wildcardClass44);
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray2, (float) ' ');
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, true);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.add(booleanArray4, 0, true);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray13, true, 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray13, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, 0, true);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.add(booleanArray13, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, true, false, false, false]");
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.add(shortArray3, (short) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray17);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.clone(shortArray17);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 100, 10, 100]");
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.io.Serializable[] serializableArray17 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray14, (int) '4', (int) (byte) 100);
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray21 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray21);
        float[] floatArray23 = null;
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (-1L), (int) '4');
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray14, (java.lang.Object) floatArray21);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray21, (float) 'a', (int) (byte) 1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) (short) -1);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.clone(floatArray21);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(serializableArray17);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[]");
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) ' ', (double) (-1.0f));
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) 10L);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) 10, (double) (short) 10);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, 1.0d, (double) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray4, (float) 0L);
        java.lang.Object[] objArray8 = null;
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        java.lang.Float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray19);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray8, (java.lang.Object) floatArray24);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray24, (float) ' ');
        java.lang.Float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray27);
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray4, floatArray27);
        float[] floatArray30 = new float[] {};
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, (float) 10L);
        float[] floatArray34 = new float[] { (byte) -1 };
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray34);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray35, (float) (-1L));
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray35, (int) (byte) 0, 0);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, (float) (short) 10);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) floatArray27, (java.lang.Object) floatArray42);
        float[] floatArray44 = new float[] {};
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.add(floatArray44, (float) 10L);
        float[] floatArray48 = new float[] { (byte) -1 };
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray46, floatArray48);
        int int51 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) 1);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) (-1L));
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray46, (float) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray46);
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray42, floatArray46);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[10.0, -1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[10.0, -1.0, 10.0, 10.0]");
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        int int9 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) 100L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray13 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray13);
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray5, floatArray10);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(floatArray15, (float) (short) 1);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        double[] doubleArray0 = null;
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.add(doubleArray0, (double) (-1.0f));
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray0, (double) (byte) 0, (double) ' ');
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[-1.0]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        // The following exception was thrown during execution in test generation
        try {
            float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray5, (int) (short) 100, (float) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        int[] intArray0 = null;
        java.lang.Integer[] intArray6 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray6);
        int[] intArray13 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray7, intArray13);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray7, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray7);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.subarray(intArray7, 0, (int) (byte) 0);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray20, 1);
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.subarray(intArray22, 5, (int) (byte) -1);
        int[] intArray26 = org.apache.commons.lang3.ArrayUtils.addAll(intArray0, intArray25);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray13), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[]");
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[]");
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (short) (byte) 1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (int) (short) 0, (short) (byte) 1);
        int int40 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray30, (short) -1, (int) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 1, 1, 10]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 3, (double) (byte) 100);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) '#');
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray19, (short) 1);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray24, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[0, 100, 10]");
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[0, 100, 10]");
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        java.lang.Byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray17);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray17, (int) (short) 0, 6);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray21);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray21, (byte) -1, (int) 'a');
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        java.lang.Long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toObject(longArray13);
        float[] floatArray27 = new float[] {};
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.add(floatArray27, (float) 10L);
        float[] floatArray31 = new float[] { (byte) -1 };
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray31);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray32, (float) (-1L));
        float[] floatArray35 = new float[] {};
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, (float) 10L);
        float[] floatArray39 = new float[] { (byte) -1 };
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray37, floatArray39);
        int int42 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray37, (float) 1);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray37);
        float[] floatArray44 = new float[] {};
        float[] floatArray46 = org.apache.commons.lang3.ArrayUtils.add(floatArray44, (float) 10L);
        float[] floatArray48 = new float[] { (byte) -1 };
        float[] floatArray49 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray46, floatArray48);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray49, (float) (-1L));
        float[] floatArray52 = new float[] {};
        float[] floatArray54 = org.apache.commons.lang3.ArrayUtils.add(floatArray52, (float) 10L);
        float[] floatArray56 = new float[] { (byte) -1 };
        float[] floatArray57 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray54, floatArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray49, floatArray54);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray32, floatArray54);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) longArray26, (java.lang.Object) boolean59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26);
        long[] longArray64 = org.apache.commons.lang3.ArrayUtils.subarray(longArray61, 3, (int) (byte) 1);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(floatArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray44), "[]");
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray57), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + (-1) + "'", int60 == (-1));
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertNotNull(longArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray64), "[]");
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7, false);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray10);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray10, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, false, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) 1);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f, (int) (short) 0);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (byte) 10);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        boolean[] booleanArray20 = new boolean[] { true, true, false, true };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray20, true, (int) '4');
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) int23);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15, (double) 2);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray26, (double) 1);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray4, (short) 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 1, 1, 10]");
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray9, (double) (-1), (double) 4);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, 10.0d);
        java.lang.Double[] doubleArray16 = new java.lang.Double[] { 10.0d };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        double[] doubleArray19 = new double[] { (byte) 10 };
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray20);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray20);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray17, doubleArray20);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray20, (double) 1L);
        double[] doubleArray29 = new double[] { (byte) 10 };
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray29);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray30);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 0.0d, (double) (-1.0f));
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray31, 7, 2);
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray9, doubleArray31);
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray31, (double) (byte) -1);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray41, (double) 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        byte[] byteArray5 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[][] byteArray12 = new byte[][] { byteArray5, byteArray11 };
        byte[][][] byteArray13 = new byte[][][] { byteArray12 };
        byte[] byteArray19 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[][] byteArray26 = new byte[][] { byteArray19, byteArray25 };
        byte[][][] byteArray27 = new byte[][][] { byteArray26 };
        byte[] byteArray33 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[][] byteArray40 = new byte[][] { byteArray33, byteArray39 };
        byte[][][] byteArray41 = new byte[][][] { byteArray40 };
        byte[] byteArray47 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[] byteArray53 = new byte[] { (byte) 1, (byte) 1, (byte) 0, (byte) 100, (byte) 1 };
        byte[][] byteArray54 = new byte[][] { byteArray47, byteArray53 };
        byte[][][] byteArray55 = new byte[][][] { byteArray54 };
        byte[][][][] byteArray56 = new byte[][][][] { byteArray13, byteArray27, byteArray41, byteArray55 };
        byte[] byteArray59 = new byte[] { (byte) 100, (byte) 100 };
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray59, (byte) 10, 0);
        byte[] byteArray64 = org.apache.commons.lang3.ArrayUtils.add(byteArray59, (byte) 1);
        byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.add(byteArray64, (int) (short) 0, (byte) 1);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.add(byteArray64, (byte) 10);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray64, (int) (byte) 10, 10);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray77, (byte) 0);
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray82, (byte) 10, 0);
        byte[] byteArray86 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray77, byteArray82);
        byte[] byteArray87 = null;
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray86, byteArray87);
        byte[] byteArray90 = org.apache.commons.lang3.ArrayUtils.remove(byteArray86, 2);
        byte[] byteArray91 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray64, byteArray86);
        byte[][][][] byteArray92 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray56, (java.lang.Object) byteArray86);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray5), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[1, 1, 0, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertNotNull(byteArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray59), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(byteArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray64), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray67), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray91), "[100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray92);
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray8 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) (short) -1);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray1, doubleArray8);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        java.lang.Double[] doubleArray13 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) 1, (int) (short) -1, (double) 10);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray12, (double) (byte) 100);
        java.lang.Object[] objArray20 = null;
        java.lang.Double[] doubleArray27 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray27, (double) '#');
        double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.add(doubleArray29, (int) (short) 1, (double) 1.0f);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray32, (double) (short) -1);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        int int36 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray20, (java.lang.Object) doubleArray35);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray35, 10.0d, (int) '4');
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray19, doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertNotNull(doubleArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray29), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 6 + "'", int39 == 6);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) (byte) 10, 0, (double) 1);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray9, (double) 10, (double) (-1.0f));
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray9);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, 0.0d);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray14, (int) (byte) 10, 1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray20);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, 100.0d, 0);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.add(doubleArray20, (double) (short) 1);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, (double) 2);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 1.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[1.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[1.0, 2.0]");
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (-1L));
        long[] longArray4 = org.apache.commons.lang3.ArrayUtils.add(longArray2, (long) 100);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[-1]");
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[-1, 100]");
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray4, (int) (short) 0, (int) ' ');
        java.lang.Class<?> wildcardClass11 = booleanArray10.getClass();
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(wildcardClass11);
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray18);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 0L);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray12);
        java.lang.Double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        java.lang.Double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray17);
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        int int4 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) charArray2, (java.lang.Object) (short) 10);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray2);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray2, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        java.lang.Short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray27);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray59);
        long[] longArray61 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray61, (long) 1);
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray63, (long) 2);
        int int68 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray63, (long) (byte) 10, (int) (short) 1);
        long[] longArray71 = org.apache.commons.lang3.ArrayUtils.subarray(longArray63, 10, 0);
        int int73 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray59, (java.lang.Object) longArray63, 100);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(longArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray61), "[]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[]");
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + (-1) + "'", int68 == (-1));
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 'a', (int) (short) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray3, 1.0d);
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, 1.0d, 0);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 100.0, 10.0, 1.0]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) (short) -1);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, (long) 100);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.subarray(longArray19, 4, (int) ' ');
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray19, (long) 8);
        java.lang.Long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toObject(longArray26);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray27);
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray19);
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.add(byteArray23, (byte) 1);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray23, (byte) 1);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray23);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 100, 100, 100, 100]");
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        int int16 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray14, (float) (-1L));
        float[] floatArray17 = new float[] {};
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.add(floatArray17, (float) 10L);
        float[] floatArray21 = new float[] { (byte) -1 };
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray19, floatArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray14, floatArray19);
        java.lang.Float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray19);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray19, (int) '#', 0);
        java.lang.Class<?>[] wildcardClassArray28 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray35 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray35, (long) (-1));
        long[] longArray40 = org.apache.commons.lang3.ArrayUtils.add(longArray37, 0, (long) 1);
        java.lang.Class<?> wildcardClass41 = longArray37.getClass();
        java.lang.Class<?>[] wildcardClassArray42 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray28, wildcardClass41);
        java.io.Serializable[] serializableArray45 = org.apache.commons.lang3.ArrayUtils.subarray((java.io.Serializable[]) wildcardClassArray42, (int) '4', (int) (byte) 100);
        float[] floatArray46 = new float[] {};
        float[] floatArray48 = org.apache.commons.lang3.ArrayUtils.add(floatArray46, (float) 10L);
        float[] floatArray49 = new float[] {};
        float[] floatArray50 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray46, floatArray49);
        float[] floatArray51 = null;
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray49, floatArray51);
        int int55 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray49, (float) (-1L), (int) '4');
        int int56 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray42, (java.lang.Object) floatArray49);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray49);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray49);
        java.lang.Float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray49);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[]");
        org.junit.Assert.assertNotNull(wildcardClassArray28);
        org.junit.Assert.assertNotNull(longArray35);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray40), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass41);
        org.junit.Assert.assertNotNull(wildcardClassArray42);
        org.junit.Assert.assertNotNull(serializableArray45);
        org.junit.Assert.assertNotNull(floatArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray46), "[]");
        org.junit.Assert.assertNotNull(floatArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray48), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + (-1) + "'", int55 == (-1));
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(floatArray59);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2, (short) (byte) 10);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2);
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray5, (short) (byte) 1);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[-1, 0]");
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray14);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.clone(byteArray6);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        java.lang.Byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray18);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 1]");
        org.junit.Assert.assertNotNull(byteArray19);
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        boolean boolean3 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray0);
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.clone(shortArray0);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray4, (short) (byte) 1, (int) (short) 10);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        float[] floatArray0 = null;
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, (int) ' ', 1);
        org.junit.Assert.assertNull(floatArray3);
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray22, (byte) 1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray22, (byte) 100);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray2, (java.lang.Object) byteArray22);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        long[] longArray5 = new long[] { (-1L), '4', (byte) 10, 0L, '4' };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray5, (long) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray5);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray5, (-1L));
        long[] longArray15 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.clone(longArray15);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray5, longArray16);
        // The following exception was thrown during execution in test generation
        try {
            long[] longArray19 = org.apache.commons.lang3.ArrayUtils.remove(longArray16, 4);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[52, 0, 10, 52, -1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[0, 1, 52, -1]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        short[][] shortArray56 = null;
        short[][] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray30, shortArray56);
        short[][] shortArray58 = org.apache.commons.lang3.ArrayUtils.clone(shortArray56);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertNull(shortArray58);
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 100L, (int) '4', (double) 10.0f);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 0L);
        int int15 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) doubleArray12);
        java.lang.Double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray12);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16, 100.0d);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 5 + "'", int15 == 5);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[52.0, -1.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9);
        boolean[] booleanArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray9, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray13);
        java.lang.Boolean[] booleanArray15 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray13);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, true);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray15, true);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray13), "[true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray15);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[true, false, true, true]");
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        boolean[] booleanArray5 = new boolean[] { false, false, false, false, false };
        boolean[] booleanArray11 = new boolean[] { false, false, false, false, false };
        boolean[] booleanArray17 = new boolean[] { false, false, false, false, false };
        boolean[][] booleanArray18 = new boolean[][] { booleanArray5, booleanArray11, booleanArray17 };
        boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        boolean[][] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, (int) (byte) 0, booleanArray20);
        java.lang.Integer[] intArray26 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray26);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) 0);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray37, (byte) 10, 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray32, byteArray37);
        byte[] byteArray42 = null;
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray41, byteArray42);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.remove(byteArray41, 2);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.clone(byteArray45);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.add(byteArray46, (byte) 0);
        int int50 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) intArray26, (java.lang.Object) byteArray46, (int) (byte) 0);
        boolean[][] booleanArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray18, (java.lang.Object) intArray26);
        int[] intArray53 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray26, (int) (short) 100);
        int[] intArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray26);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray5), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[false, false, false, false, false]");
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertNotNull(intArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray53), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray54), "[-1, 2, -1, 2]");
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        java.lang.Object[] objArray0 = null;
        java.lang.Double[] doubleArray7 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray7, (double) '#');
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.add(doubleArray9, (int) (short) 1, (double) 1.0f);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) (short) -1);
        double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) doubleArray15);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray15, 10.0d, (int) '4');
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray15, (double) 6, (int) '#');
        double[] doubleArray23 = null;
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray15, doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray15), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 6 + "'", int19 == 6);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (-1), (-1));
        java.lang.Double[] doubleArray14 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14, (double) '#');
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray14);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) int7, (java.lang.Object) doubleArray18);
        double[] doubleArray21 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray18, 4);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray18);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[-1.0, 1.0, 0.0, 1.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray9);
        java.lang.String str11 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) longArray10);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[0, 1, 52, -1]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "{0,1,52,-1}" + "'", str11, "{0,1,52,-1}");
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 0L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, 10.0d, (double) (-1.0f));
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray12, (double) 2);
        java.lang.Double[] doubleArray21 = new java.lang.Double[] { 10.0d };
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray21);
        double[] doubleArray24 = new double[] { (byte) 10 };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray24);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray25);
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray25, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray22, doubleArray25);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) 1L);
        double[] doubleArray34 = new double[] { (byte) 10 };
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray34);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray35);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray36);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray36, 0.0d, (double) (-1.0f));
        double[] doubleArray41 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray12, doubleArray36);
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray41, (double) (-1), (double) (byte) 10);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray41), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 3 + "'", int44 == 3);
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        byte[] byteArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray0, (byte) 10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) 100);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(byteArray13, (byte) 100);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        byte[] byteArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray30);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray29, 2);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray33);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray33, (int) (short) 0, 6);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray37);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray37);
        java.lang.Byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray39);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray39, 6, (int) (short) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[1, 100, 100]");
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        float[] floatArray0 = null;
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray0, 0, (-1));
        org.junit.Assert.assertNull(floatArray3);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1, 100, 100, 10]");
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        double[] doubleArray3 = new double[] { (-1), (byte) 100, 10L };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray3, (double) 0.0f, 0, 100.0d);
        java.lang.Double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        byte[] byteArray13 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray13, (byte) 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray13, (byte) 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray8, (java.lang.Object) byteArray17, 4);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) doubleArray8);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, 0.0d);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8);
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray8, (double) 1L);
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[-1.0, 100.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0, 100.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0, 100.0, -1.0]");
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        boolean[] booleanArray22 = new boolean[] { true, true, false, true };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray22, true, (int) '4');
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray22);
        java.lang.Boolean[] booleanArray27 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray22);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27);
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray27, false);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray17, booleanArray31);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[true, false, true, true]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, (float) 4, 4);
        float[] floatArray11 = new float[] {};
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) 10L);
        float[] floatArray15 = new float[] { (byte) -1 };
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray13, floatArray15);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray16, (float) (-1L));
        float[] floatArray19 = new float[] {};
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.add(floatArray19, (float) 10L);
        float[] floatArray23 = new float[] { (byte) -1 };
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray21, floatArray23);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray21, (float) 1);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray16, floatArray21);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray21);
        char[] charArray30 = new char[] { '#' };
        java.lang.Character[] charArray31 = org.apache.commons.lang3.ArrayUtils.toObject(charArray30);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray30);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.add(charArray32, 'a');
        char[] charArray41 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray41, '4', (int) (byte) 100);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray41, '#', 0);
        char[] charArray48 = org.apache.commons.lang3.ArrayUtils.addAll(charArray32, charArray41);
        java.lang.Character[] charArray49 = org.apache.commons.lang3.ArrayUtils.toObject(charArray48);
        float[] floatArray50 = new float[] {};
        float[] floatArray52 = org.apache.commons.lang3.ArrayUtils.add(floatArray50, (float) 10L);
        float[] floatArray54 = new float[] { (byte) -1 };
        float[] floatArray55 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray52, floatArray54);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray52, 0.0f, (int) ' ');
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.clone(floatArray52);
        boolean boolean60 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray48, (java.lang.Object) floatArray59);
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray59, (float) ' ');
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray59, (float) (short) 0);
        float[] floatArray65 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray59);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray41), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray41), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray41), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(charArray48);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray48), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray48), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray48), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray50), "[]");
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray52), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray55), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(floatArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray65), "[10.0, 10.0]");
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        java.lang.Boolean[][] booleanArray0 = new java.lang.Boolean[][] {};
        java.lang.Boolean[][] booleanArray1 = org.apache.commons.lang3.ArrayUtils.toArray(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray9, 3, (int) '4');
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray17, (short) 100);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) 0);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) -1);
        short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.clone(shortArray23);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 0]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0]");
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) -1);
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Map<java.lang.Object, java.lang.Object> objMap12 = org.apache.commons.lang3.ArrayUtils.toMap((java.lang.Object[]) charArray11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Array element 0, '#', is neither of type Map.Entry nor an Array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray11);
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        float[] floatArray6 = new float[] {};
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.add(floatArray6, (float) 10L);
        float[] floatArray10 = new float[] { (byte) -1 };
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray8, floatArray10);
        int int13 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray8, (float) 1);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray8, (float) (-1L));
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray8, (float) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray8);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray8);
        float[] floatArray20 = new float[] {};
        float[] floatArray22 = org.apache.commons.lang3.ArrayUtils.add(floatArray20, (float) 10L);
        float[] floatArray23 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) 2, (int) (short) 10);
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray24, 0, (int) (byte) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray30, (float) 2, (int) (byte) 100);
        float[] floatArray35 = new float[] { '#' };
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, (float) (-1));
        float[] floatArray38 = org.apache.commons.lang3.ArrayUtils.clone(floatArray35);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.add(floatArray35, (int) (byte) 0, (float) (short) 0);
        float[] floatArray42 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray30, floatArray41);
        float[] floatArray43 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray8, floatArray42);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[35.0, -1.0]");
        org.junit.Assert.assertNotNull(floatArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray38), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[0.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray42), "[0.0, 35.0]");
        org.junit.Assert.assertNotNull(floatArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray43), "[10.0, 0.0, 35.0]");
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray6);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray6, (float) 0, (int) (short) 10);
        java.lang.Float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray11);
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray11, (float) 1L);
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray20, (float) (-1L));
        float[] floatArray23 = new float[] {};
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, (float) 10L);
        float[] floatArray27 = new float[] { (byte) -1 };
        float[] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray25, floatArray27);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray25, (float) 1);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray20, floatArray25);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray25);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray32, (float) 1L);
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.clone(floatArray32);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray35);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains(floatArray6, (float) (byte) -1);
        float[] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray6, (float) 100L);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray40, 0.0f, 7);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray63 = org.apache.commons.lang3.ArrayUtils.add(longArray7, 4, (long) 100);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray63);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray63), "[100, 100, 100, -1, -1, 100, 0]");
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray19, (int) '4');
        int[] intArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray23, (int) (short) 1);
        int[] intArray28 = org.apache.commons.lang3.ArrayUtils.subarray(intArray23, (int) (byte) 10, (-1));
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray23, (int) (short) 1, (int) (short) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 52]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, 0, 52]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        long[] longArray0 = new long[] {};
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (short) 1);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.clone(longArray0);
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray3, 0L, (int) (byte) 10);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray15);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray15, (byte) 1);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.clone(byteArray19);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 10);
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(byteArray19, (byte) -1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray11, (double) 5);
        double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray11, (int) (short) 0, 8);
        java.lang.Float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray17, 1.0f);
        double[] doubleArray21 = new double[] { (byte) 10 };
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray21);
        double[] doubleArray23 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray22);
        java.lang.Double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray23);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray17, (java.lang.Object[]) doubleArray24);
        double[] doubleArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray24);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray26, (double) (-1), (double) 4);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.add(doubleArray26, 10.0d);
        java.lang.Double[] doubleArray33 = new java.lang.Double[] { 10.0d };
        double[] doubleArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray33);
        double[] doubleArray36 = new double[] { (byte) 10 };
        double[] doubleArray37 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray36);
        double[] doubleArray38 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray37);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray37, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray37);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray34, doubleArray37);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray37, (double) 1L);
        double[] doubleArray46 = new double[] { (byte) 10 };
        double[] doubleArray47 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray46);
        double[] doubleArray48 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray37, doubleArray47);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray48);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray48, 0.0d, (double) (-1.0f));
        double[] doubleArray55 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray48, 7, 2);
        double[] doubleArray56 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray26, doubleArray48);
        java.lang.Double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray56);
        double[] doubleArray58 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray16, doubleArray56);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[]");
        org.junit.Assert.assertNotNull(doubleArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray21), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertNotNull(doubleArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray34), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray37), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray38), "[10.0]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray47), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray48), "[10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(doubleArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray55), "[]");
        org.junit.Assert.assertNotNull(doubleArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray56), "[10.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertNotNull(doubleArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray58), "[52.0, -1.0, -1.0, 1.0, 100.0, 10.0, 10.0, 10.0]");
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        java.lang.String[][] strArray0 = new java.lang.String[][] {};
        java.lang.String[][][] strArray1 = new java.lang.String[][][] { strArray0 };
        java.lang.String[] strArray2 = new java.lang.String[] {};
        java.lang.String[] strArray3 = new java.lang.String[] {};
        java.lang.String[] strArray4 = new java.lang.String[] {};
        java.lang.String[] strArray5 = new java.lang.String[] {};
        java.lang.String[][] strArray6 = new java.lang.String[][] { strArray2, strArray3, strArray4, strArray5 };
        java.lang.String[][][] strArray7 = new java.lang.String[][][] { strArray6 };
        java.lang.String[][][] strArray8 = org.apache.commons.lang3.ArrayUtils.addAll(strArray1, strArray7);
        java.lang.CharSequence[][][] charSequenceArray9 = org.apache.commons.lang3.ArrayUtils.clone((java.lang.CharSequence[][][]) strArray7);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertNotNull(strArray1);
        org.junit.Assert.assertNotNull(strArray2);
        org.junit.Assert.assertNotNull(strArray3);
        org.junit.Assert.assertNotNull(strArray4);
        org.junit.Assert.assertNotNull(strArray5);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertNotNull(strArray8);
        org.junit.Assert.assertNotNull(charSequenceArray9);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        int int38 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 10);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.remove(booleanArray11, 3);
        java.lang.Boolean[] booleanArray41 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        java.lang.Boolean[] booleanArray47 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray47);
        java.lang.Boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray48);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray48, true);
        java.lang.Boolean[] booleanArray52 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray52, false);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray51, booleanArray54);
        boolean[] booleanArray60 = new boolean[] { true, true, false, false };
        boolean boolean62 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray60, false);
        boolean[] booleanArray67 = new boolean[] { true, true, false, true };
        int int70 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray67, true, (int) '4');
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray60, booleanArray67);
        boolean[] booleanArray74 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray60, (int) (byte) 1, (-1));
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray74, false);
        boolean[] booleanArray77 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray54, booleanArray74);
        boolean[] booleanArray78 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray74);
        boolean boolean80 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, false);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false]");
        org.junit.Assert.assertNotNull(booleanArray41);
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray52);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(booleanArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray60), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(booleanArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray67), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 3 + "'", int70 == 3);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(booleanArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray74), "[]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(booleanArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray77), "[]");
        org.junit.Assert.assertNotNull(booleanArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray78), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray10, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 1, 0]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-1, 0, 1, 0, -1]");
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        byte[] byteArray2 = new byte[] { (byte) 1, (byte) 10 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) -1);
        java.lang.Byte[] byteArray5 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray2);
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.clone(byteArray2);
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[1, 10]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(byteArray5);
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[1, 10]");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        boolean[] booleanArray0 = new boolean[] {};
        int int2 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray0, true);
        boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray3, true);
        boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.add(booleanArray3, true);
        java.lang.Boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray7);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray7, false, (int) '#');
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(booleanArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray3), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray7), "[true]");
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray1);
        int[] intArray12 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray18 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray18);
        int[] intArray25 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray19, intArray25);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray25);
        int[] intArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray12, 2);
        int[] intArray33 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray39 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray39);
        int[] intArray46 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean47 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray40, intArray46);
        int[] intArray48 = org.apache.commons.lang3.ArrayUtils.addAll(intArray33, intArray46);
        int[] intArray50 = org.apache.commons.lang3.ArrayUtils.remove(intArray33, (int) (short) 1);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray29, intArray50);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray1, intArray50);
        int int54 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 0);
        java.lang.Integer[] intArray59 = new java.lang.Integer[] { (-1), 2, (-1), 2 };
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray59);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray60);
        int[] intArray64 = org.apache.commons.lang3.ArrayUtils.add(intArray60, (int) (short) 1, (int) (byte) -1);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray25), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray39);
        org.junit.Assert.assertNotNull(intArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray50), "[100, 52]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[-1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0, -1, 2, -1, 2]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[-1, -1, 2, -1, 2]");
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray19);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray22, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray27, (long) '#');
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.subarray(longArray27, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray39 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray39, (long) (-1));
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray41, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.addAll(longArray32, longArray41);
        long[] longArray47 = new long[] { (byte) -1, 10 };
        long[] longArray48 = org.apache.commons.lang3.ArrayUtils.clone(longArray47);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray32, longArray47);
        long[] longArray50 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray47);
        java.lang.Long[] longArray51 = org.apache.commons.lang3.ArrayUtils.toObject(longArray47);
        java.lang.Long[] longArray58 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray58, (long) (-1));
        int int62 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray60, (long) '#');
        long[] longArray65 = org.apache.commons.lang3.ArrayUtils.subarray(longArray60, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray72 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray72, (long) (-1));
        int int76 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray74, (long) '#');
        long[] longArray77 = org.apache.commons.lang3.ArrayUtils.addAll(longArray65, longArray74);
        java.lang.Long[] longArray78 = org.apache.commons.lang3.ArrayUtils.toObject(longArray65);
        long[] longArray81 = org.apache.commons.lang3.ArrayUtils.add(longArray65, (int) (short) 0, (long) (short) 0);
        long[] longArray82 = org.apache.commons.lang3.ArrayUtils.addAll(longArray47, longArray65);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray47), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray50), "[-1, 10, -1, 10, 1, 1, -1, 10]");
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertNotNull(longArray58);
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(longArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray65), "[]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(longArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray77), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertNotNull(longArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray81), "[0]");
        org.junit.Assert.assertNotNull(longArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray82), "[-1, 10]");
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray5, (int) '4', (int) (short) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) '#', 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray27, '#', (int) (byte) 10);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ', 2);
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.subarray(charArray38, (int) (short) -1, (-1));
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.addAll(charArray27, charArray49);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray27);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[]");
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[#]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        float[] floatArray1 = new float[] { '#' };
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1));
        int int5 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, 0.0f);
        java.lang.Float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) 1L);
        float[] floatArray10 = new float[] {};
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray10, (float) 10L);
        float[] floatArray14 = new float[] { (byte) -1 };
        float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray12, floatArray14);
        int int17 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray15, (float) (-1L));
        float[] floatArray18 = new float[] {};
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.add(floatArray18, (float) 10L);
        float[] floatArray22 = new float[] { (byte) -1 };
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray20, floatArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray20, (float) 1);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray15, floatArray20);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray20);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray9);
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (short) 1);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, false);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17, true);
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray21);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[]");
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[]");
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        java.lang.Long[] longArray18 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray18, (long) (-1));
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.add(longArray20, 0, (long) 1);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray20, (long) (-1), (int) (byte) 1);
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray20, (long) (-1));
        java.lang.Long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toObject(longArray20);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.add(longArray20, (long) (short) -1);
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray31, (long) 100);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.subarray(longArray31, 4, (int) ' ');
        long[] longArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray31, (long) 8);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray31);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray38), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1, -1]");
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.lang.Double[] doubleArray5 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray11 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[] doubleArray17 = new java.lang.Double[] { 100.0d, 0.0d, 0.0d, 100.0d, 10.0d };
        java.lang.Double[][] doubleArray18 = new java.lang.Double[][] { doubleArray5, doubleArray11, doubleArray17 };
        java.lang.Double[][] doubleArray19 = new java.lang.Double[][] {};
        java.lang.Double[][] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray18, doubleArray19);
        java.lang.Double[] doubleArray24 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray28 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray32 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray36 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[] doubleArray40 = new java.lang.Double[] { 0.0d, 1.0d, 100.0d };
        java.lang.Double[][] doubleArray41 = new java.lang.Double[][] { doubleArray24, doubleArray28, doubleArray32, doubleArray36, doubleArray40 };
        java.lang.Double[][] doubleArray42 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray19, doubleArray41);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) doubleArray42, (java.lang.Object) 4, 6);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertNotNull(doubleArray40);
        org.junit.Assert.assertNotNull(doubleArray41);
        org.junit.Assert.assertNotNull(doubleArray42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        java.lang.Short[] shortArray2 = new java.lang.Short[] { (short) -1, (short) 0 };
        short[] shortArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2, (short) (byte) 10);
        short[] shortArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2);
        short[] shortArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray2);
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray5), "[-1, 0]");
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray6), "[-1, 0]");
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) -1, (int) (short) 1);
        float[] floatArray24 = new float[] {};
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.add(floatArray24, (float) 10L);
        float[] floatArray28 = new float[] { (byte) -1 };
        float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray26, floatArray28);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray29, (float) (-1L));
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray29, (float) 100L);
        float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.clone(floatArray29);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray23, floatArray29);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray23, 10.0f);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray37, (float) 7);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray37);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray28), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[10.0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray18, (long) 1, 3);
        double[] doubleArray23 = new double[] { (byte) 10 };
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray23);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray24);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray24, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray24, (double) (byte) 0);
        java.lang.Double[] doubleArray32 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray31);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) longArray18, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) 6);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray23), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray27, 'a');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.subarray(charArray27, 6, (int) (byte) 1);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray27);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray16, (float) '#');
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray20, (int) (byte) -1, (int) (short) 1);
        float[] floatArray25 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray23, (float) 0L);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray23, 0.0f);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        java.lang.Short[] shortArray14 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) shortArray14);
        short[] shortArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) (byte) 10);
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray14, (short) -1);
        short[] shortArray21 = org.apache.commons.lang3.ArrayUtils.add(shortArray19, (short) (byte) 100);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray21, (short) 0, 0);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray21);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 10);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray27, (short) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.add(shortArray27, 7, (short) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 7, Length: 4");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertNotNull(shortArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray17), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[0, 100, 10, 1, 100]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[0, 100, 1, 100]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        byte[] byteArray12 = new byte[] { (byte) 100, (byte) 100 };
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray12, (byte) 10, 0);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.add(byteArray12, (byte) 1);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (int) (short) 0, (byte) 1);
        java.lang.Long[] longArray27 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray27, (long) (-1));
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray29);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 1, (java.lang.Object) longArray30);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.remove(longArray30, 2);
        long[] longArray34 = org.apache.commons.lang3.ArrayUtils.addAll(longArray9, longArray30);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray34), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 3, (double) (byte) 100);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) '#');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 1, (double) (short) 10);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) 0, (int) (short) 10, (double) 3);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray14, 0.0d);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray14, (int) (byte) 10, 1);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) 100.0f, 3);
        // The following exception was thrown during execution in test generation
        try {
            int int24 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Argument is not an array");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 1.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) (-1), 0.0d);
        double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.add(doubleArray7, 4, (double) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 4, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray7), "[10.0]");
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) 1, 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray20, (short) (byte) 0, 8);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        java.lang.Long[] longArray5 = new java.lang.Long[] { 100L, 0L, 100L, 100L, 1L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) ' ');
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5);
        long[] longArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) 4);
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray5, (long) 'a');
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray10), "[100, 0, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[100, 0, 100, 100, 1]");
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray5 = new float[] { (byte) -1 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int8 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray6, (float) (-1L));
        float[] floatArray9 = new float[] {};
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.add(floatArray9, (float) 10L);
        float[] floatArray13 = new float[] { (byte) -1 };
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray11, floatArray13);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray6, floatArray11);
        java.lang.Float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray11);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray0, (java.lang.Object) floatArray16);
        boolean[] booleanArray22 = new boolean[] { true, true, false, false };
        boolean boolean24 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray22, false);
        boolean[] booleanArray29 = new boolean[] { true, true, false, true };
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, true, (int) '4');
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray22, booleanArray29);
        boolean[] booleanArray38 = new boolean[] { true, true, false, false };
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray38, false);
        boolean[] booleanArray45 = new boolean[] { true, true, false, true };
        int int48 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray45, true, (int) '4');
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray38, booleanArray45);
        boolean[] booleanArray50 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray29, booleanArray38);
        boolean boolean51 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) floatArray16, (java.lang.Object) booleanArray50);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray50, true);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray50);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray50, 1, 5);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 3 + "'", int32 == 3);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(booleanArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray45), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 3 + "'", int48 == 3);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(booleanArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray50), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 5 + "'", int53 == 5);
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[true, false, true, true]");
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray1, ' ', (int) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray9 = org.apache.commons.lang3.ArrayUtils.add(charArray1, (int) (byte) 100, '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        double[] doubleArray16 = null;
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray16);
        double[] doubleArray19 = new double[] { (byte) 10 };
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray19);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray20);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray17, doubleArray20);
        double[] doubleArray24 = new double[] { (byte) 10 };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray25);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray25, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray32 = new double[] { (byte) 10 };
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray32);
        double[] doubleArray39 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) (short) -1);
        boolean boolean42 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray32, doubleArray39);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray25, doubleArray39);
        double[] doubleArray44 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray20, doubleArray43);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[10.0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(doubleArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray32), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertNotNull(doubleArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray44), "[10.0, 10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        java.lang.Object[] objArray0 = new java.lang.Object[] {};
        java.lang.Object[] objArray1 = new java.lang.Object[] {};
        java.lang.Object[][] objArray2 = new java.lang.Object[][] { objArray0, objArray1 };
        java.lang.Object obj3 = null;
        java.lang.Object[][] objArray4 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray2, obj3);
        char[] charArray6 = new char[] { '#' };
        java.lang.Character[] charArray7 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray2, (java.lang.Object[]) charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray7);
        org.junit.Assert.assertNotNull(objArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray0), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray0), "[]");
        org.junit.Assert.assertNotNull(objArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray1), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray1), "[]");
        org.junit.Assert.assertNotNull(objArray2);
        org.junit.Assert.assertNotNull(objArray4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray2, (double) (byte) 0);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        double[] doubleArray11 = null;
        java.lang.Double[] doubleArray13 = new java.lang.Double[] { 10.0d };
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray13);
        double[] doubleArray16 = new double[] { (byte) 10 };
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray16);
        double[] doubleArray18 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray17);
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray17, (double) ' ');
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray17);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray14, doubleArray17);
        int int24 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 1L);
        double[] doubleArray26 = new double[] { (byte) 10 };
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray26);
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray17, doubleArray27);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray28, 8, 8);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray31);
        double[] doubleArray33 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray11);
        double[] doubleArray39 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray39, (double) (short) -1);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray39, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray39, (double) 5);
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray46, (double) (byte) 100);
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray11, doubleArray46);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray13);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray18), "[10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(doubleArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray26), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(doubleArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray33), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(doubleArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray46), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 'a');
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) 5);
        float[] floatArray8 = new float[] { 100, 0L };
        float[] floatArray11 = new float[] { 100, 0L };
        float[] floatArray14 = new float[] { 100, 0L };
        float[] floatArray17 = new float[] { 100, 0L };
        float[][] floatArray18 = new float[][] { floatArray8, floatArray11, floatArray14, floatArray17 };
        float[] floatArray22 = new float[] { 100.0f, (-1L), 3 };
        float[] floatArray26 = new float[] { 100.0f, (-1L), 3 };
        float[][] floatArray27 = new float[][] { floatArray22, floatArray26 };
        float[][] floatArray28 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray18, floatArray27);
        float[] floatArray31 = new float[] { 100, 0L };
        float[] floatArray34 = new float[] { 100, 0L };
        float[] floatArray37 = new float[] { 100, 0L };
        float[] floatArray40 = new float[] { 100, 0L };
        float[][] floatArray41 = new float[][] { floatArray31, floatArray34, floatArray37, floatArray40 };
        float[] floatArray45 = new float[] { 100.0f, (-1L), 3 };
        float[] floatArray49 = new float[] { 100.0f, (-1L), 3 };
        float[][] floatArray50 = new float[][] { floatArray45, floatArray49 };
        float[][] floatArray51 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray41, floatArray50);
        float[][] floatArray52 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray28, floatArray41);
        java.io.Serializable[] serializableArray54 = org.apache.commons.lang3.ArrayUtils.remove((java.io.Serializable[]) floatArray41, 0);
        int int56 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) longArray0, (java.lang.Object) serializableArray54, (int) (byte) 1);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[100.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[100.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertNotNull(floatArray28);
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray40), "[100.0, 0.0]");
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertNotNull(floatArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray45), "[100.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray49), "[100.0, -1.0, 3.0]");
        org.junit.Assert.assertNotNull(floatArray50);
        org.junit.Assert.assertNotNull(floatArray51);
        org.junit.Assert.assertNotNull(floatArray52);
        org.junit.Assert.assertNotNull(serializableArray54);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-1) + "'", int56 == (-1));
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        float[][][][] floatArray0 = new float[][][][] {};
        float[][][][][] floatArray1 = new float[][][][][] { floatArray0 };
        java.lang.Boolean[] booleanArray7 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray7);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray8);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.add(booleanArray8, true);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, false, (int) '#');
        float[][][][][] floatArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray1, (java.lang.Object) '#');
        // The following exception was thrown during execution in test generation
        try {
            float[][][][][] floatArray18 = org.apache.commons.lang3.ArrayUtils.remove(floatArray16, 9);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 9, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray8), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(floatArray16);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) -1, 5);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.contains(byteArray2, (byte) 1);
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray15, (byte) 10, 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray15, (byte) 1);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (int) (short) 0, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray20, (byte) 10);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (byte) 10, 10);
        byte[] byteArray33 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray33, (byte) 0);
        byte[] byteArray38 = new byte[] { (byte) 100, (byte) 100 };
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 10, 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray33, byteArray38);
        byte[] byteArray43 = null;
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray42, byteArray43);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.remove(byteArray42, 2);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray42);
        byte[] byteArray50 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray20, (int) (short) 100, 10);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray2, byteArray20);
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[]");
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 4 + "'", int53 == 4);
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray18, (byte) 0, 1);
        java.lang.String str23 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray18, "hi!");
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.remove(byteArray18, 4);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray25, (byte) 1, 3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "{-1,0,0,1,100,100}" + "'", str23, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-1, 0, 0, 1, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 1, 5);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray11, false);
        boolean[] booleanArray22 = new boolean[] { true, true, false, true };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray22, true, (int) '4');
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray22);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray22, false);
        boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray22);
        int int31 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray29, true);
        boolean[] booleanArray34 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray29, (int) (byte) 0, (int) '4');
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray34, false, 0);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray34);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, false, 8);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray29), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(booleanArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray34), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray22 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 0);
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray27, (byte) 10, 0);
        byte[] byteArray31 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray22, byteArray27);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray31, byteArray32);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.remove(byteArray31, 2);
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.clone(byteArray35);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.add(byteArray36, (byte) 0);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray17, byteArray36);
        byte[] byteArray44 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray44, (byte) 0);
        byte[] byteArray49 = new byte[] { (byte) 100, (byte) 100 };
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray49, (byte) 10, 0);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray44, byteArray49);
        byte[] byteArray56 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray49, 0, (int) (byte) 10);
        byte[] byteArray57 = org.apache.commons.lang3.ArrayUtils.clone(byteArray49);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray36, byteArray57);
        int int60 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray36, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 1, 100, 100, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray49), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray57), "[100, 100]");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        java.lang.Float[] floatArray4 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray9 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray14 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray19 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray24 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[] floatArray29 = new java.lang.Float[] { (-1.0f), (-1.0f), 0.0f, (-1.0f) };
        java.lang.Float[][] floatArray30 = new java.lang.Float[][] { floatArray4, floatArray9, floatArray14, floatArray19, floatArray24, floatArray29 };
        java.lang.Object[] objArray31 = new java.lang.Object[] {};
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[][] objArray33 = new java.lang.Object[][] { objArray31, objArray32 };
        java.lang.Object obj34 = null;
        java.lang.Object[][] objArray35 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray33, obj34);
        char[] charArray37 = new char[] { '#' };
        java.lang.Character[] charArray38 = org.apache.commons.lang3.ArrayUtils.toObject(charArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray33, (java.lang.Object[]) charArray38);
        java.lang.Float[][] floatArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray30, (java.lang.Object) charArray38);
        char[] charArray42 = new char[] { ' ' };
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.add(charArray42, '#');
        int int47 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray42, '#', (int) (short) 10);
        char[] charArray50 = org.apache.commons.lang3.ArrayUtils.subarray(charArray42, (int) (short) -1, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray50);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) charArray38, (java.lang.Object) charArray50);
        char[] charArray54 = new char[] { '#' };
        java.lang.Character[] charArray55 = org.apache.commons.lang3.ArrayUtils.toObject(charArray54);
        char[] charArray56 = org.apache.commons.lang3.ArrayUtils.clone(charArray54);
        char[] charArray58 = org.apache.commons.lang3.ArrayUtils.add(charArray56, 'a');
        java.lang.Character[] charArray59 = org.apache.commons.lang3.ArrayUtils.toObject(charArray56);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray59);
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.clone(charArray60);
        char[] charArray63 = new char[] { '#' };
        java.lang.Character[] charArray64 = org.apache.commons.lang3.ArrayUtils.toObject(charArray63);
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.clone(charArray63);
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.add(charArray65, 'a');
        java.lang.Character[] charArray68 = org.apache.commons.lang3.ArrayUtils.toObject(charArray65);
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.clone(charArray69);
        char[] charArray72 = new char[] { '#' };
        java.lang.Character[] charArray73 = org.apache.commons.lang3.ArrayUtils.toObject(charArray72);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray72);
        char[] charArray75 = org.apache.commons.lang3.ArrayUtils.addAll(charArray70, charArray72);
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.addAll(charArray61, charArray75);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.add(charArray76, 'a');
        char[] charArray79 = org.apache.commons.lang3.ArrayUtils.addAll(charArray50, charArray78);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertNotNull(objArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray31), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray31), "[]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertNotNull(objArray35);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(floatArray40);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[ ]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[ , #]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(charArray50);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray50), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray50), "[ ]");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(charArray54);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray54), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray54), "[#]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#]");
        org.junit.Assert.assertNotNull(charArray58);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray58), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray58), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray58), "[#, a]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[#]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[#, a]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[#]");
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray75);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray75), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray75), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray75), "[#, #]");
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#, #, #]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "###a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "###a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#, #, #, a]");
        org.junit.Assert.assertNotNull(charArray79);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray79), " ###a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray79), " ###a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray79), "[ , #, #, #, a]");
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        int[] intArray3 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray9 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray9);
        int[] intArray16 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray10, intArray16);
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.addAll(intArray3, intArray16);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (int) (short) -1, 1);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.subarray(intArray3, (-1), 0);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray24);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray3), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[100]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        java.lang.Double[] doubleArray52 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray54 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray52, (double) '#');
        double[] doubleArray57 = org.apache.commons.lang3.ArrayUtils.add(doubleArray54, (int) (short) 1, (double) 1.0f);
        boolean boolean59 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray57, (double) (short) -1);
        double[] doubleArray60 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray57);
        java.lang.Double[] doubleArray61 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray60);
        float[] floatArray62 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int63 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray62);
        int int64 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray61, (java.lang.Object) floatArray62);
        boolean boolean65 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) shortArray45, (java.lang.Object[]) doubleArray61);
        double[] doubleArray67 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61, (double) 6);
        double[] doubleArray68 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray61);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(doubleArray52);
        org.junit.Assert.assertNotNull(doubleArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray54), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray57), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(doubleArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray60), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray61);
        org.junit.Assert.assertNotNull(floatArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray62), "[]");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(doubleArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray67), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray68), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        double[] doubleArray12 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray5, (double) 5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray12, (double) 0L);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray12, (double) (short) 1, 7);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(doubleArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray12), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        java.lang.Byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray13);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray14);
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray20, 10, (int) (short) 100);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray20, (short) (byte) 1, 0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        char[] charArray0 = new char[] {};
        char[][] charArray1 = new char[][] { charArray0 };
        char[] charArray4 = new char[] { '#' };
        java.lang.Character[] charArray5 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray4);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray6, 'a');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray6, ' ');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray6, '#');
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '4');
        char[][] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray1, (int) (byte) 1, charArray6);
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) charArray1);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        int[] intArray12 = new int[] { (byte) 0 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray12, 0);
        int[] intArray16 = org.apache.commons.lang3.ArrayUtils.add(intArray12, 0);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray12, (int) (byte) 1, (int) ' ');
        int[] intArray21 = new int[] { (byte) 0 };
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray21, 10, 0);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray21, 0, 1);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray12, intArray21);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) byteArray10, (java.lang.Object) intArray21);
        byte[] byteArray32 = null;
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray10, byteArray32);
        byte[] byteArray38 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray38, (byte) 1);
        int int45 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray38, (byte) 1, 1);
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray38, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray49 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray38);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray38);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray10, byteArray38);
        boolean boolean52 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray51);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray51, (int) (byte) 100, (int) (byte) 100);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(intArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray16), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[1, 0, 0, -1]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-1) + "'", int45 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(byteArray49);
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[1, 100, 100, 1, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[]");
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        java.lang.Byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray18);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray18, (int) (short) -1, (int) (byte) -1);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 1, 4);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 1, 8, 0 };
        java.lang.Integer[] intArray7 = new java.lang.Integer[] { 1, 8, 0 };
        java.lang.Integer[][] intArray8 = new java.lang.Integer[][] { intArray3, intArray7 };
        java.lang.Integer[][] intArray9 = org.apache.commons.lang3.ArrayUtils.clone(intArray8);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertNotNull(intArray9);
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (short) 10);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray30, 1, 4);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 10]");
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        byte[] byteArray0 = null;
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.add(byteArray0, (int) 'a', (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 97, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray34 = org.apache.commons.lang3.ArrayUtils.remove(charArray27, 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (long) (short) -1);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, (long) 100);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.remove(longArray19, 6);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1, -1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, -1, 10, 1, 1]");
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        java.lang.Boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        java.lang.Boolean[] booleanArray20 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray19), "[]");
        org.junit.Assert.assertNotNull(booleanArray20);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3, '4');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[4]");
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray2, (double) (-1), 7, (double) 4);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray2, (double) (-1L), (double) (byte) 100);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        long[] longArray4 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.add(longArray4, (long) (byte) 100);
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.clone(longArray4);
        java.lang.Long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(longArray8, 0L);
        java.lang.Long[] longArray18 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray18);
        java.lang.Long[] longArray26 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray26, (long) (-1));
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray28, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.subarray(longArray28, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray40 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (-1));
        int int44 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray42, (long) '#');
        long[] longArray45 = org.apache.commons.lang3.ArrayUtils.addAll(longArray33, longArray42);
        long[] longArray48 = new long[] { (byte) -1, 10 };
        long[] longArray49 = org.apache.commons.lang3.ArrayUtils.clone(longArray48);
        boolean boolean50 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray33, longArray48);
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.addAll(longArray19, longArray33);
        long[] longArray52 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray33);
        org.junit.Assert.assertNotNull(longArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray4), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray42), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(longArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray45), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray48), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray49), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray52), "[0, 1, 52, -1]");
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        int int14 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) byteArray13);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.clone(byteArray13);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 6 + "'", int14 == 6);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        short[] shortArray4 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray9 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray14 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray19 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray24 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[] shortArray29 = new short[] { (byte) 1, (short) 0, (short) -1, (short) 1 };
        short[][] shortArray30 = new short[][] { shortArray4, shortArray9, shortArray14, shortArray19, shortArray24, shortArray29 };
        java.lang.Long[] longArray37 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray37, (long) (-1));
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray39, (long) '#');
        long[] longArray44 = org.apache.commons.lang3.ArrayUtils.subarray(longArray39, (int) '4', (int) (byte) 10);
        short[][] shortArray45 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray30, (java.lang.Object) longArray44);
        int[] intArray47 = new int[] { (byte) 0 };
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray47, 0);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray47, 0);
        int int53 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, (int) (short) 100);
        boolean boolean54 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray47);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) shortArray30, (java.lang.Object) intArray47);
        int int58 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray47, 10, (int) (byte) -1);
        int[] intArray59 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.clone(intArray47);
        int[] intArray64 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray70 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray71 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray70);
        int[] intArray77 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean78 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray71, intArray77);
        int[] intArray79 = org.apache.commons.lang3.ArrayUtils.addAll(intArray64, intArray77);
        int[] intArray81 = org.apache.commons.lang3.ArrayUtils.remove(intArray64, (int) (short) 1);
        int int83 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray81, (int) (byte) -1);
        int[] intArray84 = org.apache.commons.lang3.ArrayUtils.clone(intArray81);
        int[] intArray85 = org.apache.commons.lang3.ArrayUtils.addAll(intArray60, intArray84);
        org.apache.commons.lang3.ArrayUtils.reverse(intArray85);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray14), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[1, 0, -1, 1]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(longArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray44), "[]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertNotNull(intArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray47), "[0]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0]");
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray64), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertNotNull(intArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray71), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray77), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(intArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray79), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[100, 52]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
        org.junit.Assert.assertNotNull(intArray84);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray84), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray85);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray85), "[52, 100, 0]");
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        int[] intArray12 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray6, intArray12);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray6, 3, (int) (short) 1);
        int[] intArray18 = new int[] { (byte) 0 };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray18, 0);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.add(intArray18, 0);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray18, (int) (byte) 1, (int) ' ');
        int[] intArray27 = new int[] { (byte) 0 };
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray27, 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray27, 10, 0);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray27, 0, 1);
        int[] intArray36 = org.apache.commons.lang3.ArrayUtils.addAll(intArray18, intArray27);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        int[] intArray38 = org.apache.commons.lang3.ArrayUtils.clone(intArray27);
        int[] intArray41 = org.apache.commons.lang3.ArrayUtils.subarray(intArray27, (int) (short) 0, 2);
        int int44 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray27, (int) (short) 1, (int) (short) 0);
        int[] intArray45 = org.apache.commons.lang3.ArrayUtils.addAll(intArray6, intArray27);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray12), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray36), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0]");
        org.junit.Assert.assertNotNull(intArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[0]");
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray41), "[0]");
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(intArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray45), "[0, 2, 10, 0, -1, 0]");
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) (byte) 1);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 100, 3);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.add(shortArray9, (short) (byte) 1);
        short[] shortArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray9, (short) (byte) 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 10, 100, 0, 1]");
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10, 100]");
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.add(byteArray4, (byte) 0);
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray8, (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (int) (short) -1, (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 5");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = new long[] { (byte) -1, 10 };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray15);
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) (byte) -1, (int) (short) 0);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) ' ', (int) '4');
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[]");
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[]");
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, ' ');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(charArray10);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray7 = new char[] { '#' };
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray7, 'a');
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray7, (int) (short) 0, 'a');
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.clone(charArray15);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[a, #]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[a, #]");
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) 100);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(byteArray13, (byte) 100);
        byte[] byteArray20 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray20, (byte) 0);
        byte[] byteArray25 = new byte[] { (byte) 100, (byte) 100 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) 10, 0);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray20, byteArray25);
        byte[] byteArray30 = null;
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray29, byteArray30);
        byte[] byteArray33 = org.apache.commons.lang3.ArrayUtils.remove(byteArray29, 2);
        java.lang.Byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray33);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray33, (int) (short) 0, 6);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray37);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray13, byteArray37);
        java.lang.Byte[] byteArray40 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray39);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray40);
        byte[] byteArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray40, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(byteArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray33), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 0, 1, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray43), "[-1, 0, 0, 1, -1, 0, 1, 100, 100]");
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (short) (byte) 1);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.contains(shortArray34, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        boolean[] booleanArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_ARRAY;
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray3 = org.apache.commons.lang3.ArrayUtils.add(booleanArray0, (int) (byte) 100, true);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 100, Length: 0");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray0), "[]");
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.clone(longArray8);
        long[] longArray12 = new long[] { (byte) -1, 10 };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.clone(longArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray13);
        long[] longArray15 = org.apache.commons.lang3.ArrayUtils.clone(longArray13);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray8, longArray15);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) ' ', 0);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray19, (long) (short) 0, 5);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray3 = new float[] {};
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray0, floatArray3);
        float[] floatArray5 = null;
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray5);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray3, (float) (-1L), (int) '4');
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.clone(floatArray3);
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, (float) 2);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[2.0]");
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray7 = new char[] { '#' };
        java.lang.Character[] charArray8 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray7);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray10);
        char[] charArray13 = new char[] { ' ' };
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.add(charArray13, '#');
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.add(charArray15, 'a');
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.contains(charArray17, '#');
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray10, charArray17);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.clone(charArray17);
        char[] charArray23 = new char[] { '#' };
        java.lang.Character[] charArray24 = org.apache.commons.lang3.ArrayUtils.toObject(charArray23);
        int[] intArray26 = new int[] { (byte) 0 };
        int int28 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray26, 0);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.add(intArray26, 0);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray26, (int) (short) 100);
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray24, (java.lang.Object) intArray26);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray24);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray34, '4');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.addAll(charArray21, charArray34);
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray34, 'a', (int) (short) -1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#, #]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[ ]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[ , #]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[ , #, a]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), " #a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), " #a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[ , #, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[0]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), " #a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), " #a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[ , #, a, #]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray20, 1, (int) (short) 0);
        java.lang.Long[] longArray24 = new java.lang.Long[] {};
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24);
        long[] longArray26 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray24);
        int[] intArray28 = new int[] { (byte) 0 };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray28, 0);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.add(intArray28, 0);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.contains(intArray28, (int) (short) 0);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray24, (java.lang.Object) intArray28);
        java.lang.Integer[] intArray41 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray41);
        int[] intArray48 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean49 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray42, intArray48);
        int[] intArray51 = org.apache.commons.lang3.ArrayUtils.add(intArray42, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray42);
        int[] intArray55 = org.apache.commons.lang3.ArrayUtils.subarray(intArray42, 0, (int) (byte) 0);
        int[] intArray56 = org.apache.commons.lang3.ArrayUtils.addAll(intArray28, intArray55);
        boolean boolean57 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray20, intArray28);
        int[] intArray60 = org.apache.commons.lang3.ArrayUtils.subarray(intArray28, (int) (byte) 0, (int) (short) 1);
        int[] intArray61 = org.apache.commons.lang3.ArrayUtils.clone(intArray60);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertNotNull(longArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray26), "[]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(intArray41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray55), "[]");
        org.junit.Assert.assertNotNull(intArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray56), "[0]");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[0]");
        org.junit.Assert.assertNotNull(intArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray61), "[0]");
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray16, (byte) 10, 0);
        byte[] byteArray24 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) 0);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) 1);
        byte[] byteArray29 = org.apache.commons.lang3.ArrayUtils.clone(byteArray24);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) 10, (int) (short) 100);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray24, (byte) -1);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray16, byteArray24);
        byte[] byteArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray24, (byte) -1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(byteArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[0, 0, 1]");
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        char[] charArray0 = null;
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray0, 'a', 3);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 100]");
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, (long) '#');
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.subarray(longArray8, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray20 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20, (long) (-1));
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray22, (long) '#');
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.addAll(longArray13, longArray22);
        long[] longArray28 = new long[] { (byte) -1, 10 };
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.clone(longArray28);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray13, longArray28);
        long[] longArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray28, (long) (byte) 100);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray32, (-1L));
        java.lang.Long[] longArray35 = org.apache.commons.lang3.ArrayUtils.toObject(longArray32);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray28), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(longArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray32), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(longArray35);
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        short[] shortArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_SHORT_ARRAY;
        short[] shortArray2 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) 0);
        java.lang.Short[] shortArray9 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9);
        short[] shortArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 1);
        short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray9, (short) 10);
        short[] shortArray16 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray15);
        short[] shortArray18 = org.apache.commons.lang3.ArrayUtils.add(shortArray0, (short) (byte) 100);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.remove(shortArray18, 0);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray18, 4, 10);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray18, (short) 100);
        org.junit.Assert.assertNotNull(shortArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray0), "[]");
        org.junit.Assert.assertNotNull(shortArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray2), "[0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray11), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray13), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100]");
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[]");
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        java.lang.Boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray4);
        boolean[] booleanArray10 = null;
        boolean[] booleanArray11 = new boolean[] {};
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true);
        boolean[] booleanArray14 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray10, booleanArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(booleanArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray4, false);
        boolean[] booleanArray23 = new boolean[] { true, true, false, false };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, false);
        boolean boolean27 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray23, true);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray23, true);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.add(booleanArray23, 0, true);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray32, true, 6);
        int int37 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray32, true);
        boolean[] booleanArray38 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray4, booleanArray32);
        boolean[] booleanArray40 = org.apache.commons.lang3.ArrayUtils.add(booleanArray38, false);
        // The following exception was thrown during execution in test generation
        try {
            boolean[] booleanArray43 = org.apache.commons.lang3.ArrayUtils.add(booleanArray40, (-1), false);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 10");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(booleanArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray14), "[]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2 + "'", int37 == 2);
        org.junit.Assert.assertNotNull(booleanArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray38), "[true, true, false, true, true, true, true, false, false]");
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true, true, true, true, false, false, false]");
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray18);
        java.lang.Long[] longArray20 = new java.lang.Long[] {};
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray20);
        byte[] byteArray26 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray26, (byte) 0);
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 100 };
        int int34 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray31, (byte) 10, 0);
        byte[] byteArray35 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray26, byteArray31);
        boolean boolean36 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray20, (java.lang.Object) byteArray35);
        byte[] byteArray39 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray35, (int) '#', 0);
        byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray35, (int) (byte) -1, 8);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray18, byteArray42);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(byteArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[]");
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray19, 4);
        int int23 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray19, 0);
        int[] intArray24 = org.apache.commons.lang3.ArrayUtils.clone(intArray19);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.subarray(intArray24, 4, (int) (short) 0);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray24);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        java.lang.Float[] floatArray6 = new java.lang.Float[] { 100.0f, 1.0f, 10.0f, 1.0f, 1.0f, 0.0f };
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray6, (float) 1L);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[100.0, 1.0, 10.0, 1.0, 1.0, 0.0]");
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray23);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray23, (short) 0, 0);
        short[] shortArray29 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray23, (short) 1);
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray23, (short) 10, (int) ' ');
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[10, 1, 1, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray29), "[10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (byte) 10);
        java.lang.Byte[] byteArray15 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray7, byteArray16);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (int) (byte) 0, (byte) 0);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray20, (byte) 10, 6);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[100, 100, 1, 10]");
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100, 1, 0, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100, 100, 1, 0, 100]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        java.lang.Long[] longArray14 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray14, (long) (-1));
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray16, (long) '#');
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray16, (int) '4', (int) (byte) 10);
        java.lang.Long[] longArray28 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray28, (long) (-1));
        int int32 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray30, (long) '#');
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.addAll(longArray21, longArray30);
        long[] longArray36 = new long[] { (byte) -1, 10 };
        long[] longArray37 = org.apache.commons.lang3.ArrayUtils.clone(longArray36);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(longArray21, longArray36);
        long[] longArray39 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray21);
        java.lang.Long[] longArray40 = new java.lang.Long[] {};
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        byte[] byteArray46 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray46, (byte) 0);
        byte[] byteArray51 = new byte[] { (byte) 100, (byte) 100 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray51, (byte) 10, 0);
        byte[] byteArray55 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray46, byteArray51);
        boolean boolean56 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray40, (java.lang.Object) byteArray55);
        long[] longArray57 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40);
        long[] longArray59 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray40, (long) (byte) 10);
        long[] longArray60 = org.apache.commons.lang3.ArrayUtils.addAll(longArray7, longArray59);
        long[] longArray62 = org.apache.commons.lang3.ArrayUtils.remove(longArray60, (int) (short) 0);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray62, 0L, (int) 'a');
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray28);
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[-1, 10]");
        org.junit.Assert.assertNotNull(longArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray37), "[-1, 10]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(longArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray39), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray40);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(byteArray55);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray55), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(longArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray57), "[]");
        org.junit.Assert.assertNotNull(longArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray59), "[]");
        org.junit.Assert.assertNotNull(longArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray60), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray62), "[100, -1, -1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, ' ');
        char[] charArray10 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 0, (int) (byte) -1);
        char[] charArray12 = new char[] { '#' };
        java.lang.Character[] charArray13 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.clone(charArray12);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray14, 'a');
        char[] charArray23 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray23, '4', (int) (byte) 100);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray23, '#', 0);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray23);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray14, '#');
        boolean boolean33 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray10, charArray14);
        char[] charArray35 = new char[] { '#' };
        java.lang.Character[] charArray36 = org.apache.commons.lang3.ArrayUtils.toObject(charArray35);
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.clone(charArray35);
        char[] charArray39 = org.apache.commons.lang3.ArrayUtils.add(charArray37, 'a');
        char[] charArray46 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray46, '4', (int) (byte) 100);
        int int52 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray46, '#', 0);
        char[] charArray53 = org.apache.commons.lang3.ArrayUtils.addAll(charArray37, charArray46);
        char[] charArray55 = new char[] { '#' };
        java.lang.Character[] charArray56 = org.apache.commons.lang3.ArrayUtils.toObject(charArray55);
        char[] charArray57 = org.apache.commons.lang3.ArrayUtils.clone(charArray55);
        char[] charArray59 = org.apache.commons.lang3.ArrayUtils.add(charArray57, 'a');
        char[] charArray61 = new char[] { '#' };
        java.lang.Character[] charArray62 = org.apache.commons.lang3.ArrayUtils.toObject(charArray61);
        char[] charArray63 = org.apache.commons.lang3.ArrayUtils.clone(charArray61);
        char[] charArray64 = org.apache.commons.lang3.ArrayUtils.addAll(charArray57, charArray61);
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.addAll(charArray53, charArray61);
        java.lang.Object[] objArray66 = new java.lang.Object[] {};
        java.lang.Object[] objArray67 = new java.lang.Object[] {};
        java.lang.Object[][] objArray68 = new java.lang.Object[][] { objArray66, objArray67 };
        java.lang.Object obj69 = null;
        java.lang.Object[][] objArray70 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray68, obj69);
        char[] charArray72 = new char[] { '#' };
        java.lang.Character[] charArray73 = org.apache.commons.lang3.ArrayUtils.toObject(charArray72);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray68, (java.lang.Object[]) charArray73);
        char[] charArray76 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray73, ' ');
        char[] charArray77 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray73);
        char[] charArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray73);
        boolean boolean79 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray61, charArray78);
        char[] charArray80 = org.apache.commons.lang3.ArrayUtils.clone(charArray78);
        char[] charArray81 = org.apache.commons.lang3.ArrayUtils.addAll(charArray14, charArray80);
        int int83 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray81, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#]");
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#, a]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[]");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray35), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray35), "[#]");
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray39), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray39), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray39), "[#, a]");
        org.junit.Assert.assertNotNull(charArray46);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray46), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray46), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray46), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray53), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray53), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray53), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray55);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray55), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray55), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray55), "[#]");
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray57), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray57), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray57), "[#]");
        org.junit.Assert.assertNotNull(charArray59);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray59), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray59), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray59), "[#, a]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[#]");
        org.junit.Assert.assertNotNull(charArray62);
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray64), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray64), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray64), "[#, #]");
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(objArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray66), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray66), "[]");
        org.junit.Assert.assertNotNull(objArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray67), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray67), "[]");
        org.junit.Assert.assertNotNull(objArray68);
        org.junit.Assert.assertNotNull(objArray70);
        org.junit.Assert.assertNotNull(charArray72);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray72), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray72), "[#]");
        org.junit.Assert.assertNotNull(charArray73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(charArray76);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray76), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray76), "[#]");
        org.junit.Assert.assertNotNull(charArray77);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray77), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray77), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray77), "[#]");
        org.junit.Assert.assertNotNull(charArray78);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray78), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray78), "[#]");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(charArray80);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray80), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray80), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray80), "[#]");
        org.junit.Assert.assertNotNull(charArray81);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray81), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray81), "[#, #]");
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        java.lang.Boolean[] booleanArray17 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray17);
        java.lang.Boolean[] booleanArray19 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray18);
        boolean[] booleanArray21 = org.apache.commons.lang3.ArrayUtils.add(booleanArray18, true);
        java.lang.Boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray11, booleanArray21);
        int int26 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray21, false, 3);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertNotNull(booleanArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray18), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray19);
        org.junit.Assert.assertNotNull(booleanArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray21), "[true, true, false, false, true, true]");
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray2, 0.0f, (int) ' ');
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.clone(floatArray2);
        float[] floatArray11 = new float[] { '#' };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.add(floatArray11, (float) (-1));
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.contains(floatArray11, (float) 6);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray11);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray11, (float) 5, 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[35.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[35.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.remove(byteArray7, (int) (short) 1);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray9, (byte) -1, 2);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray9);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[1, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        java.lang.Class<?>[] wildcardClassArray15 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray22 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray22, (long) (-1));
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.add(longArray24, 0, (long) 1);
        java.lang.Class<?> wildcardClass28 = longArray24.getClass();
        java.lang.Class<?>[] wildcardClassArray29 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray15, wildcardClass28);
        java.lang.reflect.AnnotatedElement[] annotatedElementArray30 = org.apache.commons.lang3.ArrayUtils.addAll((java.lang.reflect.AnnotatedElement[]) wildcardClassArray0, (java.lang.reflect.AnnotatedElement[]) wildcardClassArray29);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.EMPTY_DOUBLE_ARRAY;
        int int33 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) doubleArray31, (int) (short) 100);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) (short) 1, (int) 'a', (double) (short) 10);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(wildcardClassArray15);
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass28);
        org.junit.Assert.assertNotNull(wildcardClassArray29);
        org.junit.Assert.assertNotNull(annotatedElementArray30);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray16 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray8, (long) (-1));
        java.lang.Long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toObject(longArray8);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray8);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.add(longArray8, (int) (short) 0, 0L);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray8, 1L);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.remove(longArray8, 0);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray16), "[10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[0, 1, 1, 10, -1, 10, -1]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[1, 10, -1, 10, -1]");
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        short[] shortArray18 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray18);
        short[] shortArray24 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray24, (short) (byte) 0, 2);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray18, shortArray24);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) 10);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) wildcardClassArray14, (java.lang.Object) shortArray24);
        char[] charArray34 = new char[] { '#' };
        java.lang.Character[] charArray35 = org.apache.commons.lang3.ArrayUtils.toObject(charArray34);
        char[] charArray36 = org.apache.commons.lang3.ArrayUtils.clone(charArray34);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.add(charArray36, 'a');
        char[] charArray45 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int48 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray45, '4', (int) (byte) 100);
        int int51 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray45, '#', 0);
        char[] charArray52 = org.apache.commons.lang3.ArrayUtils.addAll(charArray36, charArray45);
        java.lang.Character[] charArray53 = org.apache.commons.lang3.ArrayUtils.toObject(charArray52);
        float[] floatArray54 = new float[] {};
        float[] floatArray56 = org.apache.commons.lang3.ArrayUtils.add(floatArray54, (float) 10L);
        float[] floatArray58 = new float[] { (byte) -1 };
        float[] floatArray59 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray56, floatArray58);
        int int62 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray56, 0.0f, (int) ' ');
        float[] floatArray63 = org.apache.commons.lang3.ArrayUtils.clone(floatArray56);
        boolean boolean64 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray52, (java.lang.Object) floatArray63);
        java.lang.Class<?> wildcardClass65 = floatArray63.getClass();
        java.lang.Class<?>[] wildcardClassArray66 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray14, (int) (byte) 0, wildcardClass65);
        long[] longArray71 = new long[] { 0L, (byte) 1, '4', (-1) };
        long[] longArray72 = org.apache.commons.lang3.ArrayUtils.clone(longArray71);
        long[] longArray74 = org.apache.commons.lang3.ArrayUtils.add(longArray71, (long) (byte) 100);
        long[] longArray75 = org.apache.commons.lang3.ArrayUtils.clone(longArray71);
        java.lang.Long[] longArray76 = org.apache.commons.lang3.ArrayUtils.toObject(longArray75);
        long[] longArray78 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray76, (long) 2);
        org.apache.commons.lang3.ArrayUtils.reverse(longArray78);
        int int80 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) wildcardClassArray14, (java.lang.Object) longArray78);
        boolean boolean82 = org.apache.commons.lang3.ArrayUtils.contains(longArray78, (long) (short) 10);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(shortArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray18), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray35);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#, a]");
        org.junit.Assert.assertNotNull(charArray45);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray45), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray45), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray45), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(charArray52);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray52), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray52), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray52), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray53);
        org.junit.Assert.assertNotNull(floatArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray54), "[]");
        org.junit.Assert.assertNotNull(floatArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray56), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray58), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray59), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-1) + "'", int62 == (-1));
        org.junit.Assert.assertNotNull(floatArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray63), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(wildcardClass65);
        org.junit.Assert.assertNotNull(wildcardClassArray66);
        org.junit.Assert.assertNotNull(longArray71);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray71), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray72), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray74), "[0, 1, 52, -1, 100]");
        org.junit.Assert.assertNotNull(longArray75);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray75), "[0, 1, 52, -1]");
        org.junit.Assert.assertNotNull(longArray76);
        org.junit.Assert.assertNotNull(longArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray78), "[-1, 52, 1, 0]");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        byte[] byteArray2 = new byte[] { (byte) 100, (byte) 100 };
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray2, (byte) 10, 0);
        byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.add(byteArray2, (byte) 1);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray7, (int) (short) 0, (byte) 1);
        java.lang.Long[] longArray17 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray17, (long) (-1));
        long[] longArray20 = org.apache.commons.lang3.ArrayUtils.clone(longArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) (byte) 1, (java.lang.Object) longArray20);
        long[] longArray23 = org.apache.commons.lang3.ArrayUtils.remove(longArray20, 2);
        long[] longArray24 = new long[] {};
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.contains(longArray24, (long) (short) 1);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray24, (long) 3);
        long[] longArray29 = org.apache.commons.lang3.ArrayUtils.addAll(longArray23, longArray24);
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.clone(longArray23);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray2), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[1, 100, 100, 1]");
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray20), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(longArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray23), "[-1, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(longArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray29), "[-1, 10, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[-1, 10, 10, 1, 1]");
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray3, '#');
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray3);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        int[] intArray0 = null;
        int[] intArray2 = org.apache.commons.lang3.ArrayUtils.add(intArray0, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray2), "[0]");
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        java.lang.Long[] longArray7 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray7, (long) (-1));
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.add(longArray9, 0, (long) 1);
        java.lang.Class<?> wildcardClass13 = longArray9.getClass();
        java.lang.Class<?>[] wildcardClassArray14 = org.apache.commons.lang3.ArrayUtils.add(wildcardClassArray0, wildcardClass13);
        org.apache.commons.lang3.ArrayUtils.reverse((java.lang.Object[]) wildcardClassArray0);
        java.lang.Long[] longArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_OBJECT_ARRAY;
        int[] intArray20 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray26 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray26);
        int[] intArray33 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray27, intArray33);
        int[] intArray35 = org.apache.commons.lang3.ArrayUtils.addAll(intArray20, intArray33);
        int[] intArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray33, 1);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray16, (java.lang.Object) intArray33);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) wildcardClassArray0, (java.lang.Object[]) longArray16);
        long[] longArray41 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) (short) -1);
        long[] longArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray16, (long) 7);
        java.lang.Long[] longArray44 = org.apache.commons.lang3.ArrayUtils.toObject(longArray43);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(wildcardClass13);
        org.junit.Assert.assertNotNull(wildcardClassArray14);
        org.junit.Assert.assertNotNull(longArray16);
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray33), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(intArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray35), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray37), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(longArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray41), "[]");
        org.junit.Assert.assertNotNull(longArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray43), "[]");
        org.junit.Assert.assertNotNull(longArray44);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.lang.Long[] longArray6 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6, (long) (-1));
        long[] longArray11 = org.apache.commons.lang3.ArrayUtils.add(longArray8, 0, (long) 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray8, (long) (-1), (int) (byte) 1);
        long[] longArray15 = new long[] {};
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(longArray15, (long) (short) 1);
        long[] longArray18 = org.apache.commons.lang3.ArrayUtils.addAll(longArray8, longArray15);
        java.lang.Long[] longArray25 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray25, (long) (-1));
        long[] longArray30 = org.apache.commons.lang3.ArrayUtils.add(longArray27, 0, (long) 1);
        long[] longArray31 = org.apache.commons.lang3.ArrayUtils.addAll(longArray18, longArray27);
        long[] longArray33 = org.apache.commons.lang3.ArrayUtils.remove(longArray18, 1);
        long[] longArray36 = org.apache.commons.lang3.ArrayUtils.add(longArray33, 0, (long) 4);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray8), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray11), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
        org.junit.Assert.assertNotNull(longArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray15), "[]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(longArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray18), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertNotNull(longArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray27), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray30), "[1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray31), "[-1, 10, -1, 10, 1, 1, -1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray33), "[-1, -1, 10, 1, 1]");
        org.junit.Assert.assertNotNull(longArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray36), "[4, -1, -1, 10, 1, 1]");
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(charArray7, 'a');
        java.lang.Character[] charArray10 = org.apache.commons.lang3.ArrayUtils.toObject(charArray7);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray10, ' ');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 100L);
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3, (float) 1L);
        float[] floatArray7 = new float[] {};
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) 10L);
        float[] floatArray11 = new float[] { (byte) -1 };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) (-1L));
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray17, (float) 1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray17);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray17);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) 1L);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.clone(floatArray24);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray24);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray2);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.contains(floatArray2, (float) (short) 0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[100.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        java.lang.Object[] objArray32 = new java.lang.Object[] {};
        java.lang.Object[] objArray33 = new java.lang.Object[] {};
        java.lang.Object[][] objArray34 = new java.lang.Object[][] { objArray32, objArray33 };
        java.lang.Object obj35 = null;
        java.lang.Object[][] objArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray34, obj35);
        char[] charArray38 = new char[] { '#' };
        java.lang.Character[] charArray39 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean40 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray34, (java.lang.Object[]) charArray39);
        char[] charArray42 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39, ' ');
        char[] charArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39);
        char[] charArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray39);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray27, charArray44);
        char[] charArray47 = new char[] { ' ' };
        char[] charArray49 = org.apache.commons.lang3.ArrayUtils.add(charArray47, '#');
        java.lang.Object[] objArray50 = new java.lang.Object[] {};
        java.lang.Object[] objArray51 = new java.lang.Object[] {};
        java.lang.Object[][] objArray52 = new java.lang.Object[][] { objArray50, objArray51 };
        java.lang.Object obj53 = null;
        java.lang.Object[][] objArray54 = org.apache.commons.lang3.ArrayUtils.removeElement(objArray52, obj53);
        char[] charArray56 = new char[] { '#' };
        java.lang.Character[] charArray57 = org.apache.commons.lang3.ArrayUtils.toObject(charArray56);
        boolean boolean58 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) objArray52, (java.lang.Object[]) charArray57);
        char[] charArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray57, ' ');
        char[] charArray61 = org.apache.commons.lang3.ArrayUtils.addAll(charArray49, charArray60);
        char[] charArray63 = new char[] { '#' };
        java.lang.Character[] charArray64 = org.apache.commons.lang3.ArrayUtils.toObject(charArray63);
        char[] charArray65 = org.apache.commons.lang3.ArrayUtils.clone(charArray63);
        char[] charArray67 = org.apache.commons.lang3.ArrayUtils.add(charArray65, 'a');
        java.lang.Character[] charArray68 = org.apache.commons.lang3.ArrayUtils.toObject(charArray65);
        char[] charArray69 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray68);
        char[] charArray70 = org.apache.commons.lang3.ArrayUtils.addAll(charArray61, charArray69);
        int int73 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray61, '4', (-1));
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray44, charArray61);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(objArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray32), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray32), "[]");
        org.junit.Assert.assertNotNull(objArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray33), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray33), "[]");
        org.junit.Assert.assertNotNull(objArray34);
        org.junit.Assert.assertNotNull(objArray36);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(charArray42);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray42), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray42), "[#]");
        org.junit.Assert.assertNotNull(charArray43);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray43), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray43), "[#]");
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray44), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray44), "[#]");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[ ]");
        org.junit.Assert.assertNotNull(charArray49);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray49), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray49), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray49), "[ , #]");
        org.junit.Assert.assertNotNull(objArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray50), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray50), "[]");
        org.junit.Assert.assertNotNull(objArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray51), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray51), "[]");
        org.junit.Assert.assertNotNull(objArray52);
        org.junit.Assert.assertNotNull(objArray54);
        org.junit.Assert.assertNotNull(charArray56);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray56), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray56), "[#]");
        org.junit.Assert.assertNotNull(charArray57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(charArray60);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray60), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray60), "[#]");
        org.junit.Assert.assertNotNull(charArray61);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray61), " ##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray61), " ##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray61), "[ , #, #]");
        org.junit.Assert.assertNotNull(charArray63);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray63), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray63), "[#]");
        org.junit.Assert.assertNotNull(charArray64);
        org.junit.Assert.assertNotNull(charArray65);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray65), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray65), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray65), "[#]");
        org.junit.Assert.assertNotNull(charArray67);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray67), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray67), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray67), "[#, a]");
        org.junit.Assert.assertNotNull(charArray68);
        org.junit.Assert.assertNotNull(charArray69);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray69), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray69), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray69), "[#]");
        org.junit.Assert.assertNotNull(charArray70);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray70), " ###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray70), " ###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray70), "[ , #, #, #]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + (-1) + "'", int73 == (-1));
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int17 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray16);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray15, (java.lang.Object) floatArray16);
        double[] doubleArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray15);
        double[] doubleArray22 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray19, 4, (int) (short) 0);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(doubleArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray19), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray22), "[]");
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100]");
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int42 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (-1.0f), (int) (short) 100);
        int int46 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (short) 10, 5, (double) (byte) 100);
        int int50 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray14, (double) (short) 10, 1, (double) (byte) -1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 5 + "'", int46 == 5);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray2);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray2, (double) 0L, (int) (byte) 10, (-1.0d));
        double[] doubleArray9 = new double[] { (byte) 10 };
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray9);
        double[] doubleArray16 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray16, (double) (short) -1);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(doubleArray9, doubleArray16);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray2, doubleArray16);
        int int23 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) ' ', 0.0d);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 1);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray20, (double) (short) 10, (double) 0);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray16), "[52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 52.0, -1.0, -1.0, 1.0, 100.0]");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) 100);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) -1);
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100 };
        int int20 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray17, (byte) 10, 0);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) 1);
        byte[] byteArray25 = org.apache.commons.lang3.ArrayUtils.add(byteArray22, (int) (short) 0, (byte) 1);
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray25, (byte) -1);
        byte[] byteArray32 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray32, (byte) 0);
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100 };
        int int40 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray37, (byte) 10, 0);
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray32, byteArray37);
        byte[] byteArray42 = null;
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray41, byteArray42);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.remove(byteArray41, 2);
        byte[] byteArray46 = org.apache.commons.lang3.ArrayUtils.clone(byteArray41);
        int int49 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray46, (byte) 0, 1);
        java.lang.String str51 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) byteArray46, "hi!");
        byte[] byteArray52 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray25, byteArray46);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray25);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100, 1]");
        org.junit.Assert.assertNotNull(byteArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[1, 100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "{-1,0,0,1,100,100}" + "'", str51, "{-1,0,0,1,100,100}");
        org.junit.Assert.assertNotNull(byteArray52);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[1, 100, 100, 1, -1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[-1, 0, 0, 1, 1, 100, 100, 1]");
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        char[] charArray21 = new char[] { '#' };
        java.lang.Character[] charArray22 = org.apache.commons.lang3.ArrayUtils.toObject(charArray21);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.clone(charArray21);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = new char[] { '#' };
        java.lang.Character[] charArray28 = org.apache.commons.lang3.ArrayUtils.toObject(charArray27);
        char[] charArray29 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.addAll(charArray23, charArray27);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray19, charArray27);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.clone(charArray27);
        char[] charArray34 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray27, 'a');
        char[] charArray37 = org.apache.commons.lang3.ArrayUtils.subarray(charArray27, 6, (int) (byte) 1);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray37);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray29), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray29), "[#]");
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#, #]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#]");
        org.junit.Assert.assertNotNull(charArray34);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray34), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray34), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray37), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray37), "[]");
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[]");
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        java.lang.Class<?>[] wildcardClassArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray4 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean5 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray4);
        short[] shortArray10 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray10, (short) (byte) 0, 2);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray10);
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray4, (short) (byte) 0);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        short[] shortArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray21, (short) 100);
        short[] shortArray27 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray0, (java.lang.Object) shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray27, (short) (byte) 1);
        short[] shortArray34 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray34);
        short[] shortArray40 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray40, (short) (byte) 0, 2);
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray34, shortArray40);
        int int46 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray34, (short) (byte) 0);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        short[] shortArray56 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray51, (short) 100);
        short[] shortArray57 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray34, shortArray56);
        short[] shortArray58 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray27, shortArray56);
        java.lang.Short[] shortArray59 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray27);
        short[] shortArray60 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray59);
        short[] shortArray62 = org.apache.commons.lang3.ArrayUtils.add(shortArray60, (short) (byte) 1);
        short[] shortArray64 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray62, (short) 0);
        int int67 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray62, (short) 0, 8);
        org.junit.Assert.assertNotNull(wildcardClassArray0);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(shortArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray26), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(shortArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray56), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray57), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray58), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray59);
        org.junit.Assert.assertNotNull(shortArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray60), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[100, 10, 100, 1, 10, 0, 1]");
        org.junit.Assert.assertNotNull(shortArray64);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray64), "[100, 10, 100, 1, 10, 1]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        java.lang.Short[][][][][] shortArray0 = null;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        int[] intArray4 = new int[] { (byte) 0 };
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray4, 0);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.add(intArray4, 0);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray4, (int) (short) 0);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) longArray0, (java.lang.Object) intArray4);
        java.lang.Integer[] intArray17 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray17);
        int[] intArray24 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray18, intArray24);
        int[] intArray27 = org.apache.commons.lang3.ArrayUtils.add(intArray18, (int) '4');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray18);
        int[] intArray31 = org.apache.commons.lang3.ArrayUtils.subarray(intArray18, 0, (int) (byte) 0);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.addAll(intArray4, intArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray31, 5, 4);
        java.lang.Integer[] intArray36 = org.apache.commons.lang3.ArrayUtils.toObject(intArray31);
        int int39 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray31, 2, 6);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[0]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 0]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(intArray17);
        org.junit.Assert.assertNotNull(intArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray18), "[-1, 0, 10, 2, 0]");
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(intArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray27), "[0, 2, 10, 0, -1, 52]");
        org.junit.Assert.assertNotNull(intArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray31), "[]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(intArray36);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray18 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray18, (byte) 0);
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100 };
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray23, (byte) 10, 0);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray18, byteArray23);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, 0, (int) (byte) 10);
        byte[] byteArray32 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray23, (byte) 0);
        byte[] byteArray34 = org.apache.commons.lang3.ArrayUtils.add(byteArray23, (byte) 10);
        byte[] byteArray39 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray39, (byte) 0);
        byte[] byteArray44 = new byte[] { (byte) 100, (byte) 100 };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray44, (byte) 10, 0);
        byte[] byteArray48 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray39, byteArray44);
        byte[] byteArray51 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray44, 0, (int) (byte) 10);
        byte[] byteArray53 = org.apache.commons.lang3.ArrayUtils.add(byteArray44, (byte) 100);
        byte[] byteArray54 = org.apache.commons.lang3.ArrayUtils.clone(byteArray53);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray54);
        byte[] byteArray58 = new byte[] { (byte) 100, (byte) 100 };
        int int61 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray58, (byte) 10, 0);
        byte[] byteArray63 = org.apache.commons.lang3.ArrayUtils.add(byteArray58, (byte) 1);
        int int65 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray58, (byte) 1);
        byte[] byteArray66 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray54, byteArray58);
        boolean boolean67 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray34, byteArray58);
        byte[] byteArray68 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray9, byteArray58);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[100, 100, 10]");
        org.junit.Assert.assertNotNull(byteArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(byteArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray51), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray53);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray53), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray54), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(byteArray63);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray63), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(byteArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray66), "[100, 100, 100, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(byteArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray68), "[100, 100, 100, 100]");
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(shortArray4, (short) (byte) 10);
        short[] shortArray23 = org.apache.commons.lang3.ArrayUtils.clone(shortArray4);
        java.lang.Short[] shortArray24 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray4);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(shortArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray23), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray24);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.lang.Character[] charArray1 = new java.lang.Character[] { '4' };
        char[] charArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray1);
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray3);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[4]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "4");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[4]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "4a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "4a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[4, a]");
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        java.lang.Double[] doubleArray15 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray14);
        java.lang.Object[] objArray16 = null;
        java.lang.Double[] doubleArray23 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray23, (double) '#');
        double[] doubleArray28 = org.apache.commons.lang3.ArrayUtils.add(doubleArray25, (int) (short) 1, (double) 1.0f);
        boolean boolean30 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray28, (double) (short) -1);
        double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray28);
        int int32 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray16, (java.lang.Object) doubleArray31);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, 10.0d, (int) '4');
        int int38 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray31, (double) 6, (int) '#');
        double[] doubleArray39 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray31);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray31, (double) 10.0f);
        double[] doubleArray43 = org.apache.commons.lang3.ArrayUtils.add(doubleArray31, (double) 9);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray15);
        org.junit.Assert.assertNotNull(doubleArray23);
        org.junit.Assert.assertNotNull(doubleArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray25), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray28), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray31), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6 + "'", int35 == 6);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(doubleArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray39), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 6 + "'", int41 == 6);
        org.junit.Assert.assertNotNull(doubleArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray43), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0, 9.0]");
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        long[] longArray0 = null;
        java.lang.Byte[] byteArray3 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray3);
        java.lang.Long[] longArray11 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray11, (long) (-1));
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray3, (java.lang.Object) longArray13, (int) (short) -1);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(longArray13, 10L, (int) (byte) 10);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.subarray(longArray13, (int) (short) 100, (int) 'a');
        long[] longArray22 = org.apache.commons.lang3.ArrayUtils.addAll(longArray0, longArray21);
        long[] longArray24 = org.apache.commons.lang3.ArrayUtils.add(longArray22, (long) (short) 100);
        long[] longArray25 = org.apache.commons.lang3.ArrayUtils.clone(longArray22);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray22);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray11);
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray13), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
        org.junit.Assert.assertNotNull(longArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray22), "[]");
        org.junit.Assert.assertNotNull(longArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray24), "[100]");
        org.junit.Assert.assertNotNull(longArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray25), "[]");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        java.lang.Byte[] byteArray2 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2);
        java.lang.Long[] longArray10 = new java.lang.Long[] { (-1L), 10L, (-1L), 10L, 1L, 1L };
        long[] longArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray10, (long) (-1));
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) byteArray2, (java.lang.Object) longArray12, (int) (short) -1);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray2, (byte) 1);
        java.lang.Byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray16);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray17, (byte) 1);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray20);
        org.junit.Assert.assertNotNull(byteArray2);
        org.junit.Assert.assertNotNull(byteArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray3), "[0, 100]");
        org.junit.Assert.assertNotNull(longArray10);
        org.junit.Assert.assertNotNull(longArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray12), "[-1, 10, -1, 10, 1, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[0, 100]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 1L);
        float[] floatArray4 = new float[] {};
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray4, (float) 10L);
        float[] floatArray8 = new float[] { (byte) -1 };
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray8);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray9, (float) (-1L));
        float[] floatArray12 = new float[] {};
        float[] floatArray14 = org.apache.commons.lang3.ArrayUtils.add(floatArray12, (float) 10L);
        float[] floatArray16 = new float[] { (byte) -1 };
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray14, floatArray16);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray14, (float) 1);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray9, floatArray14);
        float[] floatArray21 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray3, floatArray14);
        float[] floatArray22 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, (float) 10L);
        float[] floatArray26 = new float[] { (byte) -1 };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        int int29 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray27, (float) (-1L));
        float[] floatArray30 = new float[] {};
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.add(floatArray30, (float) 10L);
        float[] floatArray34 = new float[] { (byte) -1 };
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray32, floatArray34);
        int int37 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray32, (float) 1);
        boolean boolean38 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray27, floatArray32);
        float[] floatArray41 = org.apache.commons.lang3.ArrayUtils.subarray(floatArray32, 10, 0);
        boolean boolean43 = org.apache.commons.lang3.ArrayUtils.contains(floatArray41, (float) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray41);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray3, floatArray41);
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray3, (float) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[]");
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-1) + "'", int19 == (-1));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray34), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(floatArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray41), "[]");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        short[] shortArray4 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray4);
        short[] shortArray9 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray9);
        short[] shortArray15 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray15, (short) (byte) 0, 2);
        boolean boolean19 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray9, shortArray15);
        short[] shortArray20 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray4, shortArray9);
        short[] shortArray24 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray24);
        short[] shortArray30 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int33 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray30, (short) (byte) 0, 2);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray24, shortArray30);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray4, shortArray24);
        boolean boolean37 = org.apache.commons.lang3.ArrayUtils.contains(shortArray24, (short) (byte) -1);
        java.lang.Short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray24);
        short[] shortArray40 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray38, (short) (byte) 100);
        java.lang.Byte[] byteArray43 = new java.lang.Byte[] { (byte) 0, (byte) 100 };
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43);
        byte[] byteArray45 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray43);
        byte[] byteArray47 = org.apache.commons.lang3.ArrayUtils.add(byteArray45, (byte) -1);
        int int49 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray45, (byte) 0);
        java.lang.Long[] longArray50 = new java.lang.Long[] {};
        long[] longArray51 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray50);
        byte[] byteArray56 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray58 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray56, (byte) 0);
        byte[] byteArray61 = new byte[] { (byte) 100, (byte) 100 };
        int int64 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray61, (byte) 10, 0);
        byte[] byteArray65 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray56, byteArray61);
        boolean boolean66 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray50, (java.lang.Object) byteArray65);
        java.lang.Byte[] byteArray67 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray65);
        byte[] byteArray69 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray65, (byte) 1);
        byte[] byteArray70 = org.apache.commons.lang3.ArrayUtils.clone(byteArray69);
        byte[] byteArray72 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray69, (byte) 10);
        byte[] byteArray77 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray79 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray77, (byte) 0);
        byte[] byteArray82 = new byte[] { (byte) 100, (byte) 100 };
        int int85 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray82, (byte) 10, 0);
        byte[] byteArray86 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray77, byteArray82);
        byte[] byteArray87 = null;
        boolean boolean88 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray86, byteArray87);
        byte[] byteArray90 = org.apache.commons.lang3.ArrayUtils.remove(byteArray86, 2);
        java.lang.Byte[] byteArray91 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray90);
        byte[] byteArray94 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray90, (int) (short) 0, 6);
        boolean boolean95 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray69, byteArray90);
        byte[] byteArray96 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray45, byteArray90);
        int int97 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) shortArray38, (java.lang.Object) byteArray90);
        byte[] byteArray98 = org.apache.commons.lang3.ArrayUtils.clone(byteArray90);
        org.junit.Assert.assertNotNull(shortArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray4), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(shortArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray20), "[1, 1, 1, 10, 100, 10, 100]");
        org.junit.Assert.assertNotNull(shortArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray24), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertNotNull(shortArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray40), "[100, 10, 100]");
        org.junit.Assert.assertNotNull(byteArray43);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray45), "[0, 100]");
        org.junit.Assert.assertNotNull(byteArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray47), "[0, 100, -1]");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(longArray50);
        org.junit.Assert.assertNotNull(longArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray51), "[]");
        org.junit.Assert.assertNotNull(byteArray56);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray56), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray61);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray61), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + (-1) + "'", int64 == (-1));
        org.junit.Assert.assertNotNull(byteArray65);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(byteArray67);
        org.junit.Assert.assertNotNull(byteArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray69), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray70), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray72), "[-1, 0, 0, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray77);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray79);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray79), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray82);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray82), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertNotNull(byteArray86);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray86), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(byteArray90);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray91);
        org.junit.Assert.assertNotNull(byteArray94);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray94), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNotNull(byteArray96);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray96), "[0, 100, -1, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + (-1) + "'", int97 == (-1));
        org.junit.Assert.assertNotNull(byteArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray98), "[-1, 0, 1, 100, 100]");
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 1);
        byte[] byteArray9 = org.apache.commons.lang3.ArrayUtils.clone(byteArray4);
        byte[] byteArray12 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, (int) (short) 1, 7);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray12, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[0, 0, 1]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray5, (int) '#');
        org.apache.commons.lang3.ArrayUtils.reverse(intArray5);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.subarray(intArray5, 8, (int) (short) 1);
        int[] intArray15 = new int[] { 100, (short) 10, '4' };
        java.lang.Integer[] intArray21 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray21);
        int[] intArray28 = new int[] { (short) 0, (-1), (byte) -1, 10, 100 };
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isSameLength(intArray22, intArray28);
        int[] intArray30 = org.apache.commons.lang3.ArrayUtils.addAll(intArray15, intArray28);
        int[] intArray32 = org.apache.commons.lang3.ArrayUtils.remove(intArray15, (int) (short) 1);
        java.lang.Integer[] intArray33 = org.apache.commons.lang3.ArrayUtils.toObject(intArray15);
        int[] intArray34 = org.apache.commons.lang3.ArrayUtils.addAll(intArray5, intArray15);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[100, 10, 52]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray28), "[0, -1, -1, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray30), "[100, 10, 52, 0, -1, -1, 10, 100]");
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[100, 52]");
        org.junit.Assert.assertNotNull(intArray33);
        org.junit.Assert.assertNotNull(intArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray34), "[0, 0, 100, 10, 52]");
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        long[] longArray0 = null;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.add(longArray0, (long) (short) 100);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[100]");
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray3, '#', (int) (byte) -1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray3, 'a');
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.subarray(charArray3, 4, (int) (short) 0);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[]");
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        java.lang.Long[] longArray6 = new java.lang.Long[] { 0L, 100L, (-1L), (-1L), 100L, 100L };
        long[] longArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray6);
        long[] longArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray7, (long) (byte) 10);
        org.junit.Assert.assertNotNull(longArray6);
        org.junit.Assert.assertNotNull(longArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray7), "[0, 100, -1, -1, 100, 100]");
        org.junit.Assert.assertNotNull(longArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray9), "[0, 100, -1, -1, 100, 100]");
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(booleanArray11, true, (int) 'a');
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean[] booleanArray22 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        boolean[] booleanArray23 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray22);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(booleanArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray22), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray23), "[true, true, false, true]");
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray10, (double) 2, (int) '4', 100.0d);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray10, (double) 0.0f, (double) 100L);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray10);
        double[] doubleArray20 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray10, (double) 1.0f);
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray20, (double) (short) -1, 6, 1.0d);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray9), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[10.0, 10.0, 1.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(doubleArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray20), "[10.0, 10.0, 0.0, 1.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 4 + "'", int24 == 4);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray16 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray9, 0, (int) (byte) 10);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 100);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.clone(byteArray18);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray19);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.add(byteArray19, (byte) 100);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 1);
        byte[] byteArray26 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray22, (byte) 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[100, 100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray26), "[100, 100, 100, 100]");
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        java.lang.String[] strArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_STRING_ARRAY;
        boolean boolean1 = org.apache.commons.lang3.ArrayUtils.isEmpty((java.lang.CharSequence[]) strArray0);
        java.lang.Long[] longArray2 = new java.lang.Long[] {};
        long[] longArray3 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2);
        long[] longArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray2, (long) 'a');
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) strArray0, (java.lang.Object) longArray5, 6);
        java.lang.String str8 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) 6);
        org.junit.Assert.assertNotNull(strArray0);
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertNotNull(longArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray3), "[]");
        org.junit.Assert.assertNotNull(longArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "6" + "'", str8, "6");
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        int int6 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray1, ' ', (int) (short) -1);
        char[] charArray8 = new char[] { '#' };
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray8);
        int[] intArray11 = new int[] { (byte) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray11, 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray11, 0);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray11, (int) (short) 100);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray9, (java.lang.Object) intArray11);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9);
        char[] charArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, '4');
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray9, ' ');
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.addAll(charArray1, charArray23);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#]");
        org.junit.Assert.assertNotNull(charArray21);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray21), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray21), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#]");
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#, #]");
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) -1);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 10);
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 100);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        boolean[] booleanArray0 = null;
        boolean[] booleanArray1 = new boolean[] {};
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray1, true);
        boolean[] booleanArray4 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray0, booleanArray1);
        boolean[] booleanArray5 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray0);
        org.junit.Assert.assertNotNull(booleanArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray1), "[]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[]");
        org.junit.Assert.assertNull(booleanArray5);
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int[] intArray20 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray21 = org.apache.commons.lang3.ArrayUtils.clone(intArray10);
        int[] intArray23 = org.apache.commons.lang3.ArrayUtils.add(intArray10, (int) (short) 100);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertNotNull(intArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray20), "[0]");
        org.junit.Assert.assertNotNull(intArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray21), "[0]");
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 100]");
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        double[] doubleArray1 = new double[] { (byte) 10 };
        double[] doubleArray2 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray1);
        double[] doubleArray3 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray2);
        java.lang.Double[] doubleArray4 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray3);
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray4);
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.subarray(doubleArray5, (int) '4', (int) (short) 1);
        double[] doubleArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(doubleArray8, (double) 'a');
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 0.0f, (int) (short) 10);
        org.junit.Assert.assertNotNull(doubleArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray1), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray2), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray3), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[]");
        org.junit.Assert.assertNotNull(doubleArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray10), "[]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        java.lang.Integer[] intArray5 = new java.lang.Integer[] { 0, 2, 10, 0, (-1) };
        int[] intArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray5);
        java.lang.Integer[] intArray7 = org.apache.commons.lang3.ArrayUtils.toObject(intArray6);
        int[] intArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int[] intArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray7);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray9, (int) 'a', 4);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertNotNull(intArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray6), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray7);
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray8), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 2, 10, 0, -1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.lang.Boolean[] booleanArray5 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray5);
        java.lang.Boolean[] booleanArray7 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray6);
        boolean[] booleanArray9 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray6, true);
        java.lang.Boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray10, false);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray9, booleanArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        boolean[] booleanArray17 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray12, (int) 'a', 6);
        boolean boolean18 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray12);
        java.lang.Boolean[] booleanArray24 = new java.lang.Boolean[] { true, true, false, false, true };
        boolean[] booleanArray25 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray24);
        java.lang.Boolean[] booleanArray26 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray25);
        boolean[] booleanArray28 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray25, true);
        java.lang.Boolean[] booleanArray29 = org.apache.commons.lang3.ArrayUtils.EMPTY_BOOLEAN_OBJECT_ARRAY;
        boolean[] booleanArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(booleanArray29, false);
        boolean boolean32 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray28, booleanArray31);
        boolean[] booleanArray37 = new boolean[] { true, true, false, false };
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray37, false);
        boolean[] booleanArray44 = new boolean[] { true, true, false, true };
        int int47 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray44, true, (int) '4');
        boolean boolean48 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray37, booleanArray44);
        boolean[] booleanArray51 = org.apache.commons.lang3.ArrayUtils.subarray(booleanArray37, (int) (byte) 1, (-1));
        int int53 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray51, false);
        boolean[] booleanArray54 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray31, booleanArray51);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray12, booleanArray51);
        boolean[] booleanArray57 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray12, false);
        org.junit.Assert.assertNotNull(booleanArray5);
        org.junit.Assert.assertNotNull(booleanArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray6), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray7);
        org.junit.Assert.assertNotNull(booleanArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray9), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray12), "[]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(booleanArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray17), "[]");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(booleanArray24);
        org.junit.Assert.assertNotNull(booleanArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray25), "[true, true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray26);
        org.junit.Assert.assertNotNull(booleanArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray28), "[true, false, false, true]");
        org.junit.Assert.assertNotNull(booleanArray29);
        org.junit.Assert.assertNotNull(booleanArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray31), "[]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(booleanArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray37), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(booleanArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray44), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 3 + "'", int47 == 3);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(booleanArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray51), "[]");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(booleanArray54);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray54), "[]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(booleanArray57);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray57), "[]");
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 1);
        int int11 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray4, (byte) 1, 1);
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray4, (byte) 10, (int) (short) -1);
        java.lang.Byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray4);
        java.lang.Byte[] byteArray21 = new java.lang.Byte[] { (byte) 1, (byte) 0, (byte) 0, (byte) 0, (byte) 10 };
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray21);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray22);
        int int25 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) byteArray15, (java.lang.Object) byteArray22, 2);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15, (byte) 1);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray15);
        byte[] byteArray30 = org.apache.commons.lang3.ArrayUtils.remove(byteArray28, (int) (short) 0);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[1, 0, 0, 0, 10]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[0, 0, 1]");
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        boolean[] booleanArray4 = new boolean[] { true, true, false, false };
        boolean boolean6 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray4, false);
        boolean[] booleanArray11 = new boolean[] { true, true, false, true };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) '4');
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray4, booleanArray11);
        boolean[] booleanArray20 = new boolean[] { true, true, false, false };
        boolean boolean22 = org.apache.commons.lang3.ArrayUtils.contains(booleanArray20, false);
        boolean[] booleanArray27 = new boolean[] { true, true, false, true };
        int int30 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray27, true, (int) '4');
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(booleanArray20, booleanArray27);
        boolean[] booleanArray32 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray20);
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray11, true, (int) (byte) 10);
        boolean[] booleanArray40 = new boolean[] { true, true, false, true };
        int int43 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray40, true, (int) '4');
        boolean boolean44 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray40);
        boolean[] booleanArray46 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray40, false);
        boolean[] booleanArray47 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray40);
        boolean[] booleanArray48 = org.apache.commons.lang3.ArrayUtils.addAll(booleanArray11, booleanArray40);
        boolean[] booleanArray49 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(booleanArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray20), "[true, true, false, false]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(booleanArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray27), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(booleanArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray32), "[true, true, false, true, true, true, false, false]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 3 + "'", int35 == 3);
        org.junit.Assert.assertNotNull(booleanArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray40), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(booleanArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray46), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray47);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray47), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray48), "[true, true, false, true, true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray49), "[true, true, false, true]");
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        java.lang.Character[] charArray6 = org.apache.commons.lang3.ArrayUtils.toObject(charArray3);
        char[] charArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray6);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.clone(charArray7);
        char[] charArray10 = new char[] { '#' };
        java.lang.Character[] charArray11 = org.apache.commons.lang3.ArrayUtils.toObject(charArray10);
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray10);
        char[] charArray14 = org.apache.commons.lang3.ArrayUtils.add(charArray12, 'a');
        java.lang.Character[] charArray15 = org.apache.commons.lang3.ArrayUtils.toObject(charArray12);
        char[] charArray16 = org.apache.commons.lang3.ArrayUtils.toPrimitive(charArray15);
        char[] charArray17 = org.apache.commons.lang3.ArrayUtils.clone(charArray16);
        char[] charArray19 = new char[] { '#' };
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        boolean boolean21 = org.apache.commons.lang3.ArrayUtils.isEmpty(charArray19);
        char[] charArray22 = org.apache.commons.lang3.ArrayUtils.addAll(charArray17, charArray19);
        char[] charArray23 = org.apache.commons.lang3.ArrayUtils.addAll(charArray8, charArray22);
        char[] charArray25 = org.apache.commons.lang3.ArrayUtils.add(charArray23, 'a');
        char[] charArray27 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray23, 'a');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray30 = org.apache.commons.lang3.ArrayUtils.add(charArray23, (int) '#', 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 35, Length: 3");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertNotNull(charArray7);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray7), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray7), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#]");
        org.junit.Assert.assertNotNull(charArray10);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray10), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray10), "[#]");
        org.junit.Assert.assertNotNull(charArray11);
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#]");
        org.junit.Assert.assertNotNull(charArray14);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray14), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray14), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray14), "[#, a]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray16), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray16), "[#]");
        org.junit.Assert.assertNotNull(charArray17);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray17), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray17), "[#]");
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#, #]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray23), "###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray23), "###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray23), "[#, #, #]");
        org.junit.Assert.assertNotNull(charArray25);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray25), "###a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray25), "###a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray25), "[#, #, #, a]");
        org.junit.Assert.assertNotNull(charArray27);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray27), "###");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray27), "###");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray27), "[#, #, #]");
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (short) 100);
        boolean boolean9 = org.apache.commons.lang3.ArrayUtils.contains(intArray1, (int) (short) 100);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.removeElement(intArray1, 8);
        boolean boolean12 = org.apache.commons.lang3.ArrayUtils.isEmpty(intArray11);
        int[] intArray14 = org.apache.commons.lang3.ArrayUtils.add(intArray11, (int) (byte) 100);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.clone(intArray14);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray15, (int) (byte) 10, (int) '4');
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(intArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray14), "[0, 100]");
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 100]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray38);
        java.lang.Class<?> wildcardClass46 = charArray38.getClass();
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(wildcardClass46);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.remove(shortArray8, (int) (short) 0);
        java.lang.Class<?>[] wildcardClassArray11 = org.apache.commons.lang3.ArrayUtils.EMPTY_CLASS_ARRAY;
        short[] shortArray15 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray15);
        short[] shortArray21 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int24 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray21, (short) (byte) 0, 2);
        boolean boolean25 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray15, shortArray21);
        int int27 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray15, (short) (byte) 0);
        short[] shortArray32 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int35 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray32, (short) (byte) 0, 2);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray32, (short) 100);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray15, shortArray37);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) wildcardClassArray11, (java.lang.Object) shortArray38);
        short[] shortArray41 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray38, (short) (byte) 1);
        short[] shortArray45 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean46 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray45);
        short[] shortArray51 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int54 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray51, (short) (byte) 0, 2);
        boolean boolean55 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray45, shortArray51);
        int int57 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray45, (short) (byte) 0);
        short[] shortArray62 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int65 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray62, (short) (byte) 0, 2);
        short[] shortArray67 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray62, (short) 100);
        short[] shortArray68 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray45, shortArray67);
        short[] shortArray69 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray38, shortArray67);
        short[] shortArray70 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray8, shortArray69);
        boolean boolean71 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray70);
        short[] shortArray73 = org.apache.commons.lang3.ArrayUtils.remove(shortArray70, (int) (short) 0);
        boolean boolean74 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray73);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(wildcardClassArray11);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray15), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(shortArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray21), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray32), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(shortArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray41), "[100, 10, 100, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray45);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray45), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(shortArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray51), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(shortArray62);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray62), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + (-1) + "'", int65 == (-1));
        org.junit.Assert.assertNotNull(shortArray67);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray67), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray68);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray68), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray69), "[100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray70), "[10, 100, -1, 1, 0, 0, 100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(shortArray73);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray73), "[100, -1, 1, 0, 0, 100, 10, 100, 1, 10, 0, 1, 10, 0]");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        java.lang.Short[] shortArray15 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray9);
        java.lang.Object obj16 = null;
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray15, obj16);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(shortArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        java.lang.Byte[] byteArray7 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray6);
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray7);
        byte[] byteArray10 = org.apache.commons.lang3.ArrayUtils.add(byteArray8, (byte) 0);
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray8, (byte) -1, 10);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray7);
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-1, 0, 1, 0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        float[] floatArray0 = null;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 100L);
        java.lang.Float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3);
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray3, (float) 1L);
        float[] floatArray7 = new float[] {};
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray7, (float) 10L);
        float[] floatArray11 = new float[] { (byte) -1 };
        float[] floatArray12 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray9, floatArray11);
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray12, (float) (-1L));
        float[] floatArray15 = new float[] {};
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.add(floatArray15, (float) 10L);
        float[] floatArray19 = new float[] { (byte) -1 };
        float[] floatArray20 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray17, floatArray19);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray17, (float) 1);
        boolean boolean23 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray12, floatArray17);
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray6, floatArray17);
        int int26 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray24, (float) 1L);
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.clone(floatArray24);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray24);
        float[] floatArray29 = new float[] {};
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.add(floatArray29, (float) 10L);
        float[] floatArray32 = new float[] {};
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray29, floatArray32);
        java.lang.Float[] floatArray34 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray32);
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray2, floatArray32);
        float[] floatArray37 = org.apache.commons.lang3.ArrayUtils.add(floatArray2, (float) (short) 1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[100.0]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[]");
        org.junit.Assert.assertNotNull(floatArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray7), "[]");
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray15), "[]");
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray20), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray29), "[]");
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[]");
        org.junit.Assert.assertNotNull(floatArray34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(floatArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray37), "[100.0, 1.0]");
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        float[] floatArray0 = null;
        int int2 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray0, (float) (short) 100);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        float[] floatArray3 = new float[] { 10.0f, 2, 6 };
        float[] floatArray6 = org.apache.commons.lang3.ArrayUtils.add(floatArray3, 0, (float) (byte) 1);
        float[] floatArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(floatArray3, (float) 3);
        org.apache.commons.lang3.ArrayUtils.reverse(floatArray3);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[6.0, 2.0, 10.0]");
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray6), "[1.0, 10.0, 2.0, 6.0]");
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[10.0, 2.0, 6.0]");
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        float[] floatArray0 = new float[] {};
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.add(floatArray0, (float) 10L);
        float[] floatArray4 = new float[] { (byte) -1 };
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray2, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray5, (float) (-1L));
        float[] floatArray8 = new float[] {};
        float[] floatArray10 = org.apache.commons.lang3.ArrayUtils.add(floatArray8, (float) 10L);
        float[] floatArray12 = new float[] { (byte) -1 };
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray10, floatArray12);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray5, floatArray10);
        java.lang.Float[] floatArray15 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray10);
        float[] floatArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray15, (float) (byte) 0);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray0), "[]");
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(floatArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray8), "[]");
        org.junit.Assert.assertNotNull(floatArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray10), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray12), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(floatArray15);
        org.junit.Assert.assertNotNull(floatArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray17), "[10.0]");
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        char[] charArray0 = null;
        char[] charArray2 = new char[] { '#' };
        java.lang.Character[] charArray3 = org.apache.commons.lang3.ArrayUtils.toObject(charArray2);
        char[] charArray4 = org.apache.commons.lang3.ArrayUtils.clone(charArray2);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.add(charArray4, 'a');
        char[] charArray13 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int16 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray13, '4', (int) (byte) 100);
        int int19 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray13, '#', 0);
        char[] charArray20 = org.apache.commons.lang3.ArrayUtils.addAll(charArray4, charArray13);
        char[] charArray22 = new char[] { '#' };
        java.lang.Character[] charArray23 = org.apache.commons.lang3.ArrayUtils.toObject(charArray22);
        char[] charArray24 = org.apache.commons.lang3.ArrayUtils.clone(charArray22);
        char[] charArray26 = org.apache.commons.lang3.ArrayUtils.add(charArray24, 'a');
        char[] charArray28 = new char[] { '#' };
        java.lang.Character[] charArray29 = org.apache.commons.lang3.ArrayUtils.toObject(charArray28);
        char[] charArray30 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        char[] charArray31 = org.apache.commons.lang3.ArrayUtils.addAll(charArray24, charArray28);
        char[] charArray32 = org.apache.commons.lang3.ArrayUtils.addAll(charArray20, charArray28);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.clone(charArray28);
        boolean boolean34 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray33);
        char[] charArray36 = new char[] { '#' };
        java.lang.Character[] charArray37 = org.apache.commons.lang3.ArrayUtils.toObject(charArray36);
        char[] charArray38 = org.apache.commons.lang3.ArrayUtils.clone(charArray36);
        char[] charArray40 = org.apache.commons.lang3.ArrayUtils.add(charArray38, 'a');
        java.lang.Character[] charArray41 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        int int43 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray38, ' ');
        java.lang.Character[] charArray44 = org.apache.commons.lang3.ArrayUtils.toObject(charArray38);
        boolean boolean45 = org.apache.commons.lang3.ArrayUtils.isSameLength(charArray0, charArray38);
        char[] charArray47 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray38, ' ');
        // The following exception was thrown during execution in test generation
        try {
            char[] charArray49 = org.apache.commons.lang3.ArrayUtils.remove(charArray47, (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: 1, Length: 1");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray2), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray2), "[#]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a]");
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray20), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray20), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray22);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray22), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray22), "[#]");
        org.junit.Assert.assertNotNull(charArray23);
        org.junit.Assert.assertNotNull(charArray24);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray24), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray24), "[#]");
        org.junit.Assert.assertNotNull(charArray26);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray26), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray26), "[#, a]");
        org.junit.Assert.assertNotNull(charArray28);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray28), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray28), "[#]");
        org.junit.Assert.assertNotNull(charArray29);
        org.junit.Assert.assertNotNull(charArray30);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray30), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray30), "[#]");
        org.junit.Assert.assertNotNull(charArray31);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray31), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray31), "[#, #]");
        org.junit.Assert.assertNotNull(charArray32);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray32), "##a4#  #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray32), "[#, #, a, 4, #,  ,  , #]");
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[#]");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(charArray36);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray36), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray36), "[#]");
        org.junit.Assert.assertNotNull(charArray37);
        org.junit.Assert.assertNotNull(charArray38);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray38), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray38), "[#]");
        org.junit.Assert.assertNotNull(charArray40);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray40), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray40), "[#, a]");
        org.junit.Assert.assertNotNull(charArray41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(charArray44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(charArray47);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray47), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray47), "[#]");
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        char[] charArray6 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int9 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray6, '4', (int) (byte) 100);
        int[] intArray11 = new int[] { (byte) 0 };
        int int13 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray11, 0);
        int[] intArray15 = org.apache.commons.lang3.ArrayUtils.add(intArray11, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray11, (int) (byte) 1, (int) ' ');
        java.lang.Integer[] intArray19 = org.apache.commons.lang3.ArrayUtils.toObject(intArray11);
        boolean boolean20 = org.apache.commons.lang3.ArrayUtils.isSameType((java.lang.Object) '4', (java.lang.Object) intArray19);
        int[] intArray22 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray19, 4);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(intArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray15), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0]");
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        boolean[] booleanArray4 = new boolean[] { true, true, false, true };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(booleanArray4, true, (int) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray4);
        boolean[] booleanArray10 = org.apache.commons.lang3.ArrayUtils.removeElement(booleanArray4, false);
        boolean[] booleanArray11 = org.apache.commons.lang3.ArrayUtils.clone(booleanArray4);
        java.lang.Boolean[] booleanArray12 = org.apache.commons.lang3.ArrayUtils.toObject(booleanArray11);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isEmpty(booleanArray11);
        org.junit.Assert.assertNotNull(booleanArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray4), "[true, true, false, true]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(booleanArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray10), "[true, true, true]");
        org.junit.Assert.assertNotNull(booleanArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(booleanArray11), "[true, true, false, true]");
        org.junit.Assert.assertNotNull(booleanArray12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        java.lang.Float[][] floatArray0 = new java.lang.Float[][] {};
        java.lang.Float[][] floatArray1 = new java.lang.Float[][] {};
        java.lang.Float[][] floatArray2 = new java.lang.Float[][] {};
        java.lang.Float[][] floatArray3 = new java.lang.Float[][] {};
        java.lang.Float[][] floatArray4 = new java.lang.Float[][] {};
        java.lang.Float[][] floatArray5 = new java.lang.Float[][] {};
        java.lang.Float[][][] floatArray6 = new java.lang.Float[][][] { floatArray0, floatArray1, floatArray2, floatArray3, floatArray4, floatArray5 };
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(floatArray6);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertNotNull(floatArray6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) '#');
        double[] doubleArray11 = org.apache.commons.lang3.ArrayUtils.add(doubleArray8, (int) (short) 1, (double) 1.0f);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray11, (double) (short) -1);
        double[] doubleArray14 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray11);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray14);
        double[] doubleArray16 = null;
        double[] doubleArray17 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray14, doubleArray16);
        int int20 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray17, (double) 10L, 4);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray17);
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray11), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(doubleArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray14), "[10.0, 10.0, 1.0, 0.0, 1.0, 1.0, -1.0]");
        org.junit.Assert.assertNotNull(doubleArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray17), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        double[] doubleArray5 = new double[] { '4', (-1.0f), (-1.0d), 1, 100.0d };
        int int7 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray5, (double) (short) -1);
        int int10 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray5, (double) (-1.0f), (int) (byte) 1);
        org.apache.commons.lang3.ArrayUtils.reverse(doubleArray5);
        boolean boolean14 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray5, (double) 3, (double) (byte) 100);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isEmpty(doubleArray5);
        java.lang.Double[] doubleArray22 = new java.lang.Double[] { (-1.0d), 1.0d, 0.0d, 1.0d, 10.0d, 10.0d };
        double[] doubleArray24 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray22, (double) '#');
        double[] doubleArray27 = org.apache.commons.lang3.ArrayUtils.add(doubleArray24, (int) (short) 1, (double) 1.0f);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.contains(doubleArray27, (double) (short) -1);
        double[] doubleArray30 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray27);
        java.lang.Double[] doubleArray31 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray30);
        float[] floatArray32 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_ARRAY;
        int int33 = org.apache.commons.lang3.ArrayUtils.getLength((java.lang.Object) floatArray32);
        int int34 = org.apache.commons.lang3.ArrayUtils.indexOf((java.lang.Object[]) doubleArray31, (java.lang.Object) floatArray32);
        double[] doubleArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray31);
        double[] doubleArray36 = org.apache.commons.lang3.ArrayUtils.addAll(doubleArray5, doubleArray35);
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[100.0, 1.0, -1.0, -1.0, 52.0]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(doubleArray22);
        org.junit.Assert.assertNotNull(doubleArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray24), "[-1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray27), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(doubleArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray30), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray31);
        org.junit.Assert.assertNotNull(floatArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray32), "[]");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(doubleArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray35), "[-1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
        org.junit.Assert.assertNotNull(doubleArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray36), "[100.0, 1.0, -1.0, -1.0, 52.0, -1.0, 1.0, 1.0, 0.0, 1.0, 10.0, 10.0]");
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        short[] shortArray0 = null;
        java.lang.Short[] shortArray7 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray7);
        short[] shortArray9 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray0, shortArray8);
        boolean boolean11 = org.apache.commons.lang3.ArrayUtils.contains(shortArray0, (short) (byte) 10);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        java.lang.Short[] shortArray6 = new java.lang.Short[] { (short) 10, (short) 100, (short) -1, (short) 1, (short) 0, (short) 0 };
        short[] shortArray7 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6);
        short[] shortArray10 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 1);
        short[] shortArray12 = org.apache.commons.lang3.ArrayUtils.toPrimitive(shortArray6, (short) 10);
        java.lang.Long[] longArray13 = new java.lang.Long[] {};
        long[] longArray14 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray13);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray21 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray19, (byte) 0);
        byte[] byteArray24 = new byte[] { (byte) 100, (byte) 100 };
        int int27 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray24, (byte) 10, 0);
        byte[] byteArray28 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray19, byteArray24);
        boolean boolean29 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray13, (java.lang.Object) byteArray28);
        byte[] byteArray34 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray36 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 0);
        byte[] byteArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray34, (byte) 1);
        boolean boolean39 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray28, byteArray34);
        org.apache.commons.lang3.ArrayUtils.reverse(byteArray28);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.contains((java.lang.Object[]) shortArray6, (java.lang.Object) byteArray28);
        java.lang.Byte[] byteArray42 = org.apache.commons.lang3.ArrayUtils.toObject(byteArray28);
        byte[] byteArray44 = org.apache.commons.lang3.ArrayUtils.toPrimitive(byteArray42, (byte) 100);
        org.junit.Assert.assertNotNull(shortArray6);
        org.junit.Assert.assertNotNull(shortArray7);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray7), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray8), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray10), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(shortArray12);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray12), "[10, 100, -1, 1, 0, 0]");
        org.junit.Assert.assertNotNull(longArray13);
        org.junit.Assert.assertNotNull(longArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray14), "[]");
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[100, 100, 1, 0, 0, -1]");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray38), "[-1, 0, 0]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertNotNull(byteArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray44), "[100, 100, 1, 0, 0, -1]");
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray13 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray4, byteArray9);
        byte[] byteArray14 = null;
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray13, byteArray14);
        byte[] byteArray17 = org.apache.commons.lang3.ArrayUtils.remove(byteArray13, 2);
        byte[] byteArray18 = org.apache.commons.lang3.ArrayUtils.clone(byteArray17);
        byte[] byteArray20 = org.apache.commons.lang3.ArrayUtils.add(byteArray17, (byte) -1);
        byte[] byteArray22 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray17, (byte) -1);
        byte[] byteArray23 = org.apache.commons.lang3.ArrayUtils.clone(byteArray22);
        byte[] byteArray24 = org.apache.commons.lang3.ArrayUtils.clone(byteArray23);
        byte[] byteArray27 = org.apache.commons.lang3.ArrayUtils.subarray(byteArray23, (int) (short) 0, (int) (short) 10);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isEmpty(byteArray27);
        int int31 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray27, (byte) -1, 5);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-1, 0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-1, 0, 1, 100, 100, -1]");
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[0, 1, 100, 100]");
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        long[] longArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_LONG_ARRAY;
        long[] longArray2 = org.apache.commons.lang3.ArrayUtils.removeElement(longArray0, (long) 1);
        int int5 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(longArray2, (long) 100, (int) '#');
        boolean boolean7 = org.apache.commons.lang3.ArrayUtils.contains(longArray2, (long) '4');
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isEmpty(longArray2);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray0), "[]");
        org.junit.Assert.assertNotNull(longArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray2), "[]");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        char[] charArray0 = new char[] {};
        char[][] charArray1 = new char[][] { charArray0 };
        char[] charArray4 = new char[] { '#' };
        java.lang.Character[] charArray5 = org.apache.commons.lang3.ArrayUtils.toObject(charArray4);
        char[] charArray6 = org.apache.commons.lang3.ArrayUtils.clone(charArray4);
        char[] charArray8 = org.apache.commons.lang3.ArrayUtils.add(charArray6, 'a');
        java.lang.Character[] charArray9 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray6, ' ');
        char[] charArray13 = org.apache.commons.lang3.ArrayUtils.add(charArray6, '#');
        int int15 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray6, '4');
        char[][] charArray16 = org.apache.commons.lang3.ArrayUtils.add(charArray1, (int) (byte) 1, charArray6);
        java.lang.Character[] charArray17 = org.apache.commons.lang3.ArrayUtils.toObject(charArray6);
        org.junit.Assert.assertNotNull(charArray0);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray0), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray0), "[]");
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertNotNull(charArray4);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray4), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray4), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertNotNull(charArray6);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray6), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray6), "[#]");
        org.junit.Assert.assertNotNull(charArray8);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray8), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray8), "[#, a]");
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray13);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray13), "##");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray13), "[#, #]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(charArray16);
        org.junit.Assert.assertNotNull(charArray17);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        char[] charArray1 = new char[] { ' ' };
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.add(charArray1, '#');
        int int6 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray1, '#', (int) (short) 10);
        char[] charArray9 = org.apache.commons.lang3.ArrayUtils.subarray(charArray1, (int) (short) -1, (int) '#');
        int int11 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray9, 'a');
        char[] charArray12 = org.apache.commons.lang3.ArrayUtils.clone(charArray9);
        char[] charArray15 = org.apache.commons.lang3.ArrayUtils.subarray(charArray12, 2, (int) (short) 1);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[ ]");
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), " #");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[ , #]");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(charArray9);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray9), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray9), "[ ]");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1) + "'", int11 == (-1));
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), " ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[ ]");
        org.junit.Assert.assertNotNull(charArray15);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray15), "");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray15), "[]");
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.lang.Long[] longArray0 = new java.lang.Long[] {};
        long[] longArray1 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        byte[] byteArray6 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray8 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 0);
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100 };
        int int14 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray11, (byte) 10, 0);
        byte[] byteArray15 = org.apache.commons.lang3.ArrayUtils.addAll(byteArray6, byteArray11);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) longArray0, (java.lang.Object) byteArray15);
        long[] longArray17 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0);
        long[] longArray19 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, 0L);
        long[] longArray21 = org.apache.commons.lang3.ArrayUtils.toPrimitive(longArray0, (long) (byte) 1);
        org.junit.Assert.assertNotNull(longArray0);
        org.junit.Assert.assertNotNull(longArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray1), "[]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-1) + "'", int14 == (-1));
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-1, 0, 0, 1, 100, 100]");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(longArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray17), "[]");
        org.junit.Assert.assertNotNull(longArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray19), "[]");
        org.junit.Assert.assertNotNull(longArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(longArray21), "[]");
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        byte[] byteArray4 = new byte[] { (byte) -1, (byte) 0, (byte) 0, (byte) 1 };
        byte[] byteArray6 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray4, (byte) 0);
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(byteArray9, (byte) 10, 0);
        byte[] byteArray14 = org.apache.commons.lang3.ArrayUtils.add(byteArray9, (byte) 1);
        boolean boolean15 = org.apache.commons.lang3.ArrayUtils.isSameLength(byteArray6, byteArray14);
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.contains(byteArray6, (byte) -1);
        byte[] byteArray19 = org.apache.commons.lang3.ArrayUtils.removeElement(byteArray6, (byte) 10);
        int int21 = org.apache.commons.lang3.ArrayUtils.indexOf(byteArray6, (byte) 1);
        org.junit.Assert.assertNotNull(byteArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray4), "[-1, 0, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray6), "[-1, 0, 1]");
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[100, 100]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[100, 100, 1]");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-1, 0, 1]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray0 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray1 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray2 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray3 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray4 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[] genericDeclarationArray5 = new java.lang.reflect.GenericDeclaration[] {};
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray6 = new java.lang.reflect.GenericDeclaration[][] { genericDeclarationArray0, genericDeclarationArray1, genericDeclarationArray2, genericDeclarationArray3, genericDeclarationArray4, genericDeclarationArray5 };
        java.lang.reflect.GenericDeclaration[][] genericDeclarationArray9 = org.apache.commons.lang3.ArrayUtils.subarray(genericDeclarationArray6, 5, (int) (short) 100);
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray12 = org.apache.commons.lang3.ArrayUtils.subarray((java.lang.reflect.AnnotatedElement[][]) genericDeclarationArray9, (int) '#', 6);
        short[] shortArray16 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean17 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray16);
        short[] shortArray22 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int25 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray22, (short) (byte) 0, 2);
        boolean boolean26 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray16, shortArray22);
        int int28 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray16, (short) (byte) 0);
        short[] shortArray33 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int36 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray33, (short) (byte) 0, 2);
        short[] shortArray38 = org.apache.commons.lang3.ArrayUtils.removeElement(shortArray33, (short) 100);
        short[] shortArray39 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray16, shortArray38);
        java.lang.reflect.AnnotatedElement[][] annotatedElementArray40 = org.apache.commons.lang3.ArrayUtils.removeElement(annotatedElementArray12, (java.lang.Object) shortArray39);
        boolean boolean41 = org.apache.commons.lang3.ArrayUtils.isEmpty(annotatedElementArray40);
        org.junit.Assert.assertNotNull(genericDeclarationArray0);
        org.junit.Assert.assertNotNull(genericDeclarationArray1);
        org.junit.Assert.assertNotNull(genericDeclarationArray2);
        org.junit.Assert.assertNotNull(genericDeclarationArray3);
        org.junit.Assert.assertNotNull(genericDeclarationArray4);
        org.junit.Assert.assertNotNull(genericDeclarationArray5);
        org.junit.Assert.assertNotNull(genericDeclarationArray6);
        org.junit.Assert.assertNotNull(genericDeclarationArray9);
        org.junit.Assert.assertNotNull(annotatedElementArray12);
        org.junit.Assert.assertNotNull(shortArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray16), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(shortArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray22), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(shortArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray33), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(shortArray38);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray38), "[1, 10, 0]");
        org.junit.Assert.assertNotNull(shortArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray39), "[100, 10, 100, 1, 10, 0]");
        org.junit.Assert.assertNotNull(annotatedElementArray40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        int[] intArray1 = new int[] { (byte) 0 };
        int int3 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray1, 0);
        int[] intArray5 = org.apache.commons.lang3.ArrayUtils.add(intArray1, 0);
        int int8 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray1, (int) (byte) 1, (int) ' ');
        int[] intArray10 = new int[] { (byte) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray10, 10, 0);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 0, 1);
        int[] intArray19 = org.apache.commons.lang3.ArrayUtils.addAll(intArray1, intArray10);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(intArray10, 10);
        org.junit.Assert.assertNotNull(intArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray1), "[0]");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(intArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray5), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(intArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray10), "[0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(intArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray19), "[0, 0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + (-1) + "'", int21 == (-1));
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        java.lang.Integer[] intArray3 = new java.lang.Integer[] { 4, 4, (-1) };
        int[] intArray4 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray3);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(intArray4, (int) (byte) 0, 0);
        java.lang.Integer[] intArray8 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        boolean boolean10 = org.apache.commons.lang3.ArrayUtils.contains(intArray4, (int) (byte) 10);
        int[] intArray11 = org.apache.commons.lang3.ArrayUtils.clone(intArray4);
        java.lang.Integer[] intArray12 = org.apache.commons.lang3.ArrayUtils.toObject(intArray4);
        java.lang.Object[] objArray13 = null;
        float[] floatArray14 = new float[] {};
        float[] floatArray16 = org.apache.commons.lang3.ArrayUtils.add(floatArray14, (float) 10L);
        float[] floatArray18 = new float[] { (byte) -1 };
        float[] floatArray19 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray16, floatArray18);
        int int21 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(floatArray19, (float) (-1L));
        float[] floatArray22 = new float[] {};
        float[] floatArray24 = org.apache.commons.lang3.ArrayUtils.add(floatArray22, (float) 10L);
        float[] floatArray26 = new float[] { (byte) -1 };
        float[] floatArray27 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray24, floatArray26);
        boolean boolean28 = org.apache.commons.lang3.ArrayUtils.isSameLength(floatArray19, floatArray24);
        java.lang.Float[] floatArray29 = org.apache.commons.lang3.ArrayUtils.toObject(floatArray24);
        int int30 = org.apache.commons.lang3.ArrayUtils.indexOf(objArray13, (java.lang.Object) floatArray29);
        float[] floatArray31 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray29);
        float[] floatArray33 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray29, (float) (-1L));
        float[] floatArray35 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray29, 0.0f);
        float[] floatArray36 = org.apache.commons.lang3.ArrayUtils.clone(floatArray35);
        java.lang.String str38 = org.apache.commons.lang3.ArrayUtils.toString((java.lang.Object) floatArray36, "{{},{},{},{},{},{},{}}");
        float[] floatArray39 = org.apache.commons.lang3.ArrayUtils.clone(floatArray36);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf((java.lang.Object[]) intArray12, (java.lang.Object) floatArray36, (int) '#');
        int[] intArray43 = org.apache.commons.lang3.ArrayUtils.toPrimitive(intArray12, (int) (short) 0);
        org.junit.Assert.assertNotNull(intArray3);
        org.junit.Assert.assertNotNull(intArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray4), "[4, 4, -1]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(intArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(intArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[4, 4, -1]");
        org.junit.Assert.assertNotNull(intArray12);
        org.junit.Assert.assertNotNull(floatArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray14), "[]");
        org.junit.Assert.assertNotNull(floatArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray16), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray18);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray18), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray19), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(floatArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray22), "[]");
        org.junit.Assert.assertNotNull(floatArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray24), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray27), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(floatArray29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(floatArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray31), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray33);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray33), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray35);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray35), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray36);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray36), "[10.0]");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "{10.0}" + "'", str38, "{10.0}");
        org.junit.Assert.assertNotNull(floatArray39);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray39), "[10.0]");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[4, 4, -1]");
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        java.lang.Object[] objArray0 = null;
        float[] floatArray1 = new float[] {};
        float[] floatArray3 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) 10L);
        float[] floatArray4 = new float[] {};
        float[] floatArray5 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray1, floatArray4);
        int int7 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray1, (float) (byte) 1);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.add(floatArray1, (float) (-1L));
        int int10 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(objArray0, (java.lang.Object) floatArray9);
        int int12 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray9, (float) (byte) 100);
        org.junit.Assert.assertNotNull(floatArray1);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray1), "[]");
        org.junit.Assert.assertNotNull(floatArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray3), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray4), "[]");
        org.junit.Assert.assertNotNull(floatArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray5), "[]");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[-1.0]");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray9);
        int int17 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray9, (short) -1, (int) (byte) 1);
        short[] shortArray18 = null;
        short[] shortArray19 = org.apache.commons.lang3.ArrayUtils.addAll(shortArray9, shortArray18);
        int int22 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray19, (short) 0, 0);
        short[] shortArray27 = new short[] { (short) 10, (short) 1, (byte) 1, (short) 1 };
        org.apache.commons.lang3.ArrayUtils.reverse(shortArray27);
        short[] shortArray30 = org.apache.commons.lang3.ArrayUtils.remove(shortArray27, 0);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray19, shortArray30);
        java.lang.Short[] shortArray32 = org.apache.commons.lang3.ArrayUtils.toObject(shortArray30);
        short[] shortArray34 = org.apache.commons.lang3.ArrayUtils.add(shortArray30, (short) (byte) 1);
        short[] shortArray37 = org.apache.commons.lang3.ArrayUtils.subarray(shortArray34, (int) (short) 100, 5);
        int int39 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray37, (short) 0);
        int int41 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray37, (short) (byte) 100);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(shortArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray19), "[0, 100, 10, 1]");
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(shortArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray27), "[1, 1, 1, 10]");
        org.junit.Assert.assertNotNull(shortArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray30), "[1, 1, 10]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(shortArray32);
        org.junit.Assert.assertNotNull(shortArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray34), "[1, 1, 10, 1]");
        org.junit.Assert.assertNotNull(shortArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray37), "[]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        long[] longArray0 = null;
        boolean boolean2 = org.apache.commons.lang3.ArrayUtils.contains(longArray0, (long) (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        java.lang.Double[] doubleArray6 = new java.lang.Double[] { 1.0d, 0.0d, (-1.0d), 100.0d, 10.0d, 10.0d };
        double[] doubleArray8 = org.apache.commons.lang3.ArrayUtils.toPrimitive(doubleArray6, (double) 10);
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(doubleArray8, (double) 2, (int) (byte) 100, (double) 'a');
        int int14 = org.apache.commons.lang3.ArrayUtils.indexOf(doubleArray8, 0.0d);
        // The following exception was thrown during execution in test generation
        try {
            double[] doubleArray16 = org.apache.commons.lang3.ArrayUtils.remove(doubleArray8, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Index: -1, Length: 6");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertNotNull(doubleArray8);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray8), "[1.0, 0.0, -1.0, 100.0, 10.0, 10.0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 5 + "'", int12 == 5);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        char[] charArray1 = new char[] { '#' };
        java.lang.Character[] charArray2 = org.apache.commons.lang3.ArrayUtils.toObject(charArray1);
        char[] charArray3 = org.apache.commons.lang3.ArrayUtils.clone(charArray1);
        char[] charArray5 = org.apache.commons.lang3.ArrayUtils.add(charArray3, 'a');
        char[] charArray12 = new char[] { '#', 'a', '4', '#', ' ', ' ' };
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(charArray12, '4', (int) (byte) 100);
        int int18 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(charArray12, '#', 0);
        char[] charArray19 = org.apache.commons.lang3.ArrayUtils.addAll(charArray3, charArray12);
        java.lang.Character[] charArray20 = org.apache.commons.lang3.ArrayUtils.toObject(charArray19);
        float[] floatArray21 = new float[] {};
        float[] floatArray23 = org.apache.commons.lang3.ArrayUtils.add(floatArray21, (float) 10L);
        float[] floatArray25 = new float[] { (byte) -1 };
        float[] floatArray26 = org.apache.commons.lang3.ArrayUtils.addAll(floatArray23, floatArray25);
        int int29 = org.apache.commons.lang3.ArrayUtils.indexOf(floatArray23, 0.0f, (int) ' ');
        float[] floatArray30 = org.apache.commons.lang3.ArrayUtils.clone(floatArray23);
        boolean boolean31 = org.apache.commons.lang3.ArrayUtils.isEquals((java.lang.Object) charArray19, (java.lang.Object) floatArray30);
        char[] charArray33 = org.apache.commons.lang3.ArrayUtils.removeElement(charArray19, '#');
        boolean boolean35 = org.apache.commons.lang3.ArrayUtils.contains(charArray33, 'a');
        org.apache.commons.lang3.ArrayUtils.reverse(charArray33);
        org.junit.Assert.assertNotNull(charArray1);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray1), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray1), "[#]");
        org.junit.Assert.assertNotNull(charArray2);
        org.junit.Assert.assertNotNull(charArray3);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray3), "#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray3), "[#]");
        org.junit.Assert.assertNotNull(charArray5);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray5), "#a");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray5), "[#, a]");
        org.junit.Assert.assertNotNull(charArray12);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray12), "#a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray12), "[#, a, 4, #,  ,  ]");
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(charArray19);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray19), "##a4#  ");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray19), "[#, #, a, 4, #,  ,  ]");
        org.junit.Assert.assertNotNull(charArray20);
        org.junit.Assert.assertNotNull(floatArray21);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray21), "[]");
        org.junit.Assert.assertNotNull(floatArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray23), "[10.0]");
        org.junit.Assert.assertNotNull(floatArray25);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray25), "[-1.0]");
        org.junit.Assert.assertNotNull(floatArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray26), "[10.0, -1.0]");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(floatArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray30), "[10.0]");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(charArray33);
        org.junit.Assert.assertEquals(java.lang.String.copyValueOf(charArray33), "  #4a#");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(charArray33), "  #4a#");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(charArray33), "[ ,  , #, 4, a, #]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        short[] shortArray3 = new short[] { (short) 100, (short) 10, (byte) 100 };
        boolean boolean4 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        short[] shortArray9 = new short[] { (short) 1, (byte) 10, (byte) 100, (short) 0 };
        int int12 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray9, (short) (byte) 0, 2);
        boolean boolean13 = org.apache.commons.lang3.ArrayUtils.isSameLength(shortArray3, shortArray9);
        int int15 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 0);
        boolean boolean16 = org.apache.commons.lang3.ArrayUtils.isEmpty(shortArray3);
        int int19 = org.apache.commons.lang3.ArrayUtils.indexOf(shortArray3, (short) (byte) 100, (int) (short) 1);
        int int22 = org.apache.commons.lang3.ArrayUtils.lastIndexOf(shortArray3, (short) 0, 0);
        org.junit.Assert.assertNotNull(shortArray3);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray3), "[100, 10, 100]");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(shortArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(shortArray9), "[1, 10, 100, 0]");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        java.lang.Float[] floatArray0 = org.apache.commons.lang3.ArrayUtils.EMPTY_FLOAT_OBJECT_ARRAY;
        float[] floatArray2 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 1.0f);
        double[] doubleArray4 = new double[] { (byte) 10 };
        double[] doubleArray5 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray4);
        double[] doubleArray6 = org.apache.commons.lang3.ArrayUtils.clone(doubleArray5);
        java.lang.Double[] doubleArray7 = org.apache.commons.lang3.ArrayUtils.toObject(doubleArray6);
        boolean boolean8 = org.apache.commons.lang3.ArrayUtils.isSameLength((java.lang.Object[]) floatArray0, (java.lang.Object[]) doubleArray7);
        float[] floatArray9 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0);
        float[] floatArray11 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, 10.0f);
        float[] floatArray13 = org.apache.commons.lang3.ArrayUtils.toPrimitive(floatArray0, (float) 6);
        org.junit.Assert.assertNotNull(floatArray0);
        org.junit.Assert.assertNotNull(floatArray2);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray2), "[]");
        org.junit.Assert.assertNotNull(doubleArray4);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray4), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray5);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray5), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray6);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(doubleArray6), "[10.0]");
        org.junit.Assert.assertNotNull(doubleArray7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(floatArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray9), "[]");
        org.junit.Assert.assertNotNull(floatArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray11), "[]");
        org.junit.Assert.assertNotNull(floatArray13);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(floatArray13), "[]");
    }
}

